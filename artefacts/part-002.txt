
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 2-3
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
331
05020
DSCTMP, OR ELSE THEY WILL BE COPIED BEFORE
332
05040
THEY ARE PRINTED.
333
334
05080
FNDFOR
335
05100
MOST SMALL ROUTINES ARE FAIRLY SIMPLE
336
05120
AND ARE DOCUMENTED IN PLACE. FNDFOR IS
337
05140
USED FOR INDING "FOR" ENTRIES ON
338
05160
THE STACK. WHENEVER A "FOR" IS EXECUTED AN
339
05180
18 BYTE ENTRY IS PUSHED ONTO THE STACK.
340
05200
BEFORE THIS IS DONE, HOWEVER, A CHECK
341
05220
MUST BE MADE TO SEE IF THERE
342
05240
ARE ANY "FOR" ENTRIES ALREADY ON THE STACK
343
05260
FOR THE SAME LOOP VARIABLE, IF so, THAT "FOR" ENTRY
344
05280
AND ALL OTHER "FOR" ENTRIES THAT WERE MADE AFTER IT
345
05300
ARE ELIMINATED FROM THE STACK, THIS IS SO A
346
05320
PROGRAM THAT JUMPS OUT OF THE MIDDLE
347
05340
OF A "FOR" LOOP AND THEN RESTARTS THE LOOP AGAIN
348
05360
AND AGAIN WON'T USE UP 18 BYTES OF STACK
349
05380
SPACE EVERY TIME. THE "NEXT" CODE ALSO
350
05400
CALLS FNDFOR TO SEARCH FOR A "FOR" ENTRY WITH
351
05420
THE LOOP VARIABLE IN
352
05440
THE "NEXT". AT WHATEVER POINT A MATCH IS FOUND
353
05460
THE STACK IS RESET, IF NO MATCH IS FOUND A
354
05480
"NEXT WITHOUT FOR" ERROR OCCURS. GOSUB EXECUTION
355
05500
ALSO PUTS A 6 BYTE ENTRY ON STACK
356
05520
WHEN A RETURN IS EXECUTED FNDFOR IS
357
05540
CALLED WITH A VARIABLE POINTER THAT CAN'T
358
05560
BE MATCHED. WHEN "FNDFOR" HAS RUN
359
05580
THROUGH ALL THE "FOR" ENTRIES ON THE STACK
360
05600
IT RETURNS AND THE RETURN CODE MAKES
361
05620
SURE THE ENTRY THAT WAS STOPPED
362
05640
ON IS A GOSUB ENTRY. THIS ASSURES THAT
363
05660
IF YOU GOSUB TO A SECTION OF CODE
364
05680
IN WHICH A FOR LOOP IS ENTERED BUT NEVER
365
05700
EXITED THE RETURN WILL STILL BE
366
05720
ABLE TO FIND THE MOST RECENT
367
05740
GOSUB ENTRY. THE "RETURN" CODE ELIMINATES THE
368
05760
"GOSUB" ENTRY AND ALL "FOR" ENTRIES MADE AFTER
369
05780
THE GOSUB ENTRY.
370
371
05820
NON-RUNTIME STUFF
372
05840
THE CODE TO INPUT A LINE, CRUNCH IT,GIVE ERRORS,
373
05860
FIND A SPECIFIC LINE IN THE PROGRAM,
374
05880
PERFORM A "NEW", "CLEAR", AND "LIST" ARE
375
05900
ALL IN THIS AREA. GIVEN THE EXPLANATION OF
376
05920
PROGRAM STORAGE GIVEN BELOW THESE ARE
377
05940
ALL STRAIGHTFORWARD.
378
379
05980
NEWSTT
380
06000
WHENEVER A STATEMENT FINISHES EXECUTION IT
381
06020
DOES A "RET" WHICH TAKES
382
06040
EXECUTION BACK TO NEWSTT. STATEMENTS THAT
383
06060
CREATE OR LOOK AT SEMI-PERMANENT STACK ENTRIES
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 2-4
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
384
06080
MUST GET RID OF THE RETURN ADDRESS OF NEWSTT AND
385
06100
JMP TO NEWSTT WHEN DONE. NEWSTT ALWAYS
386
06120
CHRGETS THE FIRST CHARACTER AFTER THE STATEMENT
387
06140
NAME BEFORE DISPATCHING. WHEN RETURNING
388
06160
BACK TO NEWSTT THE ONLY THING THAT
389
06180
MUST BE SET UP IS THE TEXT POINTER IN
390
06200
[H,L]. NEWSTT WILL CHECK TO MAKE SURE
391
06220
[H,L] IS POINTING TO A STATEMENT TERMINATOR.
392
06240
IF A STATEMENT SHOULDN'T BE PERFORMED UNLESS
393
06260
IT IS PROPERLY FORMATTED (I.E. "NEW") IT CAN
394
06280
SIMPLY DO A "RNZ" FTER READING ALL OF
395
06300
ITS ARGUMENTS. SINCE THE ZERO FLAG
396
06320
BEING OFF INDICATES THERE IS NOT
397
06340
A STATEMENT TERMINATOR NEWSTT WILL
398
06360
DO THE JMP TO THE "SYNTAX ERROR"
399
06380
ROUTINE. IF A STATEMENT SHOULD BE STARTED
400
06400
OVER IT CAN DO LHLD TEMP,RE SINCE THE [H,L]
401
06420
AT NEWSTT IS ALWAYS STORED IN TEMP. OF COURSE
402
06440
CARE MUST BE TAKEN THAT NO ROUTINE
403
06460
THAT SMASHES TEMP HAS BEEN CALLED.
404
06480
THE "C CODE STORES TEMP IN OLDTXT AND CURLIN (THE
405
06500
CURRENT LINE NUMBER) IN OLDLIN SINCE THE -C CHECK
406
06520
IS MADE BEFORE THE STATEMENT POINTED TO IS
407
06540
EXECUTED. "STOP" AND "END" STORE THE TEXT POINTER
408
06560
IN (H,L) WHICH POINTS AT THEIR TERMINATING
409
06580
CHARACTER IN OLDTXT,
410
411
06620
STATEMENT CODE
412
06640
THE INDIVIDUAL STATEMENT CODE COMES
413
06660
NEXT. THE APPROACH USED IN EXECUTING EACH
414
06680
STATEMENT IS DOCUMENTED IN THE STATEMENT CODE
415
06700
ITSELF.
416
417
06740
FRMEVL, THE FORMULA EVALUATOR
418
06760
GIVEN AN (H,L. POINTING TO THE STARTING
419
06780
CHARACTER OF A FORMULA FRMEVL
420
06800
EVALUATES THE FORMULA AND LEAVES
421
06820
THE VALUE IN THE FLOATING ACCUMULATOR (FAC).
422
06840
(H,L) IS RETURNED POINTING TO THE FIRST CHARACTER
423
06860
THAT COULD NOT BE INTERPRETED AS PART OF THE
424
06880
FORMULA. THE ALGORITHM USES THE STACK
425
06900
TO STORE TEMPORARY RESULTS:
426
427
06940
0. PUT A DUMMY PRECEDENCE OF ZERO ON
428
06960
THE STACK.
429
06980
1. READ LEXEME (CONSTANT,FUNCTION,
430
07000
VARIABLE,FORMUL IN PARENS)
431
07020
AND TAKE THE LAST PRECEDENCE VALUE
432
07040
OFF THE STACK.
433
07060
2. SEE IF THE NEXT CHARACTER IS AN OPERATOR
434
07080
IF THIS MAY CAUSE
435
07100
OPERATOR APPLICATION OR AN ACTUAL
436
07120
RETURN FROM FRMEVL.
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 2-5
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
437
07140
3. IF IT IS, SEE WHAT PRECEDENCE IT HAS
438
07160
AND COMPARE IT TO THE PRECEDENCE
439
07180
OF THE LAST OPERATOR ON THE STACK
440
07200
4.
IF
OR LESS REMEMBER THE TEXT
441
07220
POINTER AT THE START OF THIS OPERATOR
442
07240
AND DO A RETURN TO CAUSE
443
07260
APPLICATION OF THE LAST OPERATOR.
444
07280
EVENTUALLY RETURN TO STEP 2
445
07300
BY RETURNING TO RETAOP.
446
07320
5. IF GREATER PUT THE LAST PRECEDENCE
447
07340
BACK ON, SAVE THE CURRENT
448
07360
TEMPORARY RESULT, OPERATOR ADDRESS
449
07380
AND PRECEDENCE AND RETURN TO STEP 1.
450
451
07420
RELATIONAL OPERATORS ARE ALL HANDLED THROUGH
452
07440
A COMMON ROUTINE. SPECIAL
453
07460
CARE IS TAKEN TO DETECT TYPE MISMATCHES SUCH AS 3+"F"
454
455
07500
EVAL
THE ROUTINE TO READ A LEXEME
456
07520
EVAL CHECKS FOR THE DIFFERENT TYPES OF
457
07540
ENTITIES IT IS SUPPOSED TO DETECT.
458
07560
LEADING PLUSES ARE IGNORED,
459
07580
DIGITS AND "." CAUSE FIN (FLOATING INPUT)
460
07600
TO BE CALLED. FUNCTION NAMES CAUSE THE
461
07620
FORMULA INSIDE THE PARENTHESES TO BE EVALUATED
462
07640
AND THE FUNCTION ROUTINE TO BE CALLED. VARIABLE
463
07660
NAMES CAUSE PIRGET TO BE CALLED TO GET A POINTER
464
07680
TO THE VALUE, AND THEN THE VALUE IS PUT INTO
465
07700
THE FAC. AN OPEN PARENTHESIS CAUSES FRMEVL
466
07720
TO BE CALLED (RECURSIVELY), AND THE ")" TO
467
07740
BE CHECKED FOR. UNARY OPERATORS (NOT AND
468
07760
NEGATION) PUT THEIR PRECEDENCE ON THE STACK
469
07780
AND ENTER FORMULA EVALUATION AT STEP 1, SO
470
07800
THAT EVERYTHING UP TO AN OPERATOR GREATER THAN
471
07820
THEIR PRECEDENCE OR THE END OF THE FORMULA
472
07840
WILL BE EVALUATED. WHEN FRMEVL DOES A RETURN
473
07860
BECAUSE IT SEES AN OPERATOR OF HIGHER PRECEDENCE
474
07880
IT DOES NOT PASS THE TEXT POINTER IN [H,LJ, so
475
07900
AFTER THE UNARY OPERATION HAS BEEN PERFORMED
476
07920
ON THE FAC THE TEXT POINTER MUST BE FETCHED FROM
477
07940
A TEMPORARY LOCATION THAT FRMEVL USES AND
478
07960
A RETURN BACK TO FRMEVL DONE.
479
480
08000
DIMENSION AND VARIABLE SEARCHING
481
08020
SPACE IS ALLOCATED FOR VARIABLES AS THEY ARE
482
08040
ENCOUNTERED. THUS "DIM" STATEMENTS MUST BE
483
08060
EXECUTED TO HAVE EFFECT. 6 BYTES ARE ALLOCATED
484
08080
FOR EACH SIMPLE VARIABLE, WHETHER IT IS A STRING,
485
08100
NUMBER OR USER DEFINED FUNCTION. THE FIRST TWO
486
08120
BYTES GIVE THE NAME OF THE VARIABLE AND THE LAST FOUR
487
08140
GIVE ITS VALUE. (VARTAB) GIVES THE FIRST LOCATION
488
08160
WHERE A SIMPLE VARIABLE NAME IS FOUND AND [ARYTAB]
489
08180
GIVES THE LOCATION TO STOP SEARCHING FOR SIMPLE
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 2-6
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
490
08200
VARIABLES, A "FOR" ENTRY HAS A TEXT POINTER
491
08220
AND A POINTER TO A VARIABLE VALUE so NEITHER
492
08240
THE PROGRAM OR THE SIMPLE VARIABLES CAN BE
493
08260
MOVED WHILE THERE ARE ACTIVE "FOR" ENTRIES ON THE STACK.
494
08280
USER FINED FUNCTION VALUES ALSO CONTAIN
495
08300
POINTERS INTO SIMPLE VARIABLE SPACE so NO USER-DEFINED
496
08320
FUNCTION VALUES CAN BE RETAINED IF SIMPLE VARIABLES
497
08340
ARE MOVED. ADDING A SIMPLE VARIABLE
498
08360
ADDING SIX TO ARYTAB AND STREND, BLOCK TRANSFERING
499
08380
THE ARRAY VARIABLES UP BY SIX AND MAKING SURE THE
500
08400
NEW [STREND] IS NOT TO CLOSE TO THE STACK.
501
08420
THIS MOVEMENT OF ARRAY VARIABLES MEANS
502
08440
THAT NO POINTER TO AN ARRAY WILL STAY VALID WHEN
503
08460
NEW SIMPLE VARIABLES CAN BE ENCOUNTERED. THIS IS
504
08480
WHY ARRAY VARIABLES ARE NOT ALLOWED "FOR"
505
08500
LOOP VARIABLES, SETING UP ANEW ARRAY VARIABLE
506
08520
MERELY INVOLVES BUILDING THE DESCRIPTOR,
507
08540
UPDATING STREND, AND MAKING SURE THERE IS
508
08560
STILL ENOUGH ROOM BETWEEN STREND AND THE
509
08580
STACK, WITHOUT MULTIPLE DIMENSIONS THE FORMAT
510
08600
OF AN ARRAY VARIABLE IS SIMPLY:
511
08620
SECOND CHARACTER
512
08640
FIRST CHARACTER
513
08660
NUMBER OF BYTES USED BY VALUES
514
08680
VALUES
515
08700
THE FORMAT WHEN MULTIPLY DIMENSIONED VARIABLES
516
08720
ARE ALLOWED IS DESCRIBED IN THE "MULDIM" CODE.
517
08740
PIRGET, THE ROUTINE WHICH RETURNS A POINTER
518
08760
TO A VARIABLE VALUE, HAS TWO IMPORTANT FLAGS. ONE IS
519
08780
"DIMFLG" WHICH INDICATED WHETHER "DIM" CALLED PTRGET
520
08800
OR NOT. IF so, NO PRIOR ENTRY FOR THE VARIABLE IN
521
08820
QUESTION SHOULD BE FOUND, AND THE INDEX INDICATES
522
08840
HOW MUCH SPACE TO SET ASIDE. SIMPLE VARIABLES CAN
523
08860
BE "DIMENSIONED", BUT THE ONLY EFFECT WILL BE TO
524
08880
SET ASIDE SPACE FOR THE VARIABLE IF IT HASN'T BEEN
525
08900
ENCOUNTERED YET. THE OTHER IMPORTANT FLAG IS SUBFLG
526
08920
WHICH INDICATES WHETHER A SUBSCRIPTED VARIABLE SHOULD BE
527
08940
ALLOWED IN THE CURRENT CONTEXT. IF SUBFLG IS NON-ZERO
528
08960
THE OPEN PARENTHESIS FOR A SUBSCRIPTED VARIABLE
529
08980
WILL NOT BE SCANNED BY PIRGET, AND PIRGET WILL RETURN
530
09000
WITH A TEXT POINTER POINTING TO THE "(", IF
531
09020
THERE WAS ONE,
532
09040
STRINGS
533
09060
IN THE VARIABLE TABLE STRINGS ARE STORED JUST LIKE
534
09080
NUMERIC VARIABLES. SIMPLE STRINGS HAVE FOUR VALUE
535
09100
BYTES WHICH ARE INITIALIZED TO ALL ZEROS (WHICH
536
09120
REPRESENTS THE NULL STRING). THE ONLY DIFFERENCE
537
09140
IN HANDLING IS THAT WHEN PIRGET SEES A "$" AFTER THE
538
09160
NAME OF A VARIABLE, PIRGET SETS VALTYP TO ONE AND TURNS
539
09180
ON THE MSB (MOST-SIGNIFIGANT-BITY OF THE VALUE OF
540
09200
THE FIRST CHARACTER OF THE VARIABLE NAME.
541
09220
HAVING THIS BIT ON IN THE NAME OF THE VARIABLE ENSURES
542
09240
THAT THE SEARCH ROUTINE WILL NOT MATCH
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47 (113) 03:12 10-SEP-75 PAGE 2-7
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
543
09260
'A' WITH 'AS' OR 'AS' WITH 'A'. THE MEANING OF
544
09280
THE FOUR VALUE BYTES ARE:
545
09300
LOW
546
09320
LENGTH OF THE STRING
547
09340
UNUSED
548
09360
LOW 8 BITS
549
09380
HIGH 8 BITS OF THE ADDRESS
550
09400
OF THE CHARACTERS IN THE
551
09420
STRING IF LENGTH. NE.
552
09440
MEANINGLESS OTHERWISE.
553
09460
HIGH
554
09480
THE VALUE OF A STRING VARIABLE (THESE 4 BYTES)
555
09500
IS CALLED THE STRING DESCRIPTOR TO DISTINGUISH
556
09520
IT FROM THE ACTUAL STRING DATA. WHENEVER A
557
09540
STRING CONSTANT IS ENCOUNTERED IN A FORMULA OR AS
558
09560
PART OF AN INPUT STRING, OR AS PART OF DATA, STRLIT
559
09580
IS CALLED, CAUSING A DESCRIPTOR TO BE BUILT FOR
560
09600
THE STRING. IF THE STRING CONSTANT IS IN BUF (WHICH
561
09620
IT WILL BE IF THE STRING IS BEING "INPUT", OR THE
562
09640
STRING IS PART OF SOME FORMULA IN A DIRECT STATEMENT)
563
09660
THE VALUE IS COPIED INTO STRING SPACE SINCE BUF
564
09680
IS ALWAYS CHANGING, "STRCPY" IS USED TO COPY
565
09700
STRINGS.
566
567
09740
STRING FUNCTIONS AND THE ONE STRING OPERATOR "+H
568
09760
ALWAYS RETURN THEIR VALUES IN STRING SPACE.
569
09780
ASSIGNING A STRING A CONSTANT VALUE IN A PROGRAM
570
09800
THROUGH A "READ" OR ASSIGNMENT STATEMENT
571
09820
WILL NOT USE ANY STRING SPACE SINCE
572
09840
THE STRING DESCRIPTOR WILL POINT INTO THE
573
09860
PROGRAM ITSELF. IN GENERAL, COPYING IS DONE
574
09880
WHEN A STRING VALUE IS IN BUF, OR IT IS IN STRING
575
09900
SPACE AND THERE IS AN ACTIVE POINTER TO IT.
576
09920
THUS FS=G$ WILL CAUSE COPYING IF G$ HAS ITS
577
09940
STRING DATA IN STRING SPACE. FS=CHRS(7)
578
09960
WILL USE ONE BYTE OF STRING SPACE TO STORE THE
579
09980
NEW ONE CHARACTER STRING CREATED BY "CHRS", BUT
580
10000
THE ASSIGNMENT ITSELF WILL CAUSE NO COPYING SINCE
581
10020
THE ONLY POINTER AT THE NEW STRING IS A
582
10040
TEMPORARY DESCRIPTOR CREATED BY FRMEVL WHICH WILL
583
10060
GO AWAY AS SOON AS THE ASSIGNMENT IS DONE.
584
10080
IT IS THE NATURE OF GARBAGE COLLECTION THAT
585
10100
DISALLOWS HAVING TWO STRING DESCRIPTORS POINT TO THE SAME
586
10120
AREA IN STRING SPACE. STRING FUNCTIONS AND OPERATORS
587
10140
MUST PROCEED AS FOLLOWS:
588
10160
1) FIGURE OUT THE LENGTH OF THEIR RESULT
589
10180
2) CALL GETSPA TO FIND SPACE FOR THEIR
590
10200
RESULT. THE ARGUMENTS TO THE FUNCTION
591
10220
OR OPERATOR MAY CHANGE SINCE GARBAGE COLLECTION
592
10240
MAY BE INVOKED. THE ONLY THING THAT CAN
593
10260
BE SAVED DURING THE CALL TO GETSPA IS A POINTER
594
10280
TO THE DESCRIPTORS OF THE ARGUMENTS.
595
10300
3) CONSTRUCT THE RESULT DESCRIPTOR IN DSCTMP.
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 2-8
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
596
10320
GETSPA RETURNS THE LOCATION OF THE AVAILABLE
597
10340
SPACE.
598
10360
4) CREATE THE NEW VALUE BY COPYING PARTS
599
10380
OF THE ARGUMENTS OR WHATEVER.
600
10400
5) FREE UP THE ARGUMENTS BY CALLING FRETMP.
601
10420
6) JUMP TO PUTNEW TO GET THE DESCRIPTOR IN
602
10440
OSCTMP TRANSFERRED INTO A NEW STRING TEMPORARY.
603
604
10480
THE REASON FOR STRING TEMPORARIES IS THAT GARBAGE
605
10500
COLLECTION HAS TO KNOW ABOUT ALL ACTIVE STRING DESCRIPTORS
606
10520
SO IT KNOWS WHAT IS AND ISN'T IN USE. STRING TEMPORARIES ARE
607
10540
USED TO STORE THE DESCRIPTORS OF STRING EXPRESSIONS.
608
609
10580
INSTEAD OF HAVING AN ACTUAL VALUE STORED IN THE
610
10600
FAC, AND HAVING THE VALUE OF A TEMPORARY RESULT
611
10620
BEING SAVED ON THE STACK, AS HAPPENS WITH NUMERIC
612
10640
VARIABLES, STRINGS HAVE THE POINTER TO A STRING DESCRIPTOR
613
10660
STORED IN THE FAC, AND IT IS THIS POINTER
614
10680
THAT GETS SAVED ON THE STACK BY FORMULA EVALUATION.
615
10700
STRING FUNCTIONS CANNOT FREE THEIR ARGUMENTS UP RIGHT
616
10720
AWAY SINCE GETSPA MAY FORCE
617
10740
GARBAGE COLLECTION AND THE ARGUMENT STRINGS
618
10760
MAY BE OVER-WRITTEN SINCE GARBAGE COLLECTION
619
10780
WILL NOT BE ABLE TO FIND AN ACTIVE POINTER TO
620
10800
THEM. FUNCTION AND OPERATOR RESULTS ARE BUILT IN
621
10820
DSCTMP SINCE STRING TEMPORARIES ARE ALLOCATED
622
10840
(PUTNEW) AND DEALLOATED (FRETMP) IN A FIFO ORDERING
623
10860
(I.E. A STACK) so THE NEW TEMPORARY CANNOT
624
10880
BE SET UP UNTIL THE OLD ONE(S) ARE FREED. TRYING
625
10900
TO BUILD A RESULT IN A TEMPORARY AFTER
626
10920
FREEING UP THE ARGUMENT TEMPORARIES COULD RESULT
627
10940
IN ONE OF THE ARGUMENT TEMPORARIES BEING OVERWRITTEN
628
10960
TOO SOON BY THE NEW RESULT.
629
630
11000
STRING SPACE IS ALLOCATED AT THE VERY TOP
631
11020
OF MEMORY. MEMSIZ POINTS BEYOND THE LAST LOCATION OF
632
11040
STRING SPACE. STRING ARE STORED IN HIGH LOCATIONS
633
11060
FIRST. WHENEVER STRING SPACE IS ALLOCATED (GETSPA)
634
11080
FRETOP, WHICH IS INITIALIZED TO [MEMSIZ], IS UPDATED
635
11100
TO GIVE THE HIGHEST LOCATION IN STRING SPACE
636
11120
THAT IS NOT IN USE. THE RESULT IS THAT
637
11140
FRETOP GETS SMALLER AND SMALLER, UNTIL SOME
638
11160
ALLOCATION WOULD MAKE (FRETOP) LESS THAN OR EQUAL TO
639
11180
(STKTOP). THIS MEANS STRING SPACE HAS RUN INTO THE
640
11200
STACK AND THAT GARBAGE COLLECTION MUST BE CALLED.
641
642
11240
GARBAGE COLLECTION:
643
11260
0. MINPTR=ISTKTOP) (FRETOP) (MEMSIZ)
644
11280
1. REMMIN=0
645
11300
2. FOR EACH STRING DESCRIPTOR
646
11320
(TEMPORARIES, SIMPLE STRINGS, STRING ARRAYS)
647
11340
IF THE STRING IS NOT NULL AND ITS POINTER IS
648
11360
MINPTR AND LT.FRETOP,
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47 (113) 03:12 10-SEP-75 PAGE 2-9
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
649
11380
MINPTR=THIS STRING DESCRIPTORS POINTER
650
11400
REMMIN=POINTER AT THIS STRING DESCRIPTOR
651
11420
END
652
11440
3. IF REMMIN. NE.0 (WE FOUND AN UNCOLLECTED STRING)
653
11460
BLOCK TRANSFER THE STRING DATA POINTED
654
11480
TO IN THE STRING DESCRIPTOR POINTED TO BY REMMIN
655
11500
so THAT THE LAST BYTE OF STRING DATA IS AT
656
11520
[FRETOP], UPDATE FRETOP so THAT IT
657
11540
POINTS TO THE LOCATION JUST BELOW THE ONE
658
11560
THE STRING DATA WAS MOVED INTO. UPDATE
659
11580
THE POINTER IN THE DESCRIPTOR so IT POINTS
660
11600
TO THE NEW LOCATION OF THE STRING DATA,
661
11620
GO TO STEP 1.
662
663
11660
AFTER CALLING GARBAGE COLLECTION GETSPA AGAIN CHECKS
664
11680
TO SEE IF (A) CHARACTERS ARE AVAILABLE BETWEEN
665
11700
(STKTOP) AND [FRETOP] , IF NOT AN "OUT OF STRING"
666
11720
ERROR IS INVOKED.
667
668
11760
MATH PACKAGE
669
11780
THE MATH PACKAGE CONTAINS FLOATING INPUT (FIN),
670
11800
FLOATING OUTPUT (FOUT) FLOATING COMPARE (FCOMP)
671
11820
... AND ALL THE NUMERIC OPERATORS AND FUNCTIONS.
672
11840
THE FORMATS, CONVENTIONS AND ENTRY POINTS ARE ALL
673
11860
DESCRIBED IN THE MATH PACKAGE ITSELF.
674
675
11900
INIT
THE INITIALIZATION ROUTINE
676
11920
INITIALIZATION FIRST LOOKS AT THE SWITCH REGISTER
677
11940
TO SEE WHAT TYPE OF I/O SHOULD BE DONE.
678
11960
ANY NON-STANDARD I/O CAUSES LOCATIONS IN BASIC
679
11980
TO BE CHANGED. THEN THE AMOUNT OF MEMORY,
680
12000
TERMINAL WIDTH, AND WHICH FUNCTIONS TO BE RETAINED
681
12020
ARE ASCERTAINED FROM THE USER, A ZERO IS PUT DOWN
682
12040
AT THE FIRST LOCATION NOT USED BY THE MATH-PACKAGE
683
12060
AND TXTTAB IS SET UP TO POINT AT THE NEXT LOCATION,
684
12080
THIS DETERMINES WHERE PROGRAM STORAGE WILL START. THE
685
12100
HIGHEST MEMORY LOCATION MINUS THE AMOUNT OF DEFAULTED
686
12120
STRING SPACE (50) GIVES THE FIRST LOCATION USED BY THE
687
12140
STACK. SPECIAL CHECKS ARE MADE TO MAKE SURE
688
12160
ALL QUESTIONS IN INIT ARE ANSWERED REASONABLY, SINCE
689
12180
ONCE INIT FINISHES THE LOCATIONS IT USES ARE
690
12200
USED FOR PROGRAM STORAGE. THE LAST THING INIT DOES IS
691
12220
CHANGE LOCATION ZERO TO BE A JUMP TO READY INSTEAD
692
12240
OF INIT. ONCE THIS IS DONE THERE IS NO WAY TO RESTART
693
12260
INIT.
694
695
12300
STORAGE
696
12320
A ZERO.
697
12340
(TXTTAB)
POINTER TO NEXT LINE'S POINTER
698
12360
LINE # OF THIS LINE (2 BYTES)
699
12380
CHARACTERS ON THIS LINE
700
12400
ZERO
701
12420
POINTER AT NEXT LINE'S POINTER
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 2-10
F3
MAC
6-SEP-64 03:11
SOME EXPLANATION
702
12440
(POINTED TO BY THE ABOVE POINTER)
703
12460
REPEATS
704
12480
LAST LINE:
POINTER AT ZERO POINTER
705
12500
LINE # OF THIS LINE
706
12520
CHARACTERS ON THIS LINE
707
12540
ZERO
708
12560
DOUBLE ZERO (POINTED TO BY THE ABOVE POINTER)
709
12580
[VARTAB]
SIMPLE VARIABLES. 6 BYTES PER VALUE.
710
12600
2 BYTES GIVE THE NAME, 4 BYTES THE VALUE
711
12620
... REPEATS
712
12640
(ARYTAB)
ARRAY VARIABLES. 2 BYTES NAME, 2 BYTE
713
12660
LENGTH, VALUE (EXTRA IF MULDIM ON)
714
12680
... REPEATS
715
12700
[STREND]
FREE SPACE
716
12720
... REPEATS
717
12740
MOST RECENT STACK ENTRY
718
12760
REPEATS
719
12780
[STKTOP]
FIRST STACK ENTRY
720
12800
FREE STRING SPACE
721
12820
REPEATS
722
12840
[FRETOP]
STRING SPACE IN USE
723
12860
...
REPEATS
724
12880
(MEMSIZ)
HIGHEST MACHINE LOCATION
725
12900
UNUSED EXCEPT BY THE VAL FUNCTION.
726
12920
HIGH LOCATIONS
727
728
12960
729
12980
PAGE