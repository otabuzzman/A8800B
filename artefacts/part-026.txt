
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 1
F4
MAC
23-AUG-64 06:08
FLOATING POINT MATH PACKAGE IGURATION
76
00100 SUBTTL FLOATING POINT MATH PACKAGE CONFIGURATION
77
00120 TITLE MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
78
79
00160
IFNDEF
LENGTH,<
80
00180
PRINTX 111 MUST HAVE COM 111
81
00200
END>
82
83
00240
RADIX
8
11111 ALERT 1111
84
00260
;THROUGHOUT THE MATHPACKAGE!!
85
86
000000
00300
P==0
87
88
00340
INTERNAL
ZERO,FLOAT,FLOATR,MOVE,FADD,FADDS,FSUB,FMULT,FDIV,FIN,FOUT
89
00360
INTERNAL
PUSHF,ABS,INT,QINT,SGN,SQR,RND,SIN,FCOMP,SIGNC,OVERR
90
00380
INTERNAL
INPRT,LINPRT,MOVFM,MOVMF,MOVFR,MOVRF,MOVRM,NEG,INRART, INXHRT
91
00400
IFN
EXTENC,<
92
00420
INTERNAL
FPWR,EXP,LOG,COS,TAN,ATN,FONE:
93
00440
IFN
MULDIM&<LENGTH-2>,<
94
00460
INTERNAL
DMULT>
95
00480
IFN
STRING,<
96
00500
INTERNAL
SIGNS>
97
00520
IFN
LENGTH-2,<
98
00540
INTERNAL
PADDT,FSUBT,FMULTT,FDIVT>
99
00560
IFE
LENGTH-1,4
100
00580
INTERNAL
FPWRT>
101
00600
IFE
LENGTH-2,<
102
00620
INTERNAL
MOVMF,VMOVFM,FRCINT,PRCSNG,FRCDBL,VNEG,PUFOUT,DCXBRT,IADD
103
00640
INTERNAL
SUB,IMULT,IDIV,ICOMP,INEG,DADD,DSUB,DMULT,DDIV,DCOMP,INTFNC>
104
105
106
00700
EXTERNAL
MINUTK, PLUSTK, DVDERR, ERROV, FCERR, SIGN
107
00720
EXTERNAL
SCODE
108
00740
IFE
LENGTH-2,<
109
00760
EXTERNAL
OFACLO, ARG, ARGLO, VALTYP, TMERR, TEMP2, TEMP3>
110
111
112
00820
COMMENT %
113
00840
EXTERNAL LOCATIONS USED BY THE MATH-PACKAGE
114
00860
;THE FLOATING ACCUMULATOR
115
00880
IFE
LENGTH-2,
116
00900
BLOCK
1
, (TEMPORARY LEAST SIGNIFICANT BYTE]
117
00920
DFACLO: BLOCK 4>
, [FOUR LOWEST ORDERS FOR DOUBLE PRECISION
118
00940
FACLO:
BLOCK
3
, (LOW ORDER OF MANTISSA (LO))
119
00960
, [MIDDLE ORDER OF MANTISSA (MO))
120
00980
, (HIGH ORDER OF MANTISSA (HO))
121
01000
FAC:
BLOCK
2
,
[EXPONENT]
122
01020
, [TEMPORARY COMPLEMENT OF SIGN IN MSB)
123
01040
IFE
LENGTH-2,
124
01060
ARGLO:
BLOCK
7
; [LOCATION OF SECOND ARGUMENT FOR DOUBLE
125
01080
ARG:
BLOCK
1>
; PRECISION]
126
01100
FBUFFR: BLOCK
*013
;BUFFER FOR FOUT
127
01120
IFE
LENGTH-2, "D<30-13>>
128
S
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 1-1
F4
MAC
23-AUG-64 06:08
FLOATING POINT MATH PACKAGE CONFIGURATION
129
130
01180
THE FLOATING POINT FORMAT IS AS FOLLOWS:
131
132
01220
THE SIGN IS THE FIRST BIT OF THE MANTISSA
133
01240
THE MANTISSA IS 24 BITS LONG
134
01260
THE BINARY POINT IS TO THE LEFT OF THE MSB
135
01280
NUMBER = MANTISSA * 2 - EXPONENT
136
01300
THE MANTISSA IS POSITIVE, WITH A ONE ASSUMED TO BE WHERE THE SIGN BIT IS
137
01320
THE SIGN OF THE EXPONENT IS THE FIRST BIT OF THE EXPONENT
138
01340
THE EXPONENT IS STORED IN EXCESS 200 I.E. WITH A BIAS OF 200
139
01360
so, THE EXPONENT IS A SIGNED 8-BIT NUMBER WITH 200 ADDED TO IT
140
01380
AN EXPONENT OF ZERO MEANS THE NUMBER IS ZERO, THE OTHER BYTES ARE IGNORED
141
01400
TO KEEP THE SAME NUMBER IN THE FAC WHILE SHIFTING:
142
01420
TO SHIFT RIGHT, EXP:=EXP+1
143
01440
TO SHIFT LEFT, EXP:=EXP=1
144
145
01480
so, IN MEMORY THE NUMBER LOOKS LIKE THIS:
146
01500
(BITS 17-24 OF THE MANTISSA]
147
01520
(BITS 9-16 OF THE MANTISSA)
148
01540
(THE SIGN IN BIT 7, BITS 2-8 OF THE MANTISSA ARE IN BITS 6-01
149
01560
(THE EXPONENT AS A SIGNED NUMBER + 2001
150
01580
(REMEMBER THAT BIT 1 OF THE MANTISSA IS ALWAYS A ONE)
151
152
01620
ARITHMETIC ROUTINE CALLING CONVENTIONS:
153
154
01660
FOR ONE ARGUMENT FUNCTIONS:
155
01680
THE ARGUMENT IS IN THE FAC, THE RESULT IS LEFT IN THE FAC
156
01700
FOR TWO ARGUMENT OPERATIONS:
157
01720
THE FIRST ARGUMENT IS IN B,C,D,E I.E. THE "REGISTERS"
158
01740
THE SECOND ARGUMENT IS IN THE FAC
159
01760
THE RESULT IS LEFT IN THE FAC
160
161
01800
THE "S" ENTRY POINTS TO THE TWO ARGUMENT OPERATIONS HAVE (HL) POINTING TO
162
01820
THE FIRST ARGUMENT INSTEAD OF THE FIRST ARGUMENT BEING IN THE REGISTERS,
163
01840
MOVRM IS CALLED TO GET THE ARGUMENT IN THE REGISTERS.
164
01860
THE "T" ENTRY POINTS ASSUME THE FIRST ARGUMENT IS ON THE STACK,
165
01880
POPR IS USED TO GET THE ARGUMENT IN THE REGISTERS.
166
01900
NOTE: THE "T" ENTRY POINTS SHOULD ALWAYS BE JUMPED TO AND NEVER CALLED
167
01920
BECAUSE THE RETURN ADDRESS ON THE STACK WILL BE CONFUSED WITH THE NUMBER,
168
169
01960
ON THE STACK, THE TWO LO'S ARE PUSHED ON FIRST AND THEN THE HO AND SIGN,
170
01980
THIS IS DONE so IF A NUMBER IS STORED IN MEMORY, IT CAN BE PUSHED ON THE
171
02000
STACK WITH TWO PUSHM'S. THE LOWER BYTE OF EACH PART IS IN THE LOWER
172
02020
MEMORY ADDRESS so WHEN THE NUMBER IS POPPED INTO THE REGISTERS, THE HIGHER
173
02040
ORDER BYTE WILL BE IN THE HIGHER ORDER REGISTER OF THE REGISTER PAIR, I,E,
174
02060
THE HIGHER ORDER BYTE WILL BE POPPED INTO B, D OR H.
175
02080
%
176
02100
PAGE
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 2
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
177
02120
SUBTTL FLOATING POINT ADDITION AND SUBTRACTION
178
02140
;ENTRY TO FADD WITH POINTER TO ARG IN (HL)
179
000000 001000
000041
02160
FADDH:
LXI
H,FHALF
IENTRY TO ADD 1/2
180
000001 000000
002312
181 000002Â° 000000
000000
182 000003 001000
000315
02180
FADDS:
CALL
MOVRM
;GET ARGUMENT INTO THE REGISTERS
183 000004 000000
001243
184 000005' 000000
000001
185 000006 001000
000303
02200
JMP
FADD
100 THE ADDITION
186
000007 000000
000025'
187
000010 000000
000004
188
189
190
02260
;SUBTRACTION
FAC:=ARG-FAC
191
02280
IFN
EXTENC,
192
000011 001000 000315
02300
FSUBS:
CALL
MOVRM>
;ENTRY IF POINTER TO ARG IS IN (HL)
193
000012' 000000 001243
194
000013 000000 000007
195
02320
IFE
LENGTH-1,<
196
000014 001000 000041
02340
XWD
1000,041>
1"LXI
H" AROUND NEXT 2 BYTES
197
02360
IFN
LENGTH-2,
198 000015 001000 000301
02380
FSUBT:
POPR>
TENTRY IF ARGUMENT IS ON THE STACK
199 000016 001000 000321
200 000017 001000 000315
02400
FSUB:
CALL
NEG
INEGATE SECOND ARGUMENT
201 000020 000000 001175'
202
000021 000000
000012'
203
02420
;FALL INTO FADD
204
205
206
02480
;ADDITION
FAC:=ARG+FAC
207
02500
PALTERS A,B,C,O,E,H,L
208
02520
IFN
LENGTH-2,<
209
000022' 001000
060041
02540
XWD
1000,041
;"LXI H" AROUND NEXT 2 BYTES
210 000023 001000
000301
02560
FADDT:
POPR>
IENTRY IF ARGUMENT IS ON THE STACK
211 000024 001000
000321
212 000025 001000
000170
02580
FADD:
MOV
A,8
CHECK IF FIRST ARGUMENT IS ZERO
213 000026 001000
000267
02600
ORA
A
;GET EXPONENT
214 000027 001000
000310
02620
RZ
;IT IS, RESULT IS NUMBER IN FAC
215 000030 001000
000072
02640
LDA
FAC
IGET EXPONENT
216 000031 000000
000000*
217 000032' 000000
000020
218 000033 001000
000267
02660
ORA
A
ISEE IF THE NUMBER IS ZERO
219
000034 001000
000312
02680
JZ
MOVER
IIT IS, ANSWER IS IN REGISTERS
220
000035 000000
001225'
221
000036 000000
000031
222
223
02720
IWE WANT TO GET THE SMALLER NUMBER IN THE REGISTERS so WE CAN SHIFT IT RIGHT
224
02740
;AND ALIGN THE BINARY POINTS OF THE TWO NUMBERS. THEN WE CAN JUST ADD OR
225
02760
;SUBTRACT THEM (DEPENDING ON THEIR SIGNS) BYTEWISE,
226
000037 001000 000220
02780
SUB
B
;CHECK RELATIVE SIZES
227
000040 001000 000322
02800
JNC
FADD1
IIS FAC SMALLER?
228
000041 000000 000057
229 000042' 000000 000035'
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 2-1
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
230
000043
001000
000057
02820
CMA
EYES, NEGATE SHIFT COUNT
231
000044 001000
000074
02840
INR
A
232 000045 001000 000353
02860
XCHG
;SWITCH FAC AND REGISTERS, SAVE (DE)
233 000046 001000 000315
02880
CALL
PUSHF
;PUT FAC ON STACK
234 000047 000000
001205
235 000050 000000
000041
236 000051 001000
000353
02900
XCHG
;GET (DE) BACK WHERE IT BELONGS
237 000052 001000
000315
02920
CALL
MOVER
;PUT REGISTERS IN THE FAC
238 000053 000000
001225'
239 000054 000000
000047
240 000055' 001000
000301
02940
POPR
;GET THE OLD FAC IN THE REGISTERS
241 000056 001000 000321
242
000057
02960
FADD1:
243
02980
IFN
LENGTH,
244 000057 001000
000376
03000
CPI
31
IARE WE WITHIN 24 BITS?
245 000060 000000
000031
246 000061 001000
000320
03020
RNC>
INO, ALL DONE
247 000062' 001000
000365
03040
PUSH
PSW
SAVE SHIFT COUNT
248 000063 001000
000315
03060
CALL
UNPACK
UNPACK THE NUMBERS
249 000064 000000
001272'
250 000065 000000
000053
251
000066 001000
080147
03080
MOV
H,A
;SAVE SUBTRACTION FLAG
252 000067 001000
000361
03100
POP
PSW
;GET SHIFT COUNT BACK
253
000070 001000
000315
03120
CALL
SHIFTR
;SHIFT REGISTERS RIGHT THE RIGHT AMOUNT
254
000071 000000
000334
255
000072 000000
000064
256
257
03160
;IF THE NUMBERS HAVE THE SAME SIGN, THEN WE ADD THEM, IF THE SIGNS ARE
258
03180
;DIFFERENT, THEN WE HAVE TO SUBTRACT THEM. WE HAVE TO DO THIS BECAUSE THE
259
03200
IMANTISSAS ARE POSITIVE. JUDGING BY THE EXPONENTS, THE LARGER NUMBER IS IN
260
03220
,THE FAC, SD IF WE SUBTRACT, THE SIGN OF THE RESULT SHOULD BE THE SIGN OF THE
261
03240
;FAC: HOWEVER, IF THE EXPONENTS ARE THE SAME, THE NUMBER IN THE REGISTERS
262
03260
;COULD BE BIGGER, so AFTER WE SUBTRACT THEM, WE HAVE TO CHECK IF THE RESULT
263
03280
IWAS NEGATIVE, IF IT WAS, WE NEGATE THE NUMBER IN THE REGISTERS AND
264
03300
;COMPLEMENT THE SIGN OF THE FAC. (HERE THE FAC IS UNPACKED)
265
03320
;IF WE HAVE TO ADD THE NUMBERS, THE SIGN OF THE RESULT IS THE SIGN OF THE
266
03340
FFAC. so, IN EITHER CASE, WHEN WE ARE ALL DONE, THE SIGN OF THE RESULT
267
03360
SWILL BE THE SIGN OF THE FAC,
268
000073 001000
000264
03380
ORA
H
;GET SUBTRACTION FLAG
269 000074 001000 000041
03400
LXI
H, ,FACLO
ISET POINTER TO LO'S
270 000075 000000
000006*
271
000076 000000
000071
272 0000779 001000
000362
03420
JP
FADD3
;SUBTRACT IF THE SIGNS WERE DIFFERENT
273 000100 000000
000125
274 000101 000000
000075'
275 000102' 001000
000315
03440
CALL
FADDA
;ADD THE NUMBERS
276 000103 000000
000274
277 000104 000000
000100
278 000105' 001000 060322
03460
JNC
ROUND
;ROUND RESULT IF THERE WAS NO OVERFLOW
279 000106' 000000 000233
280
000107
000000
000103
281
03480
,THE MOST IT CAN OVERFLOW IS ONE BIT
282 000110* 001000 000643
03500
INX
H
;THERE WAS OVERFLOW
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 2-2
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
283 000111 001000 000064
03520
INR
M
;INCREMENT EXPONENT
284
000112' 001000 000312
03540
JZ
OVERR
;CHECK FOR OVERFLOW
285
000113 000000 000267
286
000114 000000 000106
287
03560
IFE
LENGTH,<
288
03580
CALL
SHFTRO>
;SHIFT RESULT RIGHT ONE, SHIFT CARRY IN
289
03600
IFN
LENGTH,<
290
000115' 001000
000056
03620
MVI
6,1
1SHIFT RESULT RIGHT ONE, SHIFT CARRY IN
291
000116 000000
000001
292
000117Â° 001000
000315
03640
CALL
SHRADD>
293
000120 000000
000362'
294
000121 000000
000113
295 000122' 001000
000303
03660
JMP
ROUND
,ROUND RESULT AND WE ARE DONE
296
000123 000000
000233'
297
000124' 000000
000120
298
03680
THERE TO SUBTRACT C,O,E,B FROM (((HL)+0,1,2),6
299
000125' 001000
000257
03700
FAD03:
XRA
A
;SUBTRACT NUMBERS, NEGATE UNDERFLOW BYTE
300
000126 001000
000220
03720
SUB
8
301
000127 001000
000107
03740
MOV
B,A
;SAVE IT
302
000130 001000
000176
03760
MOV
A,M
;SUBTRACT LOW ORDERS
303
000131 001000
000233
03780
SBB
E
304
000132' 001000
000137
03800
MOV
E,A
305
000133' 001000
000043
03820
INX
H
JUPDATE POINTER TO NEXT BYTE
306
000134 001000
000176
03840
MOV
A,M
;SUBTRACT MIDDLE ORDERS
307
000135 001000
000232
03860
SBB
D
308
000136 001000
000127
03880
MOV
D,A
309
000137 001000
000043
03900
INX
H
JUPDATE POINTER TO HIGH ORDERS
310
000140 001000
000176
03920
MOV
A,M
;SUBTRACT HIGH ORDERS
311
000141 001000
000231
03940
SBB
C
312
000142' 001000
000117
03960
MOV
C,
313
03980
;BECAUSE WE WANT A POSITIVE MANTISSA, CHECK IF WE HAVE TO NEGATE THE
314
04000
, NUMBER
315
000143 001000 000334
04020
FADFLT: CC
NEGR
;ENTRY FROM FLOATR, INT: NEGATE NUMBER IF IT
316
000144 000000 000310
317
000145 000000 000123'
318
04040
; WAS NEGATIVE, FALL INTO NORMALIZE
319
320
321
04100
;NORMALIZE C,D,E,B
322
04120
BALTERS A,B,C,D,E,M,L
323
04140
THERE WE SHIFT THE MANTISSA LEFT UNTIL THE MSB IS A ONE.
324
04160
1 EXCEPT IN 4K, THE IDEA IS TO SHIFT LEFT BY 8 AS MANY TIMES AS
325
04180
;POSSIBLE.
326 000146
04200
NORMAL:
327
04220
IFE
LENGTH,<
328
04240
MVI
H,0
;CLEAR SHIFT COUNT
329
04260
MOV
A,C
;IS THE NUMBER NORMALIZED?
330
04280
ORA
A
331
04300
JM
ROUND
IYES, WE ARE DONE
332
04320
NORM2:
CPI
340
;IS THE RESULT ZERO?
333
04340
JZ
ZERO
EYES, ZERO THE FAC
334
04360
OCR
H
INO, DECREMENT SHIFT COUNT
335
04380
MOV
A,
;SHIFT THE LO LEFT
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 2-3
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
336
04400
ADD
A
;SHIFT IN A ZERO
337
04420
MOV
B,
338
04440
CALL
SHFTLO
;SHIFT THE REST OF THE NUMBER LEFT ONE
339
04460
MOV
A,H
;GET THE SHIFT COUNT
340
04480
JP
NORM2>
;CONTINUE IF NUMBER IS NOT NORMALIZED
341
04500
IFN
LENGTH,
342
000146 001000
000150
04520
MOV
L,B
;PUT LOWEST 2 BYTES IN (HL)
343 000147 001000
000143
04540
MOV
H,E
344 000150 001000
000257
04560
XRA
A
IZERO SHIFT COUNT
345 000151 001000
000107
04580
NORM1:
MOV
B,A
;SAVE SHIFT COUNT
346 000152 001000
000171
04600
MOV
A,C
100 WE HAVE 1 BYTE OF ZEROS
347 000153' 001000
000267
04620
ORA
A
348 000154 001000
000302
04640
JNZ
NORM3
INO, SHIFT ONE PLACE AT A TIME
349
000155' 000000
000210
350 000156' 000000
000144
351
04660
;THIS LOOP SPEEDS THINGS UP BY SHIFTING 8 PLACES AT ONE TIME
352
000157 001000
000112
04680
MOV
C,D
EYES, SHIFT OVER 1 BYTE
353 000160 001000
060124
04700
MOV
D,H
354 000161 001000
000145
04720
MOV
H,L
355 000162' 001000
000157
04740
MOV
L,A
;SHIFT IN 8 ZEROS FOR THE LOW ORDER
356 000163Â° 001000
000170
04760
MOV
A,B
RUPDATE SHIFT COUNT
357 000164 001000
000326
04780
SUI
10
358 000165 000000
000010
359 000166 001000
000376
04800
CPI
340
;DID WE SHIFT IN 4 BYTES OF ZEROS?
360 000167 000000
000340
361 000170 001000
000302
04820
JNZ
NORM1
INO, TRY TO SHIFT OVER 8 MORE
362
000171
000000
000151
363
000172' 000000
000155'
364
04840
IYES, NUMBER WAS ZERO. FALL INTO ZERO
365
366
367
04900
IZERO FAC
368
04920
;ALTERS A ONLY
369
04940
EXITS WITH A=0
370
04960
;BY OUR FLOATING POINT FORMAT, THE NUMBER IS ZERO IF THE EXPONENT IS
371
04980
, ZERO
372
000175 001000 000257
05000
ZERO:
XRA
A
IZERO A
373 000174 001000 000062
05020
ZEROO:
STA
FAC
IZERO THE FAC'S EXPONENT, ENTRY IF A=0
374 000175 000000 000031*
375 000176 000000 000171
376 000177 001000 000311
05040
RET
FALL DONE
377
378
379 000200 001000 000005
05100
NORM2:
OCR
B
;DECREMENT SHIFT COUNT
380 000201' 001000 000051
05120
DAD
H
;ROTATE (HL) LEFT ONE, SHIFT IN A ZERO
381 000202' 001000 000172
05140
MOV
A,D
;ROTATE NEXT HIGHER ORDER LEFT ONE
382 000203 001000
000027
05160
RAL
383 000204 801000
000127
05180
MOV
D,A
384 000205 001000
000171
05200
MOV
A,C
;ROTATE HIGH ORDER LEFT ONE
385 000206 001000
000217
05220
ADC
A
;SET CONDITION CODES
386 000207 001000 000117
05240
MOV
C,A
387 000210 001000 000362
05260
NORM3:
JP
NORM2
WE HAVE MORE NORMALIZATION TO DO
388 000211 000000 000200
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 2-4
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
389 000212' 000000 000175'
390 000213 001000 000170
05280
MOV
A,B
FALL NORMALIZED, GET SHIFT COUNT
391 000214 001000 000134
05300
MOV
E,H
;PUT LO'S BACK IN E,B
392 000215' 001000
000105
05320
MOV
B,L
393 000216 001000
000267
05340
ORA
A
;CHECK IF WE DID NO SHIFTING
394
000217 001000
000312
05360
JZ
ROUND>
395 000220 000000
000233'
396 000221 000000
000211
397 000222' 001000
000041
05380
LXI
H,FAC
BLOOK AT FAC'S EXPONENT
398 000223 000000
000175*
399 000224 000000
000220*
400 000225' 001000
000206
05400
ADD
M
;UPDATE EXPONENT
401
000226 001000
000167
05420
MOV
M,A
402 000227 001000
000322
05440
JNC
ZERO
CHECK FOR UNDERFLOW
403 000230 000000
000173
404 000231 000000 000223
405
000232' 001000 000310
05460
RZ
;NUMBER IS ZERO, ALL DONE
406
05480
IFALL INTO ROUND AND WE ARE DONE
407
408
409
05540
,ROUND RESULT IN C,O,E,B AND PUT NUMBER IN THE FAC
410
05560
BALTERS B,C,D,E,H,L
411
05580
I WE ROUND C,O,E UP OR DOWN DEPENDING UPON THE MSB OF B
412 000233 001000 000170
05600
ROUND:
MOV
A,B
ISEE IF WE SHOULD ROUND UP
413
000234* 001000
000041
05620
ROUNDB: LXI
H,FAC
,ENTRY FROM FDIV, GET POINTER TO EXPONENT
414
000235 000000
000223*
415 000236 000000
000236
416 000237 001000
000267
05640
ORA
A
417 000240 001000
000374
05660
CM
ROUNDA
100 IT IF NECESSARY
418 000241 000000
000255'
419 000242' 000000
000235'
420 000243 001000
000106
05680
MOV
B,M
PUT EXPONENT IN B
421
05700
THERE WE PACK THE HO AND SIGN
422 000244 001000
000043
05720
INX
H
;POINT TO SIGN
423 000245' 001000
000176
05740
MOV
A,M
;GET SIGN
424 000246 001000
000346
05760
ANI
200
1GET RID OF UNWANTED BITS
425 000247 000000
000200
426 000250 001000
000251
05780
XRA
C
;PACK SIGN AND HO
427 000251 001000
000117
05800
MOV
C,A
;SAVE IT IN C
428
000252' 001000
000303
05820
JMP
MOVER
ISAVE NUMBER IN FAC
429 000253 000000 001225'
430
000254
000000
000241
431
432
433
05880
IFE
LENGTH, <
434
05900
;SHIFT C,D,E LEFT ONE
435
05920
,THIS IS USED BY NORMAL, FDIV
436
05940
PALTERS A,C,D,E
437
05960
SHFTLO: MOV
A,E
;GET THE LO
438
05980
RAL
;SHIFT IT
439
06000
MOV
E,A
;SAVE IT
440
06020
MOV
A,O
;SHIFT THE NEXT HIGHER ORDER
441
06040
RAL
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 2-5
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
442
06060
MOV
D,A
443
06080
MOV
A,C
;SHIFT THE HIGHEST ORDER
444
06100
ADC
A
;ROTATE A LEFT AND SET CONDITION CODES
445
06120
MOV
C,A
446
06140
RET>
FALL DONE
447
448
449
06200
;SUBROUTNE FOR ROUND:
ADD ONE TO C,D,E
450
000255 001000
000034
06220
ROUNDA: INR
E
1ADD ONE TO THE LOW ORDER, ENTRY FROM QINT
451 000256 001000 000300
06240
RNZ
;ALL DONE IF IT IS NOT ZERO
452 000257 001000
000024
06260
INR
D
PADD ONE TO NEXT HIGHER ORDER
453 000260 001000
000300
06280
RNZ
FALL DONE IF NO OVERFLOW
454 000261 001000
000014
06300
INR
C
1ADD ONE TO THE HIGHEST ORDER
455 000262' 001000
060300
06320
RNZ
IRETURN IF NO OVEFLOW
456 000263 001000
000016
06340
MVI
C,200
,THE NUMBER OVERFLOWED, SET NEW HIGH ORDER
457 000264 000000
000200
458 000265 001000 000064
06360
INR
M
JUPDATE EXPONENT
459
000266 001000
000300
06380
RNZ
RETURN IF IT DID NOT OVERFLOW
460
06400
IIT DID, FALL INTO OVERR
461
462
06440
;OVERFLOW ERROR
463
000267 001000 000036
06460
OVERR:
MVI
E,ERROV
1SET OVERFLOW ERROR CODE
464 000270* 000000 000000*
465 000271 001000 000303
06480
JMP
ERROR
IGO TO IT!!
466 000272' 000000 000000*
467
000273 000000 000253'
468
469
470
06540
;ADD (HL)+2,1,0 TO C,D,E
471
06560
;THIS CODE IS USED BY FADD, FOUT
472
000274
001000
000176
06580
FADDA:
MOV
A,M
;GET LOWEST ORDER
473
000275' 001000
000203
06600
ADD
E
IADD IN OTHER LOWEST ORDER
474 000276 001000
000137
06620
MOV
E,A
;SAVE IT
475 000277 001000
000043
06640
INX
H
;UPDATE POINTER TO NEXT BYTE
476 000300 001000
000176
06660
MOV
A,M
PADD MIDDLE ORDERS
477 000301 001000
000212
06680
ADC
D
478 000302 001000
000127
06700
MOV
D,A
479 000303 001000
000043
06720
INX
H
JUPDATE POINTER TO HIGH ORDER
480 000304 001000
000176
06740
MOV
A,M
;ADD HIGH ORDERS
481 000305* 001000 000211
06760
ADC
C
482
000306
001000
000117
06780
MOV
C,A
483 000307 001000 000311
06800
RET
FALL DONE
484
485
486
06860
;NEGATE NUMBER IN C,D,E,B
487
06880
;THIS CODE IS USED BY FADD, QINT
488
06900
;ALTERS A,B,C,D,E,L
489
000310 001000
000041
06920
NEGR:
LXI
H,FAC+1
INEGATE FAC
490
000311 000000
000001*
491 000312' 000000 000272'
492 000313 001000 000176
06940
MOV
A,M
;GET SIGN
493 000314 001000 000057
06960
CMA
COMPLEMENT IT
494 000315 001000 060167
06980
MOV
M,A
;SAVE IT AGAIN