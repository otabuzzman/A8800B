
BASIC MCS 8080 GATES/ALLEN/DAVIDUFF
MACRO 7(113) 03:12 10-SEP-75 PAGE 21-16
F3
MAC
6-SEP-64 03:11
FORMULA EVALUATION CODE
5318
11720
INUMERIC CASE
5319
11740
LXI
H,DOCMP
;COME BACK TO COMPARE
5320
11760
PUSH
H
5321
11780
JZ
FCOMP
100 NUMERIC COMPARE
5322
11800
XRA
A
ISET VALUE TYPE AS NUMERIC
5323
11820
STA
VALTYP>>>
5324
11840
IFN
STRING,
5325
11860
5326
11880
THE FOLLOWING ROUTINE COMPARES TWO STRINGS
5327
11900
ONE WITH DESC IN (0,E) OTHER WITH DESC, IN (FACLO, FACLO+1)
5328
11920
A=0 IF STRINGS EQUAL
5329
11940
A=377 IF B,C,O,E POINTER FACLO
5330
11960
;
A=1 IF B,C,D,E .LT. FACLO
5331
11980
;
5332
12000
IFN
LENGTH-2,
5333
12020
STRCMP: PUSH
D
1SAVE DESC, POINTER TO FIRST STR.
5334
12040
CALL
FREFAC
;FREE THE FACLO STR
5335
12060
POP
D
IRESTORE 1ST DESC. POINTER
5336
12080
PUSHM
;SAVE LENGTH
5337
12100
PUSHM
1SAVE POINTER
5338
12120
CALL
FRETMP
;FREES IST DESC. POINTER
5339
12140
CALL
MOVRM
;(B,C) POINT AT FIRST CHAR
5340
12160
FEE HAS THE LENGTH
5341
12180
POP
H
;GET 2ND CHARACTER POINTER IN H
5342
12200
XTHL
,GET 2ND CHARACTER COUNTER IN L
5343
12220
MOV
D,L>
;SAVE IN D
5344
12240
IFE
LENGTH-2,<
5345 006320 001000 000315
12260
STRCMP: CALL
FRESTR
I FREE UP THE FAC STRING, AND GET THE
5346
006321' 000000
010431
5347
006322'
000000
006310
5348
12280
JPOINTER TO THE FAC DESCRIPTOR IN [H,L]
5349
006323 001000
000176
12300
MOV
A,M
;SAVE THE LENGTH OF THE FAC STRING IN [A]
5350
006324 001000
000043
12320
INX
H
5351
006325'
001000
000116
12340
MOV
C,M
;SAVE THE POINTER AT THE FAC STRING
5352
12342
IDATA IN [8,C]
5353
006326 001000
000043
12360
INX
H
5354
006327 001000
000106
12380
MOV
B,M
5355
006330 001000
000321
12400
POP
D
;GET THE STACK STRING POINTER
5356
006331' 001000
000305
12420
PUSH
B
ISAVE THE POINTER AT THE FAC STRING DATA
5357
006332' 001000
000365
12440
PUSH
PSW
;SAVE THE FAC STRING LENGTH
5358
006333' 001000
000315
12460
CALL
FRETMP
1FREE UP THE STACK STRING AND RETURN
5359
006334
000000
010440
5360
006335 000000
006321
5361
12480
;THE POINTER TO THE STACK STRING DESCRIPTOR
5362
12500
JIN (H,L)
5363
006336 001000
000321
12520
POP
D
, (D) =LENGTH OF FAC STRING
5364
006337' 001000
000136
12540
MOV
E,M
, #LENGTH OF STACK STRING
5365 006340 001000
000043
12560
INX
H
5366 006341 001000
000116
12580
MOV
C,M
, 8,C1 #POINTER AT STACK STRING
5367
006342 001000
000043
12600
INX
H
5368
006343 001000
000106
12620
MOV
B,M>
5369
006344 001000
000341
12640
POP
H
IGET BACK 2ND CHARACTER POINTER
5370
006345'
001000
000173
12660
CSLOOP: MOV
A,E
:BOTH STRINGS ENDED
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 7(113) 03:12 10-SEP-75 PAGE 21-17
F3
MAC
6-SEP-64 03:11
FORMULA EVALUATION CODE
5371
006346
001000
000262
12680
ORA
D
ITEST BY OR'ING THE LENGTHS TOGETHER
5372
006347
001000
000310
12700
RZ
IIF so, RETURN WITH A ZERO
5373
006350
001000
060172
12720
MOV
A,
D
;GET FACLO STRING LENGTH
5374 006351 001000 000267
12740
ORA
A
IF IT ENDED, OTHER MUST NOT HAVE
5375 006352' 001000
000057
12760
CMA
;MAKE -1
5376 006353 001000
000310
12780
RZ
ITEST
5377 006354 001000
000257
12800
XRA
A
MUST NOT HAVE BEEN ZERO, TEST CASE
5378 006355' 001000
000273
12820
CMP
E
10F 8,C,O,E STRING HAVING ENDED FIRST
5379 006356 001000
000074
12840
INR
A
RETURN WITH A=1
5380
006357 001000
000320
12860
RNC
STEST THE CONDITION
5381
12880
;HERE WHEN NEITHER STRING ENDED
5382
006360 001000
000025
12900
DCR
D
;DECREMENT BOTH CHARACTER COUNTS
5383 006361 001000
000035
12920
DCR
E
5384
006362' 001000
000012
12940
LOAX
8
IGET CHARACTER FROM B,C,D,E STRING
5385 006363 001000
000276
12960
CMP
M
;COMPARE WITH FACLO STRING
5386 006364 001000
000043
12980
INX
H
;BUMP POINTERS (INX DOESNT CLOBBER CC'S)
5387
006365 001000
000003
13000
INX
8
5388 006366 001000
000312
13020
JZ
CSLOOP
IIF BOTH THE SAME, MUST BE MORE TO STRINGS
5389
006367 000000
006345
5390 006370° 000000
006334
5391
006371 001000
000077
13040
CMC
;HERE WHEN STRINGS DIFFER
5392 006372' 001000
000303
13060
JMP
SIGNS>
;SET (A) ACCORDING TO CARRY
5393
006373 000000
000000*
5394
006374
000000
006367
5395
13080
IFN
LENGTH,
<
5396
006375 001000
000074
13100
DOCMP:
INR
A
;SETUP BITS
5397 006376 001000
000217
13120
ADC
A
14=LESS 2=EQUAL 1 GREATER
5398 006377° 001000
000301
13140
POP
B
,WHAT DID HE WANT?
5399 006400 001000
000240
13160
ANA
B
BANY BITS MATCH?
5400 006401 001000
000306
13180
ADI
255
;MAP 0 TO 0
5401 006402 000000
000377
5402 006403 001000
000237
13200
S88
A
AND ALL OTHERS TO 377
5403
13220
IFE
LENGTH-2,
5404
006404 001000
000315
13240
CALL
CONIA##
;CONVERT [A] TO AN INTEGER SIGNED
5405 006405 000000
000000*
5406 006406 000000
006373
5407 006407' 001000 000303
13260
JMP
RETAOP>
RETURN FROM OPERATOR APPLICATION
5408
006410
000000
005354
5409
006411
000000
006405
5410
13280
IFN
LENGTH-2,
5411
13300
JMP
FLOAT
IMAKE FAC= SIGNED
5412
13320
COULD FALL INTO FLOAT BUT MESSY [SAVES
5413
13340
;TWO BYTES)
5414
13360
5415
13380
NOTER:
MVI
0,90
""NOT" HAS PRECEDENCE 90
5416
13400
CALL
LPOPER
;GO PERFORM
5417
13420
IFN
STRING,
<CALL
CHKNUM>
;MAKE SURE ITS INT
5418
13440
CALL
DEINT
;GET VALUE IN (D,E)
5419
13460
MOV
A,E
5420
13480
CMA
;COMPLEMENT
5421
13500
MOV
C,A
(c) LOW ORDER OF ANSWER
5422
13520
MOV
A,D
5423
13540
CMA
;COMPLEMENT HIGH ORDER 100
BASIC MCS 8086
GATES/ALLEN/DAVIDOFF
MACRO 47 (113) 03:12 10-SEP-75 PAGE 21-18
F3
MAC
6-SEP-64 03:11
FORMULA EVALUATION CODE
5424
13560
CALL
GIVACA
;FLOAT (A,C AS RESULT
5425
13580
POP
8
STAKE RETURN ADDRESS OF FRMEVL
5426
13600
JMP
RETAOP>>
10FF AND RETURN TO THE RIGHT
5427
13620
;PLACE SO THE TEXT POINTER
5428
13640
:WILL GET SET UP TO WHAT IT WAS
5429
13660
;WHEN LPOPER RETURNED.
5430
13680
IFE
LENGTH-2,<
5431
006412
001000
000026
13700
NOTER:
MVI
0,90
""NOT" HAS PRECEDENCE 90, so
5432 006413 000000
000132
5433
006414
001000
000315
13720
CALL
LPOPER
;FORMULA EVALUATION IS ENTERED WITH A DUMMY
5434
006415'
000000
005341
5435
006416 000000
006410
5436
13730
SENTRY OF 90 ON THE STACK
5437
006417 001000
000315
13740
CALL
FROINT
;COERCE THE ARGUMENT TO INTEGER
5438 006420 000000
005573*
5439 006421 000000
006415'
5440
006422' 001000
000175
13760
MOV
A,L
;COMPLEMENT CH,L
5441
006423 001000
000057
13780
CMA
5442
006424 001000
000157
13800
MOV
L.A
5443 006425 001000
000174
13820
MOV
A,H
5444 006426 001000
000057
13840
CMA
5445 006427' 001000
000147
13860
MOV
H,A
5446
006430 001000
000042
13880
SHLD
FACLO
JUPDATE THE FAC
5447
006431 000000
001637
5448
006432 000000
006420
5449
006433 001000
000301
13900
POP
8
1FRMEVL, AFTER SEEING THE PRECEDENCE
5450
13910
10F 90 THINKS IT IS APPLYING AN OPERATOR
5451
13915
ISO IT HAS THE TEXT POINTER IN TEMP2 so
5452
5453
006434 001000 000303
13920
JMP
RETAOP
RETURN TO REFETCH IT
5454
006435' 000000 005354
5455
006436
000000
006431
5456
14042
5457
14044
DANDOR APPLIES THE "AND" AND "OR" OPERATORS
5458
14046
AND SHOULD BE USED TO IMPLEMENT ALL LOGICAL OPERATORS.
5459
14048
WHENEVER AN OPERATOR IS APPLIED, ITS PRECEDENCE IS IN [B1,
5460
14050
,
THIS FACT IS USED TO DISTINGUISH BETWEEN "AND" AND "OR".
5461
14052
,
THE RIGHT HAND ARGUMENT IS COERCED TO INTEGER, JUST AS
5462
14054
;
THE LEFT HAND ONE WAS WHEN IT WAS PUSHED ON THE STACK.
5463
14056
;
5464
006437 001000
000305
14060
DANDOR: PUSH
B
ISAVE THE PRECEDENCE "OR"=70
5465
006440 001000
000315
14080
CALL
FRCINT
;COERCE RIGHT HAND ARGUMENT TO INTEGER
5466
006441 000000
006420*
5467
606442 000000
006435'
5468
006443 001000
000361
14100
POP
PSW
;GET BACK THE PRECEDENCE TO DISTINGUISH
5469
14120
""AND" AND "OR"
5470 006444 001000
000321
14140
POP
D
;POP OFF THE LEFT HAND ARGUMENT
5471 006445 001000
000376
14160
CPI
70
;SET ZERO FOR "OR"
5472 006446 000000
000106
5473 006447 001000
000173
14180
MOV
A,E
;SETUP LOW IN [A]
5474
006450 001000
000312
14200
JZ
ORFIN
100 "OR" IF PRECEDENCE WAS 70
5475
006451 000000
006463
5476
006452 000000
006441
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47 (113) 03:12 10-SEP-75 PAGE 21-19
F3
MAC
6-SEP-64 03:11
FORMULA EVALUATION CODE
5477 006453' 001000 000245
14220
ANA
5478 006454 001000
000157
14240
MOV
L.A
5479 006455 001000
000174
14260
MOV
A,H
5480 006456 001000
000242
14280
ANA
D
5481 006457 001000
000147
14300
MOV
H,A
5482 006460 001000
000303
14320
JMP
MAKINT
RETURN THE INTEGER [H,L]
5483
006461 000000
000006*
5484
006462' 000000
006451
5485
14322
, AS THE "AND"ED RESULT
5486 006463 001000
000265
14324
ORFIN:
ORA
5487 006464 001000
060157
14326
MOV
L.A
5488 006465 001000
000174
14328
MOV
A,H
5489
006466 001000
000262
14330
ORA
D
5490
006467 001000
000147
14332
MOV
H,A
5491
006470 001000
000303
14334
JMP
MAKINT>
RETURN THE INTEGER [H,LI
5492
006471 000000
006461*
5493
006472 000000
006461
5494
14336
: AS THE "OR"ED RESULT
5495
14340
PAGE
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 22
F3
MAC
6-SEP-64 03:11
DIMENSION & VARIABLE SEARCHING
5496
14360 SUBTTL DIMENSION & VARIABLE SEARCHING
5497
006473 001000
000053
14380
DIMCON: DCX
H
;SEE IF COMMA ENDED THIS VARIABLE
5498
006474 001080
000327
14400
CHRGET
5499 006475' 001000 000310
14420
RZ
;IF TERMINATOR, GOOD BYE
5500
006476 001000 000317
14440
SYNCHK 44
;MUST BE COMMA
5501
006477° 000000 000054
5502
14442
5503
14444
THE "DIM" CODE SETS DIMFLG AND THEN FALLS INTO THE VARIABLE
5504
14446
SEARCH ROUTINE. THE VARIABLE SEARCH ROUTINE LOOKS AT
5505
14448
DIMFLG AT THREE DIFFERENT POINTS:
5506
14450
5507
14452
1) IF AN ENTRY IS FOUND, DIMFLG BEING ON INDICATES
5508
14454
A "DOUBLY DIMENSIONED" VARIABLE
5509
14456
2) WHEN A NEW ENTRY IS BEING BUILT DIMFLG'S BEING ON
5510
14458
INDICATES THE INDICES SHOULD BE USED FOR
5511
14460
THE SIZE OF EACH INDICE. OTHERWISE THE DEFAULT
5512
14462
OF TEN IS USED.
5513
14464
3) WHEN THE BUILD ENTRY CODE FINISHES, ONLY IF DIMFLG IS
5514
14466
OFF WILL INDEXING BE DONE
5515
14468
5516 006500 001000 000001
14478
DIM:
LXI
B,DIMCON
PLACE TO COME BACK TO
5517 006501 000000 006473
5518 006502' 000000 006471
5519
006503 001000 000305
14480
PUSH
B
5520
006504 001000 000366
14500
XWD
01000, 0366
; "ORI" NON ZERO THING
5521
14520
-
5522
14540
ROUTINE TO READ THE VARIABLE NAME AT THE CURRENT TEXT POSITION
5523
14560
AND PUT A POINTER TO ITS VALUE IN (D,E). (H,L) IS UPDATED
5524
14580
TO POINT TO THE CHARACTER AFTER THE VARIABLE NAME.
.
5525
14600
VALTYP IS SETUP. NOTE THAT EVALUATING SUBSCRIPTS IN
5526
14620
, VARIABLE NAME CAN CAUSE RECURSIVE CALLS TO PIRGET SO AT
5527
14640
; THAT POINT ALL VALUES MUST BE STORED ON THE STACK.
5528
14660
,
5529
006505 001000
000257
14680
PIRGET: XRA
A
;MAKE [A]
5530
006506 001000
000062
14700
STA
DIMFLG
IFLAG IT AS SUCH
5531
006507 000000
001542
5532 006510* 000000
006501
5533 006511 001000
000106
14720
MOV
B,M
;GET FIRST CHARACTER IN [B]
5534 006512' 001000
000315
14740
PTRGT2: CALL
ISLET
;CHECK FOR LETTER
5535 006513 000000
003612
5536 006514 000000
006507
5537 006515* 001000
000332
14760
JC
SNERR
MUST HAVE A LETTER
5538 006516 000000
002672
5539 006517 000000
006513
5540
006520 001000
000257
14780
XRA
5541
006521 001000 000117
14800
MOV
C,A
ASSUME NO SECOND CHARACTER
5542
14820
IFN
LENGTH-2,<
5543
14840
IFN
STRING,<
5544
14860
STA
VALTYP>>
IDEFAULT IS ZERO (NUMERIC)
5545
006522' 001000 000327
14880
CHRGET
;GET THE FOLLOWING CHARACTER
5546
14900
IFE
LENGTH,
5547
14920
JNC
NOSEC>
ONLY NUMBERS ALLOWED
5548
14940
IFN
LENGTH,
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47 (113) 03:12 10-SEP-75 PAGE 22-1
F3
MAC
6-SEP-64 03:11
DIMENSION & VARIABLE SEARCHING
5549 006523 001000 000332
14960
JC
ISSEC
;CARRY SET BY CHRGET IF CHARACTER IS
5550 006524* 000000 006534*
5551 006525 000000 006516
5552
14980
;NUMERIC
5553 006526 001000
000315
15000
CALL
ISLET
;SET CARRY IF NOT ALPHABETIC
5554 006527 000000
003612'
5555 006530 000000
006524*
5556 006531 001000
000332
15020
JC
NOSEC>
FALLOW ALPHABETICS
5557 006532' 000000
006547
5558 006533* 000000
006527
5559 006534 001000
000117
15040
ISSEC: MOV
C,A
IIT IS A NUMBER--SAVE IN C
5560 006535 001000
000327
15060
EATEM: CHRGET
BLOOK AT NEXT CHARACTER
5561
15080
IFN LENGTH,
5562 006536 001000
000332
15100
JC
EATEM
;SKIP NUMERICS
5563 006537 000000
006535'
5564 006540° 000000
006532
5565 006541 001000
000315
15120
CALL
ISLET
5566 006542 000000
003612
5567 006543 000000
006537
5568 006544 001000
000322
15140
JNC
EATEM>
ISKIP ALPHABETICS
5569 006545 000000
006535
5570 006546 000000
006542'
5571 006547
15160
NOSEC:
5572
15180
IFE
LENGTH-2,5
5573 006547 001000
000021
15200
LXI
HAVTYP
1SAVE JUMPS BY USING RETURN ADDRESS
5574 006550 000000
006574
5575 006551 000000
006545
5576 006552 001000
000325
15220
PUSH
D
5577 006553 001000
000026
15240
MVI
0,8
ASSUME ITS DOUBLE PRECISION
5578 006554 000000
000010
5579 006555' 001000
000376
15260
CPI
"#"
;CHECK THE CHARACTER
5580 006556 000000
000043
5581 006557 001000
000310
15280
RZ
;WHEN WE MATCH, SETUP VALTYP
5582 006560° 001000
000026
15300
MVI
0,2
;CHECK FOR INTEGER
5583 006561 000000
060002
5584 006562' 001000
000376
15320
CPI
"X"
5585 006563 000000
000045
5586 006564 001000
000310
15340
RZ
5587 006565 001000
000024
15360
INR
D
;CHECK FOR STRING
5588 006566* 001000
000376
15380
CPI
"S"
5589 006567 000000
000644
5590 006570 001000
000310
15400
RZ
5591 006571 001000
000024
15420
INR
D
1SINGLE PRECISION IS THE DEFAULT
5592 006572' 001000
000053
15440
DCX
H
INO MARKING CHARACTER
5593 006573 001000
000311
15460
RET
;GET RID OF RETURN ADDRESS
5594 006574 001000
000172
15480
HAVTYP: MOV
A,D
ISETUP VALTYP
5595 006575 001000
000062
15500
STA
VALTYP
5596 006576 000000
001543
5597 006577 000000 006550*
5598 006600 001000 000327
15520
CHRGET
READ PAST TYPE MARKER
5599
15540
IFN
LENGTH-2,
5600
15560
IFN
STRING,
5601
15580
SUI
"s"
IIS IT A STRING?
BASIC MCS 8080 GATES/ALLEN/DAVIDOFF
MACRO 47(113) 03:12 10-SEP-75 PAGE 22-2
F3
MAC
6-SEP-64 03:11
DIMENSION & VARIABLE SEARCHING
5602
15600
JNZ
NOTSTR
;IF NOT VALTYP ALREADY=0
5603
15620
INR
A
1(A)
5604
15640
STA
VALTYP
IFLAG THIS AS A STRING
5605
15660
RRC
;MAKE (A) 128
5606
15680
ADD
C
;MAKE (A) =SECOND CHARACTER
5607
15700
MOV
C,A
BACK INTO (C) WITH STRING BIT ON
5608
15720
CHRGET
;GET CHARACTER AFTER "S"
5609
15740
NOTSTR: >>
5610
15760
IFN
LENGTH,<
5611 006601 001000 000072
15780
LDA
SUBFLG
;GET FLAG WHETHER TO ALLOW ARRAYS
5612 006602' 000000 001601
5613 006603 000000 006576
5614 006604 001000 000206
15800
ADD
M>
;ADD ONTO CHARACTER
5615
15820
CPI
" ("
;ARRAY PERHAPS (IF SUBFLG SET NEVER WILL MATCH)
5616 006605 001000 000376
5617 006606 000000 000050
5618 006607 001000 000312
15840
JZ
ISARY
;IT IS!
5619 006610 000000 006745
5620
0066111
000000
006602
5621
15860
IFN
LENGTH, <
5622
006612
001000
060257
15880
XRA
A
FALLOW PARENS AGAIN
5623
006613
001000
000662
15900
STA
SUBFLG>
ISAVE IN FLAG LOCATION
5624 006614 000000
001601
5625
006615 000000
006610
5626
006616 001000
000345
15920
PUSH
H
;SAVE THE TEXT POINTER
5627
15960
IFE
LENGTH-2,<
5628 006617 001000
000172
15980
MOV
A,D
;VALUE TYPE INTO [A]
5629 006620' 001000
000052
15990
LHLD
VARTAB
; LJ PLACE TO START THE SEARCH
5630 006621 000000
001621
5631 006622' 000000
006614
5632 006623 001000
000365
16000
LOPEND: PUSH
PSW
1SAVE THE VALUE TYPE
5633 006624 001000
000353
16020
XCHG
ID, =POINTER INTO SIMPLE VARIABLES
5634 006625 001000
000052
16040
LHLD
ARYTAB
, [H,L]: =END OF SIMPLE VARIABLES
5635
006626 000000
001623
5636 006621 000000
006621
5637 006630 001000
000347
16060
COMPAR
;SEE IF THE END HAS BEEN REACHED
5638 006631 001000
000341
16080
POP
H
(H) VALTYP
5639 006632 001000
000312
16100
JZ
NOTENS
;COULDN'T FIND IT, SO MAKE A NEW ENTRY
5640 006633 000000
006671
5641 006634 000000
006626
5642 006635 001000
000032
16120
LDAX
D
;GET THE VALTYP OF THIS SIMPLE VARIABLE
5643 006636 001000
000157
16140
MOV
L.A
;SAVE so WE KNOW HOW MUCH TO SKIP
5644 006637 001000
000274
16160
CMP
H
;COMPARE WITH OUR VALTYP
5645 006640 001000
000023
16180
INX
0
5646 006641 001000
000302
16200
JNZ
NOTITI
NOT RIGHT KIND -- SKIP IT
5647 006642 000000
006660
5648 006643 000000
006633
5649 006644 001000
000032
16220
LOAX
D
[A] FFIRST CHARACTER OF THIS VARIABLE
5650 006645 001000
000271
16240
CMP
C
ISEE IF OUR VARIABLE MATCHES
5651 006646 001000
000302
16260
JNZ
NOTITI
5652 006647 000000
006660
5653 006650 000000
006642
5654 006651 001000 000023
16280
INX
D
BASIC MCS 8080 SATES/ALLEN/DAVIDOFF
MACRO 7(113) 03:12 10-SEP-75 PAGE 22-3
F3
MAC
6-SEP-64 03:11
DIMENSION & VARIABLE SEARCHING
5655 006652' 001000 000032
16300
LDAX
D
;SEE IF SECOND CHACRACTER MATCHES
5656 006653 001000 000270
16320
CMP
8
5657 006654 001000 000312
16340
JZ
FINPTR
/THAT WAS IT, ALL DONE
5658 006655' 000000 006742'
5659 006656 000000 006647
5660 006657 001000 000076
16360
XWD
"01000,"076
;"MVI A, AROUND THIS INX SINCE THE POINTER
5661
16380
HIS ALREADY INCREMENTED
5662 006660 001000 000023
16400
NOTITI: INX
D
5663 006661 001000 000023
16420
INX
D
5664 006662' 001000 000174
16440
MOV
A,H
;SKIP OVER THE
5665
16460
;CURRENT VARIABLE SINCE WE DIDN'T MATCH
5666
16480
;SAVE THE VALTYP IN (A)
5667
006663 001000
060046
16500
MVI
H,0
[H,L] #NUMBER OF BYTES TO SKIP
5668
006664 000000
000000
5669 006665' 001000
000031
16520
DAD
D
IADD ON THE POINTER
5670 006666' 001000
000303
16540
JMP
LOPEND
AND SEARCH SOME MORE
5671 006667 000000
006623
5672 006670 000000
006655'
5673 006671 001000
000305
16560
NOTENS: PUSH
B
ISAVE THE LOOKS
5674 006672 001000
000114
16580
MOV
C,H
=LENGTH OF THIS VARIABLE
5675 006673 001000
000107
16600
MOV
B,A
[B] =0
5676 006674 001000 060305
16620
PUSH
B
;SAVE THE VALTYP ON THE STACK
5677
006675 001000
000003
16640
INX
B
;MAKE THE LENGTH INCLUDE
5678
16660
;THE LOOKS TOO
5679 006676 001000 000003
16680
INX
B
5680 0066775 001000 000003
16700
INX
8>
5681
16720
IFN
LENGTH-2,
5682
16730
LHLD
ARYTAB
PLACE TO STOP SEARCHING
5683
16740
XCHG
5684
16760
LHLD
VARTAB
;GET THE PLACE TO START
5685
16780
LOPEND: COMPAR
;SEE IF WE ARE THERE
5686
16800
JZ
NOTENS
;COULDN'T FIND THIS VARIABLE
5687
16820
ISO MAKE ROOM FOR IT
5688
16840
MOV
A,C
5689
16860
SUB
M
IIS THIS VARIABLE THE ONE?
5690
16880
INX
H
5691
16900
JNZ
NOTIT
INOPE
5692
16920
MOV
A,B
5693
16940
SUB
M
STRY SECOND CHARACTER MATCHING
5694
16960
NOTIT:
INX
H
5695
16980
JZ
FINPTR
;THAT WAS ITI
5696
17000
INX
H
ISKIP OVER THAT ONE--NOT IT
5697
17020
INX
H
5698
17040
INX
H
5699
17060
INX
H
5700
17080
JMP
LOPFNO
;TRY AGAIN
5701
17100
NOTENS: PUSH
8
;REMEMBER WHAT THIS
5702
17120
AVARIABLE LOOKS LIKE
5703
17140
LXI
B,6+SCODE>
;THE AMOUNT TO SHOVE
5704
17160
;EVERYTHING UP BY
5705 006700' 001000 000052
17180
LHLD
STREND
,THE CURRENT END OF STORAGE
5706 006701 000000 001625'
5707 006702 000000 006667