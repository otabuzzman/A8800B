
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47 (113) 06:09 27-AUG-75 PAGE 2-6
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
495
000316
001000
000257
07000
XRA
IZERO A
496
000317
001000
000157
07020
MOV
L,A
;SAVE ZERO IN L
497 000320 001000 000220
07040
SUB
8
INEGATE LOWEST ORDER
498
000321'
001000
000107
07060
MOV
B,A
:SAVE IT
499 000322' 001000
000175
07080
MOV
A,L
;GET A ZERO
500 000323 001000
000233
07100
SBB
E
INEGATE NEXT HIGHEST ORDER
501 000324 001000
000137
07120
MOV
E,A
;SAVE IT
502
000325' 001000
000175
07140
MOV
A,L
IGET A ZERO
503 000326 001000
000232
07160
SBB
D
INEGATE NEXT HIGHEST ORDER
504 000327' 001000
000127
07180
MOV
D,A
;SAVE IT
505 000330 001000 000175
07200
MOV
A,L
;GET ZERO BACK
506 000331' 001000 000231
07220
SBB
C
INEGATE HIGHEST ORDER
507 000332' 001000 000117
07240
MOV
C,A
;SAVE IT
508 000333 001000 000311
07260
RET
TALL DONE
509
510
511
07320
;SHIFT C,D,E RIGHT
512
07340
1A # SHIFT COUNT
513
07360
;ALTERS A,B,C,D,E,L
514
07380
,THE IDEA (EXCEPT IN 4K) IS TO SHIFT RIGHT 8 PLACES AS MANY TIMES AS
515
07400
, POSSIBLE
516
000334 001000 000006
07420
SHIFTR: MVI
8,0
IZERO OVERFLOW BYTE
517
000335' 000000 000000
518
07440
IFE
LENGTH,<
519
07460
INR
A>
PADD ONE TO SHIFT COUNT
520
07480
IFN
LENGTH,
521
000336 001000 000326
07500
SHFTR1: SUI
10
ICAN WE SHIFT IT 8 RIGHT?
522 000337 000000 000010
523 000340 001000 060332
07520
JC
SHFTR2
INO, SHIFT IT ONE PLACE AT A TIME
524 000341 000000 000353
525
000342'
000000
000311
526
07540
;THIS LOOP SPEEDS THINGS UP BY SHIFTING 8 PLACES AT ONE TIME
527 000343 001000 000103
07560
MOV
B,E
ISHIFT NUMBER 1 BYTE RIGHT
528 000344 001000
000132
07580
MOV
E,D
529 000345 001000
000121
07600
MOV
D,C
530 000346 001000
000016
07620
MVI
C,0
1PUT 0 IN HO
531 0003479 000000
000000
532 000350 001000
000303
07640
JMP
SHFTR1
STRY TO SHIFT 8 RIGHT AGAIN
533 000351 000000
000336
534 000352' 000000
000341
535 000353 001000
000306
07660
SHFTR2: ADI
11>
;CORRECT SHIFT COUNT
536
000354* 000000
000011
537 000355 001000
000157
07680
MOV
L.A
;SAVE SHIFT COUNT
538
000356 001000
000257
07700
SHFTR3: XRA
A
;CLEAR CARRY
539
0003579 001000 000055
07720
DCR
L
PARE WE DONE SHIFTING?
540
000360 001000 000310
07740
RZ
RETURN IF WE ARE
541
07760
IFE
LENGTH,
542
07780
SHRADD:
CALL
SHFTRO>
;SHIFT THE NUMBER RIGHT ONE
543
07800
IFN
LENGTH,
544 000361 001000 000171
07820
MOV
A,C
IGET HO
545 000362' 001000 000037
07840
SHRADD: RAR
,ENTRY FROM FADD, SHIFT IT RIGHT
546 000363' 001000 000117
07860
MOV
C,A
;SAVE IT
547 000364 001000 000172
07880
MOV
A,D
;SHIFT NEXT BYTE RIGHT
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 2-7
F4
MAC
23-AUG-64 06:08
FLOATING POINT ADDITION AND SUBTRACTION
548
000365
001000
060037
07900
RAR
549
000366Â°
001000
000127
07920
MOV
D,A
550 000367 001000
000173
07940
MOV
A,E
;SHIFT LOW ORDER RIGHT
551 000370 001000 000037
07960
RAR
552 000371 001000 000137
07980
MOV
E,A
553 000372' 001000
000170
08000
MOV
A,B
;SHIFT OVERFLOW BYTE RIGHT
554 000373 001000
000037
08020
RAR
555 000374 001000 080107
08040
MOV
B,A>
556 000375' 001000 000303
08060
JMP
SHFTR3
;SEE IF WE ARE DONE
557 000376 000000 000356
558
000377
000000
000351
559
560
561
08120
IFE
LENGTH,
562
08140
;SHIFT C,O,E,B RIGHT ONE
563
08160
;THIS IS USED BY SHIFTR, FMULT, FADD
564
08180
;ALTERS A,B,C,D,E
565
08200
SHFTRO: MOV
A,C
;GET THE HO
566
08220
SHFROA: RAR
;SHIFT IT RIGHT, ENTRY FROM FMULT
567
08240
MOV
C,A
568
08260
MOV
A,D
;SHIFT THE MO RIGHT
569
08280
RAR
570
08300
MOV
D,A
571
08320
MOV
A,E
;SHIFT THE LO
572
08340
RAR
573
08360
MOV
E,A
574
08380
MOV
A,B
;SHIFT THE EXTRA LO BYTE
575
08400
RAR
576
08420
MOV
B,A
577
08440
RET>
TALL DONE
578
08460
PAGE
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 3
F4
MAC
23-AUG-64 06:08
NATURAL LOG FUNCTION
579
08480
SUBTTL NATURAL LOG FUNCTION
580
08500
IFN
EXTENC,
581
08520
;CALCULATION IS BY:
582
08540
; LN(F*2*N)=(N+LOG2(F))*LN(2)
583
08560
;AN APPROXIMATION POLYNOMIAL IS USED TO CALCULATE LOG2(F)
584
585
08600
;CONSTANTS USED BY LOG
586
000400 000000
000000
08620
FONE:
000
, 1
587
000401 000000
000000
08640
000
588 000402' 000000
000000
08660
000
589 000403 000000
000201
08680
201
590 000404 000000
000003
08700
LOGCN2: 3
;DEGREE+1
591 000405 000000
000252
08720
252
, 0.598978650
592 000406 000000
000126
08740
126
593 000407 000000
000031
08760
031
594 000410 000000
000200
08780
200
595 000411 000000
000361
08800
361
; 0.961470632
596 000412' 000000
000042
08820
042
597 000413 000000
000166
08840
166
598 000414 000000
000200
08860
200
599 000415 000000
000105
08880
105
; 2,88539129
600 000416 000000
000252
08900
252
, NOTE: THE REFERENCE FOR THIS CONSTANT HAS 100 NOT 105
601 000417 000000
000070
08920
070
; IN THE LOW ORDER BYTE,
602 000420 000000
000202
08940
202
603
604 000421 001000
000357
08980
LOG:
FSIGN
CHECK FOR A NEGATIVE OR ZERO ARGUMENT
605 000422' 001000
000352
09000
JPE
FCERR
;FAC .LE, 0, BLOW HIM OUT OF THE WATER
606 000423' 000000 000000*
607 000424* 000000
000376
608
09020
IFSIGN ONLY RETURNS 0,1 OR 377 IN A
609
09040
,THE PARITY WILL BE EVEN IF A HAS 0 OR 377
610 000425 001000
000041
09060
LXI
H,FAC
;GET POINTER TO EXPONENT
611 000426 000000
000235*
612 000427 000000
000423
613 000430 001000
000176
09080
MOV
A,M
;GET EXPONENT IN A
614 000431 001000
000601
09100
MOVRI
200,065,004,363 ;GET SQRC, 5)
615 000432' 000000
000065
616 000433 000000
000200
617 000434 001000
000021
618 000435 000000
000363
619 000436 000000
000604
620 000437 001000
000220
09120
SUB
B
;REMOVE EXCESS 200
621 000440* 001000
000365
09140
PUSH
PSW
;SAVE EXPONENT FOR LATER
622 0004411 001000
000160
09160
MOV
M,B
ISET EXP TO 200, RESULT IS NUM IN (,5,1)
623 000442' 001000
000325
09180
PUSHR
;SAVE SQR(.5)
624 0004439 001000
000305
625 000444* 001000
000315
09200
CALL
FADD
;CALCULATE (F=SQR(,5))/(F+SQR(,5))
626 000445 000000
000025
627 000446 000000
000426
628 000447 001000
000301
09220
POPR
;GET SQRC.5) BACK
629 000450 001000
000321
630 000451 001000
000004
09240
INR
8
;GET SQR(2)
631
000452' 001000
000315
09260
CALL
FDIV
IWHERE F=NUMBER LEFT IN FAC
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 3-1
F4
MAC
23-AUG-64 06:08
NATURAL LOG FUNCTION
632 000453 000000
000655'
633 000454 000000
000445
634 000455 001000
000041
09280
LXI
H,FONE
;THE CALCULATION IS EQUIVALENT TO THE ABOVE,
635 000456 000000
000400
636 000457 000000
000453
637 000460 001000
000315
09300
CALL
FSUBS
, BUT DONE IN A DIFFERENT ORDER
638 000461 000000
000011
639 000462 000000
000456*
640 000463 001000
000041
09320
LXI
H,LOGCN2
EVALUATE APPROXIMATION POLYNOMIAL
641 000464 000000
000404
642 000465* 000000
000461
643 000466 001000
000315
09340
CALL
POLYX
644 000467 000000
002613
645 000470 000000
000464
646 000471 001000
000001
09360
MOVRI
200,200,000,000 ;GET -1/2
647 000472 000000
000200
648 000473 000000
000200
649 000474 001000
000021
650 060475' 000000
000000
651 000476 000000
000000
652 000477 001000
000315
09380
CALL
FADD
PADD IN LAST CONSTANT
653 000500 000000
000025
654 000501 000000
000467
655 000502' 001000
000361
09400
POP
PSW
;RETRIEVE ORIGINAL EXPONENT
656 000503 001000
000315
09420
CALL
FINLOG
;ADD IT TO ORIGINAL NUMBER
657 000504 000000
001731
658 000505* 000000
000500
659 000506 001000
000001
09440
MULLN2: MOVRI
260,061,162,030>; LN(2)
660 000507 000000
000061
661 000510 000000
000200
662 000511 001000
000021
663 000512' 000000
000030
664
000513 000000
000162
665
09460
,
JMP
FMULT
;MULTIPLY BY LN(2)
666
09480
PAGE
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE
4
F4
MAC
23-AUG-64 06:08
FLOATING MULTIPLICATION AND DIVISION
667
09500
SUBTTL FLOATING MULTIPLICATION AND DIVISION
668
09520
;MULTIPLICATION
FAC:=ARG*FAC
669
09540
;ALTERS A,B,C,D,E,H,L
670
09560
IFE
EXTENC,<
671
09580
FMULTS: CALL
MOVRM>
;ENTRY WITH POINTER TO ARG IN (HL)
672
09600
IFN
LENGTH-2,<
673
000514
001000
000041
09620
XWD
1000,041
1"LXI H" AROUND NEXT 2 BYTES
674 000515 001000 000301
09640
FMULTT: POPR>
ENTRY IF ARGUMENT IS ON THE STACK
675 000516 001000 000321
676 000517 001000
000357
09660
FMULT: FSIGN
;CHECK IF FAC IS ZERO
677 000520 001000
000310
09680
RZ
IF IT IS, RESULT IS ZERO
678 000521 001000 000056
09700
MVI
L,0
1ADD THE TWO EXPONENTS, L IS A FLAG
679 000522' 000000 000000
680 000523 001000 000315
09720
CALL
MULDIV
;FIX UP THE EXPONENTS
681 000524 000000 001035'
682
000525'
000000
000504
683
09740
;SAVE THE NUMBER IN THE REGISTERS so WE CAN ADD IT FAST
684
000526
001000
000171
09760
MOV
A,C
;GET HO
685
000527
001000
000062
09780
STA
FMULTA+1
;STORE HO OF REGISTERS
686
000530
000000
000606
687
000531
000000
000524
688 000532' 001000
000353
09800
XCHG
;STORE THE TWO LO'S OF THE REGISTERS
689 000533 001000
000042
09820
SHLD
FMULTB+1
690
000534 000000
000601
691 000535' 000000
000530
692 000536 001000
000001
09840
LXI
B,SCODE
IZERO THE PRODUCT REGISTERS
693 000537 000000
000000*
694 000540 000000
000534'
695 000541 001000
000120
09860
MOV
0,8
696 000542 001000
000130
09880
MOV
E,B
697 000543 001000
000041
09900
LXI
H,NORMAL
1PUT ADDRESS OF NORMAL, WERE WE FINISH UP,
698 000544 000000
000146
699 000545 000000
000537
700 000546 001000
000345
09920
PUSH
H
i ON THE STACK
701 000547 001000
000041
09940
LXI
H,FMULT2
1PUT FMULT2 ON THE STACK TWICE, SO AFTER
702 000550 000000
000557
703
000551 000000
000544
704 000552' 001000
000345
09960
PUSH
H
; WE MULTIPLY BY THE LO BYTE, WE WILL
705 000553 001000
000345
09980
PUSH
H
, MULTIPLY BY THE MO AND HO
706 000554 001000
000041
10000
LXI
H,FACLO
IGET ADDRESS OF LO OF FAC
707 000555' 000000
000075*
708 000556 000000
000550
709 000557 001000
000176
10020
FMULT2: MOV
A,M
1GET BYTE TO MULTIPLY BY
710
000560 001000
000043
10040
INX
H
;MOVE POINTER TO NEXT BYTE
711
10060
IFN
LENGTH,
712 000561 001000 000267
10080
ORA
A
713 000562' 001000 000312
10100
JZ
FMULT3>
BARE WE MULTIPLYING BY ZERO?
714 000563 000000 000632'
715 000564* 000000 000555'
716 000565' 001000 000345
10120
PUSH
H
;SAVE POINTER
717
10140
IFE
LENGTH,
718
10160
MVI
L,10>
1SET UP A COUNT
719
10180
IFN
LENGTH,<
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 4-1
F4
MAC
23-AUG-64 06:08
FLOATING MULTIPLICATION AND DIVISION
720 000566* 001000 000353
10200
XCHG
;GET LO'S IN (HL)
721
000567 001000 000036
10220
MVI
E,10>
;SET UP A COUNT
722 000570 000000 000010
723
724
10260
;THE PRODUCT WILL BE FORMED IN C,D,E,B, THIS WILL BE IN C,H,L,B PART OF THE
725
10280
;TIME IN ORDER TO USE THE "DAD" INSTRUCTION, AT FMULT2, WE GET THE NEXT
726
10300
;BYTE OF THE MANTISSA IN THE FAC TO MULTIPLY BY, ((HL) POINTS TO IT)
727
10320
; (THE FMULT2 SUBROUTINE PRESERVES (HL)) IN 8K, IF THE BYTE IS ZERO, WE JUST
728
10340
;SHIFT THE PRODUCT 8 RIGHT. THIS BYTE IS THEN SHIFTED RIGHT AND SAVED IN D
729
10360
CH IN 4K), THE CARRY DETERMINES IF WE SHOULD ADD IN THE SECOND FACTOR
730
10380
;IF WE DO, WE ADD IT TO C,H,L. B IS ONLY USED TO DETERMINE WHICH WAY WE
731
10400
;ROUND. WE THEN SHIFT C,H,L,B (C,D,E,B) IN 4K RIGHT ONE TO GET READY FOR THE
732
10420
NEXT TIME THROUGH THE LOOP. NOTE THAT THE CARRY IS SHIFTED INTO THE MSB OF
733
10440
ic. E HAS A COUNT (L IN 4K) TO DETERMINE WHEN WE HAVE LOOKED AT ALL THE BITS
734
10460
OF D (H IN 4K).
735
000571' 001000 000037
10480
FMULT4: RAR
ROTATE BYTE RIGHT
736
10500
IFE LENGTH,<
737
10520
MOV
H,A:
;SAVE THE COUNT
738
10540
IFN
LENGTH,
739
000572' 001000 000127
10560
MOV
D,A>
;SAVE IT
740 000575Â° 001000 000171
10580
MOV
A,C
;GET HO
741 000574 001000 000322
10600
JNC
FMULT5
1DON'T ADD IN NUMBER IF BIT WAS ZERO
742 000575' 000000 000607
743 000576 000000 000563
744
10620
IFE
LENGTH,
745
10640
XCHG>
1PUT THE LO'S IN (HL)
746 000577 001000 000325
10660
PUSH
D
;SAVE COUNTERS
747 000600 001000 000021
10680
FMULTB: LXI
,SCODE
;GET LO'S OF NUMBER TO ADD, THIS IS SET ABOVE
748 000601 000000 000537*
749 000602' 000000 000575
750 000603 001000 000031
10700
DAD
D
;ADD THEM IN
751 000604 001000 000321
10720
POP
D
IGET COUNTERS BACK
752
000605 001000 000316
10740
FMULTA: ACI
0
;ADD IN HO, THIS IS SET UP ABOVE
753 000606 000000 000000
754
10760
IFE
LENGTH,
755
10780
XCHG
;PUT THE LO'S BACK IN (DE)
756
10800
FMULT5: CALL
SHFROA
;SHIFT THE RESULT RIGHT ONE
757
10820
OCR
L
;ARE WE DONE?
758
10840
MOV
A,H>
;GET NUMBER WE ARE MULTIPLYING BY
759
10860
IFN
LENGTH,
760
000607
001000
000037
10880
FMULT5: RAR
ROTATE RESULT RIGHT ONE
761
000610* 001000
000117
10900
MOV
C,A
762 000611 001000 000174
10920
MOV
A,H
IROTATE NEXT BYTE
763 000612' 001000 000037
10940
RAR
764 000613 001000 000147
10960
MOV
H,A
765 000614 001000 000175
10980
MOV
A,L
;ROTATE NEXT LOWER ORDER
766 000615 001000 000037
11000
RAR
767 000616 001000 000157
11020
MOV
L.A
768 000617 001000 000170
11040
MOV
A,B
TROTATE LO
769 000620 001000 000037
11060
RAR
770 000621 001000 000107
11080
MOV
B,A
771 000622 001000 000035
11100
DCR
E
;ARE WE DONE?
772 000623 001000 000172
11120
MOV
A,O>
IGET NUMBER WE ARE MULTIPLYING BY
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 4-2
F4
MAC
23-AUG-64 06:08
FLOATING MULTIPLICATION AND DIVISION
773 000624 001000 000302
11140
JNZ
FMULT4
;MULTIPLY AGAIN IF WE ARE NOT DONE
774 000625' 000000 000571
775 000626 000000 000601
776
11160
IFN
LENGTH,
777 000627 001000 000353
11180
XCHG>
;GET LO'S IN (HL)
778 000630 001000 000341
11200
POPHRT: POP
H
IGET POINTER TO NUMBER TO MULTIPLY BY
779 000631 001000 000311
11220
RET
PALL DONE
780
11240
IFN
LENGTH,
781 000632 001000 000103
11260
FMULT3: MOV
B,E
;MULTIPLY BY ZERO: SHIFT EVERYTHING 8 RIGHT
782 000633 001000 000132
11280
MOV
E,O
783 000634 001000 000121
11300
MOV
D,C
784 000635' 001000 000117
11320
MOV
C,A
;SHIFT IN 8 ZEROS ON THE LEFT
785
000636 001000 000311
11340
RET>
TALL DONE
786
787
788
11400
;DIVIDE FAC BY 10
789
11420
;ALTERS A,B,C,D,E,M,L
790
000637 001000 000315
11440
DIV10:
CALL
PUSHF
;SAVE NUMBER
791
000640 000000 001205'
792 000641 000000 000625'
793
11460
IFN
LENGTH-2,<
794 000642 001000 000001
11480
MOVRI
204,040,000,000 ;LOAD CONSTANT '10' INTO REGISTERS
795 000643 000000 000040
796 000644 000000 000204
797 000645' 001000 000021
798 000646 000000 000000
799 000647Â° 000000 000000
800 000650 001000 000315
11500
CALL
MOVFR>
;MOVE THE CONSTANT TO THE FAC
801 000651 000000 001225'
802 000652 000000 000640
803
11520
IFE
LENGTH-2,
804
11540
LXI
H,FTEN
;GET POINTER TO THE CONSTANT '10"
805
11560
CALL
MOVFM>
,MOVE TEN INTO THE FAC
806
000653 001000 000301
11580
FDIVT:
POPR
;GET NUMBER BACK IN REGISTERS
807
000654 001000 000321
808
11600
;FALL INTO DIVIDE AND WE ARE DONE
809
810
811
11660
;DIVISION
FAC:=ARG/FAC
812
11680
;ALTERS A,B,C,O,E,M,L
813
000655' 001000 000357
11700
FDIV:
FSIGN
CHECK FOR DIVISION BY ZERO
814 000656 001000 000312
11720
JZ
DVDERR
THE IS TRYING TO GET AWAY WITH IT
815 000651 000000 000000*
816 000660* 000000 000651
817 000661 001000 000656
11740
MVI
L,377
;SUBTRACT THE TWO EXPONENTS, L IS A FLAG
818 000662' 000000 000377
819 000663 001000 000315
11760
CALL
MULDIV
IFIX UP THE EXPONENTS AND THINGS
820 000664 000000 001035'
821 000665 000000 000657
822 000666' 001000 000664
11780
INR
M
IADO 2 TO EXPONENT TO CORRECT SCALING
823 000667Â° 001000 000064
11800
INR
M
824
11820
;HERE WE SAVE THE FAC IN MEMORY so WE CAN SUBTRACT IT FROM THE NUMBER
825
11840
;IN THE REGISTERS QUICKLY.
MATHPK FOR BASIC MCS 8080 GATES/ALLEN/DAVIDOFF MACRO 47(113) 06:09 27-AUG-75 PAGE 4-3
F4
MAC
23-AUG-64 06:08
FLOATING MULTIPLICATION AND DIVISION
826 000670 001000 000053
11860
DCX
H
;POINT TO HO
827 0006719 001000 000176
11880
MOV
A,M
;GET HO
828 000672' 001000
000062
11900
STA
FOIVA+1
;SAVE IT
829 000673 000000
000734
830 000674 000000
000664Â°
831 000675' 001000
000053
11920
DCX
H
;SAVE MIDDLE ORDER
832 000676 001000
000176
11940
MOV
A,M
833 000677 001000
000062
11960
STA
FDIVB+1
;PUT IT WHERE NOTHING WILL HURT IT
834 000700 000000
000730
835 000701 000000
000673
836 000702 001000
000053
11980
DCX
H
;SAVE LO
837 000703 001000
080176
12000
MOV
A,M
838 000704 001000 000062
12020
STA
FDIVC+1
839 000705' 000000 000724
840 000706 000000 000100
841
842
12060
;THE NUMERATOR WILL BE KEPT IN B,H,L. THE QUOTIENT WILL BE FORMED IN C,D,E.
843
12080
ITO GET A BIT OF THE QUOTIENT, WE FIRST SAVE B,H,L ON THE STACK, THEN
844
12100
;SUBTRACT THE DENOMINATOR THAT WE SAVED IN MEMORY. THE CARRY INDICATES
845
12120
TWHETHER OR NOT B,H,L WAS BIGGER THAN THE DENOMINATOR. IF B,H,L WAS BIGGER,
846
12140
;THE NEXT BIT OF THE QUOTIENT IS A ONE. TO GET THE OLD B,H,L OFF THE STACK,
847
12160
I WE POP THEM INTO THE PSW, IF THE DENOMINATOR WAS BIGGER, THE NEXT BIT OF
848
12180
;THE QUOTIENT IS ZERO, AND WE GET THE OLD B,H,L BACK BY POPPING IT OFF THE
849
12200
;STACK. WE HAVE TO KEEP AN EXTRA BIT OF THE QUOTIENT IN FDIVG+1 IN CASE THE
850
12220
;DENOMINATOR WAS BIGGER, THEN B,H,L WILL GET SHIFTED LEFT. IF THE MSB OF
851
12240
18 WAS ONE, IT HAS TO BE STORED SOMEWHERE, so WE STORE IT IN FDIVG+1, THEN
852
12260
;THE NEXT TIME THROUGH THE LOOP B,H,L WILL LOOK BIGGER BECAUSE IT HAS AN
853
12280
;EXTRA HO BIT IN FOIVG+1. WE ARE DONE DIVIDING WHEN THE MSB OF C IS A ONE.
854
12300
;THIS OCCURS WHEN WE HAVE CALCULATED 24 BITS OF THE QUOTIENT. WHEN WE JUMP
855
12320
ITO ROUND, THE 25TH BIT OF THE QUOTIENT DETERMINES WHETHER WE ROUND OR NOT.
856
12340
;IT IS IN THE MSB OF A. IF INITIALLY THE DENOMINATOR IS BIGGER THAN THE
857
12360
;NUMERATOR, THE FIRST BIT OF THE QUOTIENT WILL BE ZERO, THIS MEANS WE
858
12380
;WILL GO THROUGH THE DIVIDE LOOP 26 TIMES, SINCE IT STOPS ON THE 25TH BIT
859
12400
;AFTER THE FIRST NON-ZERO BIT OF THE EXPONENT. so, THIS QUOTIENT WILL LOOK
860
12420
;SHIFTED LEFT ONE FROM THE QUOTIENT OF TWO NUMBERS IN WHICH THE NUMERATOR IS
861
12440
;BIGGER, THIS CAN ONLY OCCUR ON THE FIRST TIME THROUGH THE LOOP, so C,D,E
862
12460
PARE ALL ZERO. so, IF WE FINISH THE LOOP AND C,D,E ARE ALL ZERO, THEN WE
863
12480
;MUST DECREMENT THE EXPONENT TO CORRECT FOR THIS.
864 000707 001000 000101
12500
MOV
B,C
;GET NUMBER IN B,H,L
865 000710* 001000
000353
12520
XCHG
866 000711 001000 000257
12540
XRA
A
IZERO C,D,E AND HIGHEST ORDER
867 000712 001000
000117
12560
MOV
C,A
868 000713 001000
000127
12580
MOV
D,A
869 000714 001000
000137
12600
MOV
E,A
870 000715' 001000
000062
12620
STA
FDIVG+1
871 000716 000000
000737
872 000717 000000
000705'
873 000720 001000
000345
12640
FDIVI:
PUSH
H
;SAVE LO'S OF NUMBER
874 000721 001000
000305
12660
PUSH
B
;SAVE HO OF NUMBER
875 000722' 001000
000175
12680
MOV
A,L
;SUBTRACT NUMBER THAT WAS IN FAC
876 000723' 001000 000326
12700
FDIVC:
SUI
0
;SUBTRACT LO
877 000724 000000 000000
878 000725 001000 000157
12720
MOV
L.A
;SAVE IT