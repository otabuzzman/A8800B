*** ANDCON
F3.4TH:5251 ANDCON:  



*** ASC
F3.4TH: 681         ARE ASCERTAINED FROM THE USER, A ZERO IS PUT DOWN
F3.4TH: 944          ADR(ASC) 
F3.4TH:7078 ; THE FOLLOWING IS THE ASC($) FUNCTION. IT RETURNS AN INTEGER
F3.4TH:7079 ; WHICH IS THE DECIMAL ASCII EQUIVALENT
F3.4TH:7081 ASC:     CALL     LEN1                     ;SET UP ORIGINAL STR
F3.4TH:7098 ; CHARACTER THE ASCII EQUIVALENT OF THE INTEGER ARG (#)
F3.4TH:7112          MOV      M,E                      ;SAVE ASCII BYTE
F3.4TH:7357 ; A NUMBER BY INTERPRETING THE ASCII DIGITS. ETC.
F4.4TH:2590          SUI      "0"                      ;SUBTRACT OFF ASCII CODE
F4.4TH:2615          SUI      "0"                      ;CONVERT IT TO ASCII
F4.4TH:2692          SUI      "0"                      ;SUBTRACT OFF ASCII CODE
F4.4TH:2943          ADI      "0"+12                   ;ADD BACK IN TEN AND CONVERT TO ASCII
F4.4TH:3181          ADI      "0"+12                   ;ADD BACK IN TEN AND CONVERT TO ASCII



*** ATNFIX
F3.4TH: 139 IFN      EXTFNC,<INTERNAL ATNFIX,COSFIX,SINFIX,TANFIX
F3.4TH: 931 ATNFIX:  ADR(ATN) 
F4.4TH:4530          SHLO     ATNFIX## 



*** ATNTK
F3.4TH:1050          ATNTK==Q>
F3.4TH:5200          TOPCON=<ATNTK-ONEFUN>*2+1



*** CASSW
F3.4TH:   6          CASSW==0                          ;CASSETTE SWITCH (CSAVE,CLOAD)
F3.4TH:  17          CASSW==0 
F3.4TH:  26          CASSW==0 
F3.4TH:  74 IFN      CASSW,<PRINTX /CASSETTE/>
F3.4TH:1002 IFN      CASSW,<DCI"CLOAD"
F3.4TH:1127 IFN      CASSW,<ADR(CLOAD)
F3.4TH:7680 IFN      CASSW,<  
F4.4TH:   6          CASSW==1                          ;CASSETTE SWITCH (CSAVE, CLOAD)
F4.4TH:  14          CASSW==0 
F4.4TH:  23          CASSW==0 
F4.4TH:  71 IFN      CASSW,<PRINTX /CASSETTE/>



*** CLOAD
F3.4TH:   6          CASSW==0                          ;CASSETTE SWITCH (CSAVE,CLOAD)
F3.4TH:1002 IFN      CASSW,<DCI"CLOAD"
F3.4TH:1127 IFN      CASSW,<ADR(CLOAD)
F3.4TH:7654 SUBTTL   CLOAD, CSAVE, CONSOLE
F3.4TH:7727 ; THE CLOAD COMMAND CLEARS CORE AND THEN READS A PROGRAM
F3.4TH:7733 CLOAD:   STA      FACLO                    ;SAVE THE FILENAME
F4.4TH:   6          CASSW==1                          ;CASSETTE SWITCH (CSAVE, CLOAD)



*** CONIS1
F4.4TH:1455 CONIS1:  POP      D                        ;GET ERROR ADDRESS OFF STACK



*** CONSOL
F3.4TH:  78 IFN      CONSSW,<PRINTX /CONSOLE/>>
F3.4TH:1004 IFN      CONSSW,<DCI"CONSOLE">
F3.4TH:1129 IFN      CONSSW,<ADR(CONSOLE)>
F3.4TH:2615          CNLCA1==.-1                       ;CONSOLE COMMAND CHANGE LOC
F3.4TH:2624          CNLCB1==.-1                       ;CONSOLE COMMAND CHANGE LOC
F3.4TH:2631          CNLCA2==.-1                       ;CONSOLE COMMAND CHANGE LOC
F3.4TH:2639          CNLCB2==.-1                       ;CONSOLE COMMAND CHANGE LOC
F3.4TH:2998          CNLCA3==.-1                       ;CONSOLE COMMAND CHANGE LOC
F3.4TH:7654 SUBTTL   CLOAD, CSAVE, CONSOLE
F3.4TH:7656 ; THE CONSOLE COMMAND ALLOWS THE USER TO CHANGE THE I/O CHANNEL
F3.4TH:7657 ; THAT THE USER TERMINAL IS ON. BY GIVING THE COMMAND CONSOLE X
F3.4TH:7664 CONSDO:  XRA      A                        ;FORCE A CHANNEL ZERO CONSOLE
F3.4TH:7667 CONSOL:  CALL     GETBYT                   ;FETCH AN INTEGER INTO [A]
F4.4TH:  74 IFN      CONSSW,<PRINTX /CONSOLE/>>



*** CONSSW
F3.4TH:  10          CONSSW==0
F3.4TH:  18          CONSSW==0
F3.4TH:  29          CONSSW==0
F3.4TH:  78 IFN      CONSSW,<PRINTX /CONSOLE/>>
F3.4TH:1004 IFN      CONSSW,<DCI"CONSOLE">
F3.4TH:1129 IFN      CONSSW,<ADR(CONSOLE)>
F3.4TH:7662 IFN      CONSSW,< 
F4.4TH:   9          CONSSW==0
F4.4TH:  15          CONSSW==0
F4.4TH:  26          CONSSW==0
F4.4TH:  74 IFN      CONSSW,<PRINTX /CONSOLE/>>
F4.4TH:4612 IFE      CONSSW,<LXI H,READY> 
F4.4TH:4615 IFN      CONSSW,< 



*** CONTRW
F3.4TH:  14          CONTRW==1                         ;ALLOW ^O
F3.4TH:  20          CONTRW==0>
F3.4TH:  30          CONTRW==0>
F3.4TH: 161 IFN      CONTRW,< 
F3.4TH: 808 IFN      CONTRW,< 
F3.4TH: 813 IFE      LENGTH!CONTRW!LPTSW,<
F3.4TH:1594 IFN      CONTRW,< 
F3.4TH:1886 IFN      CONTRW,< 
F3.4TH:1942 IFN      CONTRW,< 
F3.4TH:2262 IFE      CONTRW,<XRA A>       
F3.4TH:2539 IFN      CONTRW,< 
F3.4TH:2595 IFN      LENGTH!CONTRW!LPTSW,<
F3.4TH:2642 IFN      CONTRW,< 
F3.4TH:3040 IFN      CONTRW   
F3.4TH:4040 IFN      CONTRW,< 
F4.4TH:  11          CONTRW==1                         ;ALLOW ^0
F4.4TH:  17          CONTRW==0>
F4.4TH:  27          CONTRW==0>
F4.4TH:4317 IFN      CONTRW,< 



*** CSAVE
F3.4TH:   6          CASSW==0                          ;CASSETTE SWITCH (CSAVE,CLOAD)
F3.4TH:1003          DCI"CSAVE">
F3.4TH:1128          ADR(CSAVE)>
F3.4TH:7654 SUBTTL   CLOAD, CSAVE, CONSOLE
F3.4TH:7704 ; THE CSAVE COMMAND WRITES A PROGRAM ONTO CASSETTE BY DUMPING
F3.4TH:7708 CSAVE:   PUSH     H        
F4.4TH:   6          CASSW==1                          ;CASSETTE SWITCH (CSAVE, CLOAD)



*** DADDFO
F4.4TH:2102 DADDFO:  LXI      D,DFACLO                 ;GET POINTER TO FAC, ENTRY FROM FOUT



*** DCE(X),<Q
F3.4TH:1179 DEFINE   DCE(X),<Q=Q+2



*** DCI(A),<Q
F3.4TH: 982 DEFINE   DCI(A),<Q=Q+1



*** DELETE
F3.4TH: 737                                            ;LOCATIONS DELETES FUNCTIONS IF
F3.4TH:1123 IFE      LENGTH-2,<ADR(DELETE)>
F3.4TH:1993          CC       DEL>                     ;DELETE THE LINE
F3.4TH:1997          JNC      NODEL                    ;NO MATCH SO DON'T DELETE
F3.4TH:2461 ; CHARACTER DELETE CHARACTER AND @ AS THE LINE DELETE CHARACTER
F3.4TH:2509          CPI      "@"                      ;LINE DELETE?
F3.4TH:2514          CPI      "+"                      ;CHARACTER DELETE?
F3.4TH:7396 SUBTTL   FANCY LIST, DELETE, EDIT, LLIST
F3.4TH:7513 ; THE FOLLOWING CODE IS FOR THE DELETE RANGE
F3.4TH:7514 ; COMMAND. BEFORE THE LINES ARE DELETED, 'OK'
F3.4TH:7517 DELETE:  CALL     SCNLIN                   ;SCAN LINE RANGE
F4.4TH:4508          LXI      D,INITSA                 ;ASSUME NOT DELETE ANY FNS
F4.4TH:4533          CPI      "A"                      ;DELETE ATN BUT NOT SIN, COST



*** DINTFO
F4.4TH:1659 DINTFO:  PUSH     PSW                      ;ENTRY FROM FOUT, CARRY IS ZERO IF WE COME



*** DOREL
F3.4TH:5298 PTDORL:  ADR(DOREL)                        ;ADDRESS OF RELATIONAL
F3.4TH:5307 DOREL:   MOV      A,C                      ;GET MEMORIES INTO [A]
F4.4TH:1330 ; DOREL DEPENDS UPON THE FACT THAT FCOMP RETURNS WITH CARRY ON



*** DROUNB
F4.4TH:2066 DROUNB:  ORA      A                        ;ENTRY FROM DDIV



*** DSFFUN
F3.4TH:  28          DSFFUN==0
F4.4TH:  25          DSFFUN==0



*** DSKFUN
F3.4TH:   9          DSKFUN==0                         ;ON TO READ/WRITE
F3.4TH:  19          DSKFUN==0
F3.4TH:  77 IFN      DSKFUN,<PRINTX /DISK/>
F3.4TH: 936 IFN      DSKFUN,<ADR(DSKI$):
F3.4TH: 995 IFN      DSKFUN,<DCI"DSKO$">
F3.4TH:1107 IFN      DSKFUN,<ADR(DSKO$)>
F3.4TH:7559 IFN      DSKFUN,< 
F4.4TH:   8          DSKFUN==0                         ;ON TO READ/WRITE
F4.4TH:  16          DSKFUN==0
F4.4TH:  73 IFN      DSKFUN,<PRINTX /DISK/>



*** DSUB
F3.4TH: 168 EXTERNAL ISUB,IMULT,IDIV,ICOMP,INEG,DADD,DSUB,DMULT,ODIV,OCOMP,VINT
F3.4TH:1147          ADR(DSUB)
F4.4TH: 103 INTERNAL ISUB,IMULT,IDIV,ICOMP,INEG,DADD,DSUB,DMULT,DDIV,DCOMP,INTFNC>
F4.4TH:1961 DSUB:    CALL     NEG                      ;NEGATE THE SECOND ARGUMENT



*** EQULTK
F3.4TH:1033          EQULTK=Q 
F3.4TH:3458          SYNCHK   EQULTK                   ;CHECK FOR "="
F3.4TH:6329          SYNCHK   EQULTK                   ;MUST HAVE EQUAL



*** EXTFNC
F3.4TH:  23          EXTFNC==0                         ;ON MEANS EXTENDED FUNCTIONS
F3.4TH:  33          EXTFNC==1
F3.4TH:  38          EXTFNC==1
F3.4TH: 139 IFN      EXTFNC,<INTERNAL ATNFIX,COSFIX,SINFIX,TANFIX
F3.4TH: 919 IFN      EXTFNC,< 
F3.4TH: 928 IFN      EXTFNC,< 
F3.4TH: 968 IFN      EXTFNC,<127
F3.4TH:1049 IFN      EXTFNC,< 
F3.4TH:5062 IFE      EXTFNC,< 
F3.4TH:5064 IFN      EXTFNC,< 
F4.4TH:  20          EXTFNC==0                         ;ON MEANS EXTENDED FUNCTIONS
F4.4TH:  30          EXTFNC==1
F4.4TH:  35          EXTFNC==1
F4.4TH:  91 IFN      EXTFNC,< 
F4.4TH: 191 IFN      EXTFNC,< 
F4.4TH: 580 IFN      EXTFNC,< 
F4.4TH: 670 IFE      EXTFNC,< 
F4.4TH: 996 IFN      EXTFNC,< 
F4.4TH:1608 IFN      EXTFNC,<                          ;THE ONLY GUY WHO NEEDS THIS DOESN'T CARE
F4.4TH:1613 IFN      EXTFNC,< 
F4.4TH:1621 IFN      EXTFNC,< 
F4.4TH:1626 IFE      EXTFNC,< 
F4.4TH:1628 IFN      EXTFNC,< 
F4.4TH:2592 IFE      EXTFNC,< 
F4.4TH:2597 IFN      EXTFNC,< 
F4.4TH:2667 IFN      EXTFNC,< 
F4.4TH:3554 IFE      EXTFNC,< 
F4.4TH:3598 IFN      EXTFNC,< 
F4.4TH:3694 IFN      EXTFNC,< 
F4.4TH:3805 IFN      EXTFNC,< 
F4.4TH:3904 IFE      EXTFNC,< 
F4.4TH:3906 IFN      EXTFNC,< 
F4.4TH:3955 IFN      EXTFNC,< 
F4.4TH:4002 IFE      EXTFNC,< 
F4.4TH:4007 IFN      EXTFNC,< 
F4.4TH:4028 IFE      EXTFNC,< 
F4.4TH:4033 IFN      EXTFNC,< 
F4.4TH:4046 IFE      EXTFNC,<                          ;EVALUATE APPROXIMATION POLYNOMIAL
F4.4TH:4069 IFN      EXTFNC,< 
F4.4TH:4077 IFN      EXTFNC,< 
F4.4TH:4087 IFN      EXTFNC,  
F4.4TH:4111 IFN      EXTFNC,  
F4.4TH:4137 IFN      EXTFNC,< 
F4.4TH:4461 IFE      EXTFNC,< 
F4.4TH:4495 IFN      EXTFNC,< 
F4.4TH:4622 IFE      EXTFNC,< 
F4.4TH:4640 IFN      EXTFNC,< 



*** FDIVA
F4.4TH: 828          STA      FDIVA+1                  ;SAVE IT
F4.4TH: 884 FDIVA:   SBI      0        



*** FDIVB
F4.4TH: 833          STA      FDIVB+1                  ;PUT IT WHERE NOTHING WILL HURT IT
F4.4TH: 880 FDIVB:   SBI      0        



*** FDIVC
F4.4TH: 838          STA      FDIVC+1  
F4.4TH: 876 FDIVC:   SUI      0                        ;SUBTRACT LO



*** FDIVG
F4.4TH: 849 ; STACK. WE HAVE TO KEEP AN EXTRA BIT OF THE QUOTIENT IN FDIVG+1 IN CASE THE
F4.4TH: 851 ; B WAS ONE, IT HAS TO BE STORED SOMEWHERE, SO WE STORE IT IN FDIVG+1, THEN
F4.4TH: 870          STA      FDIVG+1  
F4.4TH: 887 FDIVG:   MVI      A,0                      ;GET HIGHEST ORDER
F4.4TH: 895          STA      FDIVG+1                  ;UPDATE HIGHEST ORDER
F4.4TH: 928          LDA      FDIVG+1                  ;ROTATE THE HIGHEST ORDER
F4.4TH: 932          STA      FDIVG+1  



*** FMULTA
F4.4TH: 685          STA      FMULTA+1                 ;STORE HO OF REGISTERS
F4.4TH: 752 FMULTA:  ACI      0                        ;ADD IN HO, THIS IS SET UP ABOVE



*** FMULTB
F4.4TH: 689          SHLD     FMULTB+1 
F4.4TH: 747 FMULTB:  LXI      D,$CODE                  ;GET LO'S OF NUMBER TO ADD, THIS IS SET ABOVE



*** FNINP
F3.4TH: 910          ADR(FNINP)
F3.4TH:7239 FNINP:   CALL     CONINT                   ;GET INTEGER CHANNEL #



*** FNOUT
F3.4TH:1099 IFN      LENGTH,<ADR(FNOUT)
F3.4TH:7251 FNOUT:   CALL     SETIO                    ;GET READY



*** FNS2
F4.4TH:4627          ADR(FNS2)
F4.4TH:4636 FNS2:    DC"WANT RND"



*** FNS3
F4.4TH:4630          ADR(FNS3)
F4.4TH:4638 FNS3:    DC"WANT SQR"



*** FNWAIT
F3.4TH:1105          ADR(FNWAIT)>
F3.4TH:7263 FNWAIT:  CALL     SETIO                    ;SET UP FOR WAIT



*** FOUBE5
F4.4TH:3248 FOUBE5:  LDA      TEMP2                    ;GET THE LOCATION OF THE DECIMAL POINT



*** FOUICC
F4.4TH:3198 FOUICC:  LDA      TEMP3                    ;GET THE FORMAT SPECS



*** FOUND
F3.4TH: 283         WHEN A MATCH IS FOUND BETWEEN A STRING
F3.4TH: 352         THE "NEXT". AT WHATEVER POINT A MATCH IS FOUND
F3.4TH: 353         THE STACK IS RESET, IF NO MATCH IS FOUND A
F3.4TH: 488         WHERE A SIMPLE VARIABLE NAME IS FOUND AND [ARYTAB]
F3.4TH: 521         QUESTION SHOULD BE FOUND, AND THE INDEX INDICATES
F3.4TH: 652             3. IF REMMIN.NE.0 (WE FOUND AN UNCOLLECTED STRING)
F3.4TH:1618 TEMP3:   BLOCK    2>                       ;USED TO HOLD VARB # OF HIGH LOC FOUND
F3.4TH:1666                                            ;A NEW SIMPLE VARIABLE IS FOUND, AND
F3.4TH:2064 ; LINE IS FOUND BY SEARCHING FOR THE ZERO AT THE END.
F3.4TH:2133 ;       1) ZERO FLAG SET. CARRY NOT SET. LINE NOT FOUND.
F3.4TH:2144 ;          LINE NOT FOUND, [B,C] POINTS TO LINE IN PROGRAM
F3.4TH:2369          JP       NXTRES                   ;IF SIGN SET, RESERVED WORD FOUND
F3.4TH:2372 FOUND:   POP      PSW                      ;TAKE OFF GARBAGE ORIG POINTER
F3.4TH:2701                                            ;HERE WHEN FOUND RIGHT RESERVED WORD
F3.4TH:2756                                            ;SINCE A MATCHING ENTRY WAS FOUND
F3.4TH:3735          JMP      DOCOND>                  ;FOUND THE RIGHT "ELSE" -- GO EXECUTE
F3.4TH:5507 ;       1) IF AN ENTRY IS FOUND, DIMFLG BEING ON INDICATES
F3.4TH:5991 ; HERE WHEN VARIABLE IS NOT FOUND IN THE ARRAY TABLE
F3.4TH:6013 ;       WERE FOUND ON THE INITIAL SEARCH
F3.4TH:7500 ; HERE WHEN FOUND RIGHT RESERVED WORD



*** FPWR2
F4.4TH:3681 FPWR2:   PUSHR                             ;SAVE Y AGAIN



*** FPWRT
F3.4TH: 969          ADRP(FPWRT)>
F4.4TH: 100 INTERNAL FPWRT>   
F4.4TH:3618 FPWRT:   POPR                              ;GET ARG IN REGISTERS, ENTRY TO FPWR IF



*** FSUBT
F3.4TH: 963          ADRP(FSUBT)
F4.4TH:  98 INTERNAL PADDT,FSUBT,FMULTT,FDIVT>
F4.4TH: 198 FSUBT:   POPR>                             ;ENTRY IF ARGUMENT IS ON THE STACK



*** FUNCTS
F3.4TH: 127          FUNCTS==1                         ;ON MEANS USER FUNCTIONS ALLOWED
F3.4TH: 132          FUNCTS==0>
F3.4TH:1114 IFN      FUNCTS,<ADR(DEF)>
F3.4TH:1541 IFN      FUNCTS,< 
F3.4TH:4064 IFE      FUNCTS,< 
F3.4TH:4071 IFN      FUNCTS,< 
F3.4TH:5038 IFN      FUNCTS,< 
F3.4TH:6289 IFN      FUNCTS,< 
F3.4TH:6403 IFN      MULDIM!STRING!FUNCTS,<
F3.4TH:6413 IFN      FUNCTS,< 



*** GETAGN
F3.4TH:4076 GETAGN:  CALL     QINLIN                   ;TYPE '?' AND INPUT A LINE OF TEXT



*** GIVINT
F3.4TH:6271 GIVINT:  MOV      H,A      



*** GOSUB
F3.4TH: 100     GOSUB / INPUT BUG (BUF SMASH)
F3.4TH: 354         "NEXT WITHOUT FOR" ERROR OCCURS. GOSUB EXECUTION
F3.4TH: 362         ON IS A GOSUB ENTRY. THIS ASSURES THAT
F3.4TH: 363         IF YOU GOSUB TO A SECTION OF CODE
F3.4TH: 367         GOSUB ENTRY. THE "RETURN" CODE ELIMINATES THE
F3.4TH: 368         "GOSUB" ENTRY AND ALL "FOR" ENTRIES MADE AFTER
F3.4TH: 369         THE GOSUB ENTRY.
F3.4TH:1082          ADR(GOSUB)
F3.4TH:1230          DCL"RETURN WITHOUT GOSUB"
F3.4TH:1814 ; IT IS ALSO CALLED BY ROUTINES SUCH AS GOSUB AND FOR
F3.4TH:2231 ; GOSUB & FOR CONTEXT. STRING TEMPORARIES ARE FREED
F3.4TH:2249          LXI      H,$CODE                  ;PUT ZERO (NON NEXT, FOR, GOSUB TOKEN)
F3.4TH:2931 GONE2:   SUI      ENDTK                    ;"ON ... GOTO" AND "ON ... GOSUB" COME HERE
F3.4TH:3249 SUBTTL   RUN, GOTO, GOSUB, RETURN
F3.4TH:3268 ; A GOSUB ENTRY ON THE STACK HAS THE FOLLOWING FORMAT
F3.4TH:3273 ;       THE LINE # OF THE THE GOSUB STATEMENT 2 BYTES
F3.4TH:3274 ;       A POINTER INTO THE TEXT OF THE GOSUB 2 BYTES
F3.4TH:3280 GOSUB:   CALL     GETSTK                   ;MAKE SURE THERE IS ROOM
F3.4TH:3291          MVI      D,GOSUTK                 ;LEAVE A GOSUB TOKEN
F3.4TH:3295          INX      SP                       ;THE GOSUB TOKEN TAKES ONLY ONE BYTE
F3.4TH:3347 ; SEE "GOSUB" FOR THE FORMAT OF THE STACK ENTRY
F3.4TH:3349 ; AFTER ELIMINATING ALL THE "FOR" ENTRIES IN FRONT OF THE "GOSUB"
F3.4TH:3362          MVI      E,ERRRG                  ;ERROR ERRRG IS "RETURN WITHOUT GOSUB"
F3.4TH:3367          POP      H                        ;GET LINE # "GOSUB" WAS FROM
F3.4TH:3376                                            ;FROM "GOSUB"
F3.4TH:3378                                            ;SINCE WHEN "GOSUB" STUCK THE TEXT POINTER
F3.4TH:3589          CPI      GOSUTK                   ;AN "ON GOSUB" PERHAPS?



*** IFORDN
F3.4TH:2831 IFORDN:  PUSH     PSW                      ;SAVE THE SIGN OF THE INCREMENT



*** INPUT
F3.4TH: 100     GOSUB / INPUT BUG (BUF SMASH)
F3.4TH: 115          BUFLEN==72                        ;INPUT BUFFER SIZE
F3.4TH: 123          IDONE==1                          ;BIT FOR INPUT DONE
F3.4TH: 125          TTICHN==1                         ;TELETYPE INPUT CHANNEL
F3.4TH: 286         THE INPUT LINE AND A RESERVED WORD TOKEN IS PUT
F3.4TH: 372         THE CODE TO INPUT A LINE, CRUNCH IT,GIVE ERRORS,
F3.4TH: 459         DIGITS AND "." CAUSE FIN (FLOATING INPUT)
F3.4TH: 558         PART OF AN INPUT STRING, OR AS PART OF DATA, STRLIT
F3.4TH: 561         IT WILL BE IF THE STRING IS BEING "INPUT", OR THE
F3.4TH: 669         THE MATH PACKAGE CONTAINS FLOATING INPUT (FIN),
F3.4TH:1043 ; SECOND IN THE RESERVED WORD TABLE ("INP" AND "INPUT")
F3.4TH:1066          ADR(INPUT)
F3.4TH:1580                                            ;USED BY INPUT STATEMENT SINCE THE
F3.4TH:1585                                            ;THERE. REMEMBER INPUT SMASHES BUF,
F3.4TH:1631 FLGINP:  BLOCK    1                        ;FLAGS WHETHER WE ARE DOING INPUT
F3.4TH:1634                                            ;NEWSTT SAVES [H,L] HERE FOR INPUT AND ^C
F3.4TH:1967          JZ       MAIN                     ;IF SO, A BLANK LINE WAS INPUT
F3.4TH:2276                                            ;INPUT IS CRUNCHED
F3.4TH:2277          INX      H>                       ;GET A LINE OF INPUT FROM TTY
F3.4TH:2459 ; THIS IS THE LINE INPUT ROUTINE
F3.4TH:2868          SHLD     TEMP>                    ;USED BY CONTINUE AND INPUT AND CLEAR
F3.4TH:3071          ORA      L                        ;TO "INPUT" AND ^C SETUP OLDTXT
F3.4TH:3989 SUBTTL   INPUT AND READ CODE
F3.4TH:4013 ; IS IMPROPERLY FORMATTED. FOR "INPUT" WE START AGAIN.
F3.4TH:4016 TRMNOK:  LDA      FLGINP                   ;WAS IT READ OR INPUT?
F3.4TH:4019          ORA      A                        ;ZERO=INPUT
F3.4TH:4035                                            ;OF THE "INPUT" STATEMENT
F3.4TH:4036 INPUT:   
F3.4TH:4076 GETAGN:  CALL     QINLIN                   ;TYPE '?' AND INPUT A LINE OF TEXT
F3.4TH:4079 IFN      LENGTH,<INX H                     ;IF NO INPUT WE QUIT
F3.4TH:4096 INPCON:  XRA      A                        ;SET FLAG THAT THIS IS AN INPUT
F3.4TH:4151          OUTCHR                            ;DOUBLE PROMPT WHEN WE NEED MORE INPUT
F3.4TH:4176          JZ       NUMINS>                  ;INPUT A NUMBER IF NUMERIC
F3.4TH:4251                                            ;INPUT STATEMENT
F3.4TH:7280 STAINP:  IN       0                        ;THE INPUT INSTR
F3.4TH:7360 ; IS MERELY A CALL TO FLOATING INPUT (FIN).
F3.4TH:7666          JMP      READY                    ;TYPE "OK" AND ACCEPT INPUT
F3.4TH:7671          STA      CNLCA1                   ;CHANGE ALL THE FLAG INPUT CHANNEL REFERENCES
F3.4TH:7676          INR      A                        ;[A]=DATA INPUT CHANNEL
F3.4TH:7677          STA      CNLCB1                   ;CHANGE ALL THE DATA INPUT CHANNEL REFERENCES
F4.4TH:2312 SUBTTL   FLOATING POINT INPUT ROUTINE
F4.4TH:4339          CALL     QINLIN                   ;GET A LINE OF INPUT
F4.4TH:4477          CHRGET                            ;SEE WHAT THE FIRST CHARACTER OF INPUT WAS



*** INPWRD
F3.4TH:7242          STA      INPWRD+1                 ;GEN INP INSTR
F3.4TH:7245 INPWRD:  IN       0                        ;THE INP INSTR



*** INRART
F3.4TH: 145 EXTERNAL INRART,NEG,FLOAT
F4.4TH:  90 INTERNAL INPRT,LINPRT,MOVFM,MOVMF,MOVFR,MOVRF,MOVRM,NEG,INRART,INXHRT
F4.4TH:1070 INRART:  INR      A                        ;PUT ONE IN A IF NUMBER WAS POSITIVE



*** INTFNC
F4.4TH: 103 INTERNAL ISUB,IMULT,IDIV,ICOMP,INEG,DADD,DSUB,DMULT,DDIV,DCOMP,INTFNC>
F4.4TH:1596 INTFNC:  CPI      4                        ;SEE WHAT KIND OF NUMBER WE HAVE



*** ISUB
F3.4TH: 168 EXTERNAL ISUB,IMULT,IDIV,ICOMP,INEG,DADD,DSUB,DMULT,ODIV,OCOMP,VINT
F3.4TH:1167          ADR(ISUB)
F4.4TH: 103 INTERNAL ISUB,IMULT,IDIV,ICOMP,INEG,DADD,DSUB,DMULT,DDIV,DCOMP,INTFNC>
F4.4TH:1743 ISUB:    MOV      A,H                      ;EXTEND THE SIGN OF (HL) TO B
F4.4TH:1895          MOV      C,A                      ;STORE A ZERO (WE USE THIS METHOD FOR ISUB)



*** LASNUM
F3.4TH:1054          LASNUM==Q                         ;NUMBER OF LAST FUNCTION
F3.4TH:5128          NUMGFN==2*LASNUM-2*ONEFUN+1
F3.4TH:5129          CPI      NUMGFN                   ;IS IT PAST LASNUM?



*** LENGTH
F3.4TH:   4          LENGTH==2                         ;0 MEANS 4K, 1 MEANS 8K, 2 MEANS 12K
F3.4TH:  22 IFE      LENGTH,< 
F3.4TH:  32 IFE      LENGTH-1,<
F3.4TH:  37 IFE      LENGTH-2,<
F3.4TH:  69 IFE      LENGTH,<PRINTX /SMALL/>
F3.4TH:  70 IFE      LENGTH-1,<PRINTX /MEDIUM/>
F3.4TH:  71 IFE      LENGTH-2,<PRINTX /BIG/>
F3.4TH:  82 IFNDEF   LENGTH,<PRINTX !!! MUST HAVE COM !!!
F3.4TH: 111          NUMLEV==17+LENGTH*2               ;NUMBER OF STACK LEVELS RESERVED
F3.4TH: 114          LINLEN==72                        ;TELETYPE LINE LENGTH
F3.4TH: 117 IFE      LENGTH-2,<STRSIZ==3>
F3.4TH: 119 IFE      LENGTH-2,<NUMTMP=5>
F3.4TH: 128                                            ;! CANNOT BE ON WITH LENGTH=0 (SUBFLG)
F3.4TH: 131 IFE      LENGTH,< 
F3.4TH: 151 IFN      LENGTH-2,<
F3.4TH: 158 IFE      LENGTH,<INTERNAL RNDFIX,SQRFIX,SINFIX>
F3.4TH: 165 IFE      LENGTH-2,<
F3.4TH: 546                 LENGTH OF THE STRING
F3.4TH: 551                     STRING IF LENGTH. NE.
F3.4TH: 588             1) FIGURE OUT THE LENGTH OF THEIR RESULT
F3.4TH: 713                    LENGTH, VALUE (EXTRA IF MULDIM ON)
F3.4TH: 740 IFN      LENGTH-2,<
F3.4TH: 747 IFE      LENGTH-2,<
F3.4TH: 789 IFE      LENGTH,<CHRGTR:>
F3.4TH: 813 IFE      LENGTH!CONTRW!LPTSW,<
F3.4TH: 874 IFN      LENGTH,< 
F3.4TH: 899 IFN      LENGTH-2,<
F3.4TH: 901 IFE      LENGTH-2,<
F3.4TH: 908 IFN      LENGTH,<ADR(FRE)
F3.4TH: 933 IFN      LENGTH,< 
F3.4TH: 956 IFE      LENGTH-2,<
F3.4TH: 970 IFN      LENGTH,< 
F3.4TH: 993 IFE      LENGTH-2,<
F3.4TH: 997 IFN      LENGTH,< 
F3.4TH:1014 IFN      LENGTH,< 
F3.4TH:1024 IFN      LENGTH,< 
F3.4TH:1051 IFN      LENGTH,< 
F3.4TH:1090 IFE      LENGTH-2,<
F3.4TH:1099 IFN      LENGTH,<ADR(FNOUT)
F3.4TH:1109 IFN      LENGTH,< 
F3.4TH:1117 IFN      LENGTH,<ADR(CONT)>
F3.4TH:1123 IFE      LENGTH-2,<ADR(DELETE)>
F3.4TH:1133 IFE      LENGTH-2,<
F3.4TH:1185 IFE      LENGTH-2,<
F3.4TH:1522 IFN      LENGTH,< 
F3.4TH:1617 IFN      LENGTH!STRING,<
F3.4TH:1623 IFN      LENGTH,< 
F3.4TH:1645 IFN      LENGTH,< 
F3.4TH:1674 IFE      LENGTH-2,<
F3.4TH:1678 IFE      LENGTH-2,<
F3.4TH:1686 IFE      LENGTH-2 <        
F3.4TH:1691 IFE      LENGTH-2,<BLOCK 35-13>   
F3.4TH:1701 IFN      LENGTH-2,<
F3.4TH:1718 IFN      LENGTH,< 
F3.4TH:1745 IFE      LENGTH,< 
F3.4TH:1748 IFN      LENGTH,< 
F3.4TH:1859 IFE      LENGTH,< 
F3.4TH:1861 IFN      LENGTH,< 
F3.4TH:1867 IFN      LENGTH,< 
F3.4TH:1879 IFN      LENGTH,< 
F3.4TH:1897 IFE      LENGTH-2,<
F3.4TH:1906 IFN      LENGTH-2,<
F3.4TH:1928 IFE      LENGTH,< 
F3.4TH:1934 IFE      LENGTH-2,<
F3.4TH:1992 IFE      LENGTH-2,<
F3.4TH:1996 IFN      LENGTH-2,<
F3.4TH:2092 IFE      LENGTH-2,<
F3.4TH:2181 IFN      LENGTH-2,<
F3.4TH:2183 IFE      LENGTH-2,<
F3.4TH:2194 IFE      LENGTH,< 
F3.4TH:2253 IFN      LENGTH,<SHLD OLDTXT>              ;MAKE CONTINUING ILLEGAL
F3.4TH:2261 IFN      LENGTH,< 
F3.4TH:2327 IFN      LENGTH,<                          ;NOT FOR 4K VERSION
F3.4TH:2380 IFE      LENGTH-2,<
F3.4TH:2488 IFN      LENGTH,< 
F3.4TH:2595 IFN      LENGTH!CONTRW!LPTSW,<
F3.4TH:2657 IFN      LENGTH-2,<
F3.4TH:2731 FOR:     IFN      LENGTH,< 
F3.4TH:2777 IFN      LENGTH-2,<
F3.4TH:2781 IFN      LENGTH-2,<
F3.4TH:2783 IFE      LENGTH-2,<
F3.4TH:2788 IFE      LENGTH-2,<
F3.4TH:2811 IFN      LENGTH-2,<
F3.4TH:2815 IFE      <LENGTH-2>&STRING,<
F3.4TH:2820 IFE      LENGTH-2,<
F3.4TH:2855 IFN      LENGTH,< 
F3.4TH:2865 IFE      LENGTH,< 
F3.4TH:2867 IFN      LENGTH,< 
F3.4TH:2903 IFE      LENGTH-2,                         ;TRACE FEATURE
F3.4TH:2957 IFE      LENGTH,< 
F3.4TH:2960 IFN      LENGTH,< 
F3.4TH:3007 IFE      LENGTH,< 
F3.4TH:3009 IFN      LENGTH,< 
F3.4TH:3060 IFN      LENGTH,< 
F3.4TH:3084 IFN      LENGTH,< 
F3.4TH:3101 IFE      LENGTH-2,<
F3.4TH:3127 IFN      LENGTH-2,<
F3.4TH:3135 IFN      LENGTH,< 
F3.4TH:3143 IFE      LENGTH-2,<
F3.4TH:3206 IFN      LENGTH,< 
F3.4TH:3250 IFN      LENGTH,< 
F3.4TH:3307 IFE      LENGTH,<RNZ                       ;SHOULD END WITH A LINE
F3.4TH:3313 IFN      LENGTH,< 
F3.4TH:3388 IFE      LENGTH-2,<ELSE:>                  ;EXECUTED "ELSE"S ARE SKIPPED
F3.4TH:3411 IFE      LENGTH-2,<
F3.4TH:3481 IFE      LENGTH-2,<
F3.4TH:3491 IFN      LENGTH-2,<
F3.4TH:3524 DNTCPY:  LDAX     D                        ;GET THE LENGTH AND SAVE IT
F3.4TH:3529          STAX     D                        ;PUT 0 IN THE LENGTH FIELD
F3.4TH:3533          POP      PSW                      ;GET LENGTH BACK
F3.4TH:3537 IFN      LENGTH-2,<
F3.4TH:3539 IFE      LENGTH-2,<
F3.4TH:3546 IFE      LENGTH-2,<
F3.4TH:3573 IFN      LENGTH-2,<
F3.4TH:3582 IFN      LENGTH,< 
F3.4TH:3619 IFE      LENGTH,< 
F3.4TH:3624 IFE      LENGTH,< 
F3.4TH:3648 IFE      LENGTH-2,<CPI 44                  ;A COMMA?
F3.4TH:3653 IFN      LENGTH,< 
F3.4TH:3663 IFE      LENGTH,< 
F3.4TH:3685 IFN      LENGTH,< 
F3.4TH:3686 IFE      LENGTH-2,<
F3.4TH:3690 IFN      LENGTH-2,<
F3.4TH:3692 IFE      LENGTH,< 
F3.4TH:3694 IFE      LENGTH-2,<
F3.4TH:3698 IFN      LENGTH-2,<
F3.4TH:3707 IFE      LENGTH-2,<
F3.4TH:3764 IFN      LENGTH,< 
F3.4TH:3790 IFE      LENGTH-2,<
F3.4TH:3797 IFN      LENGTH-2,<
F3.4TH:3824          ADD      M                        ;ADD THIS LENGTH
F3.4TH:3825          CPI      LINLEN                   ;SEE IF GREATER THAN THE LINE LENGTH
F3.4TH:3838 IFE      LENGTH-21
F3.4TH:3843 IFN      LENGTH-2,<
F3.4TH:3861          STA      TTYPOS                   ;MAKE TTYPOS LESS THAN LINE LENGTH
F3.4TH:3937 IFN      LENGTH,<PUSH PSW>                 ;REMEMBER IF [A]=SPCTK OR TABTK
F3.4TH:3938 IFE      LENGTH,< 
F3.4TH:3940 IFN      LENGTH,< 
F3.4TH:3947 IFN      LENGTH,< 
F3.4TH:3952 IFN      LENGTH,< 
F3.4TH:3990 IFN      LENGTH,< 
F3.4TH:4037 IFN      LENGTH,< 
F3.4TH:4079 IFN      LENGTH,<INX H                     ;IF NO INPUT WE QUIT
F3.4TH:4135 IFE      LENGTH,< 
F3.4TH:4142 IFE      LENGTH,< 
F3.4TH:4146 IFN      LENGTH,<JNZ DATLOP>  
F3.4TH:4159 IFE      LENGTH,<POP D                     ;POP OFF POINTER TO THE VARIABLE
F3.4TH:4162 IFN      LENGTH,< 
F3.4TH:4167 IFE      LENGTH-2,<
F3.4TH:4174 IFN      LENGTH-2,<
F3.4TH:4200 IFE      LENGTH-2,<
F3.4TH:4215 IFE      LENGTH-2,<
F3.4TH:4220 IFN      LENGTH-2,<
F3.4TH:4225 IFN      LENGTH,< 
F3.4TH:4250 IFE      LENGTH,<RZ>                       ;DON'T UPDATE DATPTR IF IT WAS AN
F3.4TH:4256 IFN      LENGTH,< 
F3.4TH:4298 DATLOP:  IFN      LENGTH,<CALL DATA>    
F3.4TH:4301 IFE      LENGTH,<POP H>       
F3.4TH:4302 DATFND:  IFN      LENGTH,< 
F3.4TH:4307 IFN      LENGTH,< 
F3.4TH:4317 IFE      LENGTH,<INX H>                    ;SKIP PAST LINE #
F3.4TH:4318 IFN      LENGTH,<POP B        
F3.4TH:4333 IFE      LENGTH,<POP B>       
F3.4TH:4362 IFN      LENGTH,<LXI D,$CODE>              ;FOR THE "NEXT"
F3.4TH:4368 IFE      LENGTH,< 
F3.4TH:4370 IFN      LENGTH,< 
F3.4TH:4385 IFN      LENGTH,< 
F3.4TH:4397 IFE      LENGTH,< 
F3.4TH:4451 IFE      LENGTH,<JMP NEWSTT>  
F3.4TH:4452 IFN      LENGTH,< 
F3.4TH:4472 IFN      LENGTH-2,<
F3.4TH:4528 IFN      LENGTH-2,<
F3.4TH:4536 IFN      LENGTH,< 
F3.4TH:4589 IFE      LENGTH-2,<
F3.4TH:4592 IFN      LENGTH-2,<
F3.4TH:4595 IFN      LENGTH-2,<
F3.4TH:4600 IFN      LENGTH-2,<
F3.4TH:4604 IFE      LENGTH,< 
F3.4TH:4615 IFN      LENGTH-2,<
F3.4TH:4624 IFN      LENGTH,< 
F3.4TH:4633 IFN      LENGTH,< 
F3.4TH:4637 IFN      LENGTH,< 
F3.4TH:4639 IFE      LENGTH,< 
F3.4TH:4640          LHLD     TEMP2>                   ;IF WE DONT HAVE "LENGTH"
F3.4TH:4646                                            ;IF LENGTH IS ON WE HAVE TO
F3.4TH:4655 IFE      LENGTH-2,<
F3.4TH:4994 IFN      LENGTH-2,<
F3.4TH:5032 IFN      LENGTH,< 
F3.4TH:5075 IFE      LENGTH-2,<
F3.4TH:5079 IFN      LENGTH-2,<
F3.4TH:5083 IFN      LENGTH-2,<
F3.4TH:5106 IFE      LENGTH-2,<
F3.4TH:5113 IFN      LENGTH-2,<
F3.4TH:5188 IFE      LENGTH-2,<
F3.4TH:5217 IFE      LENGTH,< 
F3.4TH:5220 IFN      LENGTH,< 
F3.4TH:5226          IF       LENGTH-2,<
F3.4TH:5246 IFN      LENGTH-2,<
F3.4TH:5247 IFN      LENGTH,< 
F3.4TH:5332 IFN      LENGTH-2,<
F3.4TH:5336          PUSHM                             ;SAVE LENGTH
F3.4TH:5340                                            ;[E] HAS THE LENGTH
F3.4TH:5344 IFE      LENGTH-2,<
F3.4TH:5349          MOV      A,M                      ;SAVE THE LENGTH OF THE FAC STRING IN [A]
F3.4TH:5357          PUSH     PSW                      ;SAVE THE FAC STRING LENGTH
F3.4TH:5363          POP      D                        ;[D]=LENGTH OF FAC STRING
F3.4TH:5364          MOV      E,M                      ;[E]=LENGTH OF STACK STRING
F3.4TH:5371          ORA      D                        ;TEST BY OR'ING THE LENGTHS TOGETHER
F3.4TH:5373          MOV      A,D                      ;GET FACLO STRING LENGTH
F3.4TH:5395 IFN      LENGTH,< 
F3.4TH:5403 IFE      LENGTH-2,<
F3.4TH:5410 IFN      LENGTH-2,<
F3.4TH:5430 IFE      LENGTH-2,<
F3.4TH:5542 IFN      LENGTH-2,<
F3.4TH:5546 IFE      LENGTH,< 
F3.4TH:5548 IFN      LENGTH,< 
F3.4TH:5561 IFN      LENGTH,< 
F3.4TH:5572 IFE      LENGTH-2,<
F3.4TH:5599 IFN      LENGTH-2,<
F3.4TH:5610 IFN      LENGTH,< 
F3.4TH:5621 IFN      LENGTH,< 
F3.4TH:5627 IFE      LENGTH-2,<
F3.4TH:5674          MOV      C,H                      ;[B,C]=LENGTH OF THIS VARIABLE
F3.4TH:5677          INX      B                        ;MAKE THE LENGTH INCLUDE
F3.4TH:5681 IFN      LENGTH-2,<
F3.4TH:5736 IFE      LENGTH-2,<
F3.4TH:5745 IFE      LENGTH-2,<
F3.4TH:5748 IFN      LENGTH-2,<
F3.4TH:5787                                            ;LENGTH ONTO [H,L]
F3.4TH:5802          PUSHM                             ;PUSH LENGTH OF VARIABLE
F3.4TH:5810 MAKDFN:  POP      D                        ;POP OFF LENGTH OF THIS VARIABLE
F3.4TH:5811          DCX      D                        ;DECREMENT LENGTH SO WE CAN
F3.4TH:5818          JNC      ERROR                    ;SINCE LENGTH REALLY HAS AN
F3.4TH:5820                                            ;IF INDEX-LENGTH DOESN'T CARRY
F3.4TH:5843          MOV      M,E                      ;PUT LENGTH DOWN
F3.4TH:5869 ; LENGTH OF ARRAY IN CORE IN BYTES (DOES NOT INCLUDE DESCRIPTOR)
F3.4TH:5929 IFE      LENGTH-2,<
F3.4TH:5936 IFE      LENGTH-2,<
F3.4TH:5950 IFE      LENGTH-2,<
F3.4TH:5954          MOV      E,M                      ;[D,E]=LENGTH
F3.4TH:6016 IFE      LENGTH-2,<
F3.4TH:6022 IFN      LENGTH-2,<
F3.4TH:6167 IFE      LENGTH-2,<
F3.4TH:6191 IFN      LENGTH-2,<
F3.4TH:6208 IFN      LENGTH,< 
F3.4TH:6218 IFE      LENGTH-2,<
F3.4TH:6225 IFN      LENGTH-2,<
F3.4TH:6247 IFE      LENGTH-1,<
F3.4TH:6254 IFN      LENGTH-2,<
F3.4TH:6262 IFE      LENGTH-2,<
F3.4TH:6275 IFN      LENGTH,< 
F3.4TH:6282 IFN      LENGTH-2,<
F3.4TH:6325 IFN      LENGTH-2,<
F3.4TH:6352 IFN      LENGTH-21
F3.4TH:6382 IFN      LENGTH-2,<
F3.4TH:6384 IFE      LENGTH-2,<
F3.4TH:6445 IFN      LENGTH-2,<
F3.4TH:6448 IFE      STRING&<LENGTH-2>,<JMP     PTRGT2>> 
F3.4TH:6460 IFN      LENGTH-2,<
F3.4TH:6480 ; WHICH HAS THE STRING INFO (LENGTH, WHERE COPIED TO)
F3.4TH:6482 STRCPY:  MOV      A,M                      ;GET LENGTH
F3.4TH:6484 IFN      LENGTH-2,<
F3.4TH:6512 IFN      LENGTH-2,<
F3.4TH:6587 IFE      LENGTH-2,<
F3.4TH:6596 IFN      LENGTH-2,<
F3.4TH:6628 IFE      LENGTH-2,<
F3.4TH:6629          CALL     GETBCD                   ;[D]=LENGTH [B,C]=POINTER AT DATA
F3.4TH:6634 STRPR2:  DCR      D>                       ;DECREMENT THE LENGTH
F3.4TH:6635 IFN      LENGTH-2,<
F3.4TH:6636          CALL     MOVRM                    ;GET LENGTH IN [E]
F3.4TH:6661 TRYGI2:  POP      PSW                      ;IN CASE COLLECTED WHAT WAS LENGTH?
F3.4TH:6749 IFE      LENGTH-2,<
F3.4TH:6764 IFN      LENGTH-2,<
F3.4TH:6781 IFE      LENGTH-2,<
F3.4TH:6784          CALL     MOVRM                    ;GET LENGTH OF ARRAY IN [B,C]
F3.4TH:6787 IFN      LENGTH-2,<
F3.4TH:6791 IFE      LENGTH-2,<
F3.4TH:6797 IFN      LENGTH-2,<
F3.4TH:6823 IFE      LENGTH-2,<
F3.4TH:6832 IFN      LENGTH-2,<
F3.4TH:6834 DVARS:   PUSHM                             ;SAVE LENGTH
F3.4TH:6837          POP      B                        ;POP OF STRING LENGTH
F3.4TH:6839          MOV      A,C                      ;GET LENGTH OF STRING
F3.4TH:6883 IFN      LENGTH-2,<
F3.4TH:6885          MOV      L,M                      ;[L]=STRING LENGTH
F3.4TH:6935          ADD      M                        ;ADD TWO LENGTHS TOGETHER
F3.4TH:6975 IFE      LENGTH-21
F3.4TH:6976          MOV      A,M                      ;[A]=STRING LENGTH
F3.4TH:6981          MOV      L,A>                     ;[L]=STRING LENGTH
F3.4TH:6982 IFN      LENGTH-2,<
F3.4TH:6983          PUSHM                             ;GET LENGTH ON STACK
F3.4TH:7011 ; AT IT. "LET" FOOLS FRETMP BY SETTING THE LENGTH OF THE
F3.4TH:7029 IFN      LENGTH-2,<
F3.4TH:7043          MOV      C,M                      ;[C]=LENGTH OF THE STRING FREED UP
F3.4TH:7060 ; THE FUNCTION LEN($) RETURNS THE LENGTH OF THE
F3.4TH:7072 IFN      LENGTH-2,<
F3.4TH:7075          ORA      A                        ;SET CONDITION CODES ON LENGTH
F3.4TH:7088 IFN      LENGTH-2,<
F3.4TH:7130          MOV      A,M                      ;GET STRING LENGTH
F3.4TH:7132          JC       ALLSTR                   ;IF #CHARS ASKED FOR.GE.LENGTH, YES
F3.4TH:7135          MOV      A,B                      ;GET TRUNCATED LENGTH OF STRING
F3.4TH:7147 IFN      LENGTH-2,<
F3.4TH:7220          MVI      B,0                      ;ASSUME NULL LENGTH STR
F3.4TH:7227          MOV      B,A                      ;GET CALCED LENGTH IN B
F3.4TH:7229          MOV      B,E                      ;USE TRUNCATED LENGTH
F3.4TH:7231 IFN      LENGTH,< 
F3.4TH:7298          POP      D                        ;GET LENGTH OF ARG OFF STACK
F3.4TH:7300          MOV      B,E                      ;SAVE INIT LENGTH
F3.4TH:7303 IFE      LENGTH-2,<
F3.4TH:7311 IFN      LENGTH-2,<
F3.4TH:7314 IFN      LENGTH,< 
F3.4TH:7327 IFN      STRING!LENGTH,<
F3.4TH:7329 IFE      LENGTH-2,<
F3.4TH:7339 IFN      LENGTH-2,<
F3.4TH:7368          MOV      E,A                      ;GET LENGTH OF STR
F3.4TH:7369 IFN      LENGTH-2,<
F3.4TH:7397 IFE      LENGTH-2,<
F3.4TH:7575          PUSHM                             ;[C]=LENGTH [H,L]=POINTER
F3.4TH:7674 IFN      LENGTH,< 
F3.4TH:7763 IFN      LENGTH,< 
F3.4TH:7764 IFE      LENGTH-2,<
F3.4TH:7769 IFN      LENGTH-2,<
F3.4TH:7775 IFE      LENGTH-2,<
F3.4TH:7784 IFN      LENGTH-2,<
F4.4TH:   4          LENGTH==1                         ;0 MEANS 4K, 1 MEANS 8K, 2 MEANS 12K
F4.4TH:  19 IFE      LENGTH,< 
F4.4TH:  29 IFE      LENGTH-1,<
F4.4TH:  34 IFE      LENGTH-2,<
F4.4TH:  66 IFE      LENGTH,<PRINTX /SMALL/>
F4.4TH:  67 IFE      LENGTH-1,<PRINTX /MEDIUM/>
F4.4TH:  68 IFE      LENGTH-2,<PRINTX /BIG/>
F4.4TH:  79 IFNDEF   LENGTH,< 
F4.4TH:  93 IFN      MULDIM&<LENGTH-2>,<
F4.4TH:  97 IFN      LENGTH-2,<
F4.4TH:  99 IFE      LENGTH-1,<
F4.4TH: 101 IFE      LENGTH-2,<
F4.4TH: 108 IFE      LENGTH-2,<
F4.4TH: 115 IFE     LENGTH-2,<
F4.4TH: 123 IFE     LENGTH-2,<
F4.4TH: 127 IFE     LENGTH-2,<BLOCK ^D<30-13>>
F4.4TH: 195 IFE      LENGTH-1,<
F4.4TH: 197 IFN      LENGTH-2,<
F4.4TH: 208 IFN      LENGTH-2,<
F4.4TH: 243 IFN      LENGTH,  
F4.4TH: 287 IFE      LENGTH,< 
F4.4TH: 289 IFN      LENGTH,< 
F4.4TH: 327 IFE      LENGTH,< 
F4.4TH: 341 IFN      LENGTH,< 
F4.4TH: 433 IFE      LENGTH,< 
F4.4TH: 518 IFE      LENGTH,< 
F4.4TH: 520 IFN      LENGTH,  
F4.4TH: 541 IFE      LENGTH,  
F4.4TH: 543 IFN      LENGTH,< 
F4.4TH: 561 IFE      LENGTH,< 
F4.4TH: 672 IFN      LENGTH-2,<
F4.4TH: 711 IFN      LENGTH,< 
F4.4TH: 717 IFE      LENGTH,< 
F4.4TH: 719 IFN      LENGTH,< 
F4.4TH: 736 IFE      LENGTH,< 
F4.4TH: 738 IFN      LENGTH,  
F4.4TH: 744 IFE      LENGTH,< 
F4.4TH: 754 IFE      LENGTH,< 
F4.4TH: 759 IFN      LENGTH,< 
F4.4TH: 776 IFN      LENGTH,< 
F4.4TH: 780 IFN      LENGTH,< 
F4.4TH: 793 IFN      LENGTH-2,<
F4.4TH: 803 IFE      LENGTH-2,<
F4.4TH: 912 IFE      LENGTH,< 
F4.4TH: 914 IFN      LENGTH,< 
F4.4TH: 957 IFE      LENGTH-2,<
F4.4TH:1002 IFE      LENGTH,< 
F4.4TH:1015 IFN      LENGTH,  
F4.4TH:1076 IFN      LENGTH-2,<
F4.4TH:1112 IFE      LENGTH-2,<
F4.4TH:1133 IFE      LENGTH-2,<
F4.4TH:1243 IFE      LENGTH-2,<
F4.4TH:1285 IFE      LENGTH-2,<
F4.4TH:1379 IFE      LENGTH-2,
F4.4TH:1434 IFE      LENGTH-2,<
F4.4TH:1584 IFN      LENGTH-2,<
F4.4TH:1586 IFE      LENGTH-2,<
F4.4TH:1595 IFE      LENGTH-2,<
F4.4TH:1636 IFE      LENGTH-2,<
F4.4TH:1688 IFN      MULDIM&<LENGTH-2>,<
F4.4TH:1721 IFE      LENGTH-2,<
F4.4TH:1939 IFE      LENGTH-2,<
F4.4TH:2338 IFN      LENGTH-2,<
F4.4TH:2443 IFE      LENGTH-2,<
F4.4TH:2547 IFN      LENGTH-2,<
F4.4TH:2551 IFE      LENGTH-2,<
F4.4TH:2562 IFE      LENGTH-2,<
F4.4TH:2577 IFN      LENGTH-2,<
F4.4TH:2607 IFE      LENGTH-2,<
F4.4TH:2675 IFN      LENGTH-2,<
F4.4TH:2679 IFE      LENGTH-2,<
F4.4TH:2714 IFN      LENGTH-2,<
F4.4TH:2722 IFE      LENGTH-2,<
F4.4TH:2733 IFE      LENGTH-2,<
F4.4TH:2734          PUSH     B                        ;PUT DUMMY FIELD LENGTHS ON STACK
F4.4TH:2741 IFN      LENGTH-2,<
F4.4TH:2995 IFE      LENGTH-2,<
F4.4TH:3038          PUSH     B                        ;SAVE THE FIELD LENGTH SPECIFICATIONS
F4.4TH:3215          POP      D                        ;GET THE FIELD LENGTHS
F4.4TH:3220          PUSH     D                        ;SAVE THE FIELD LENGTHS AGAIN
F4.4TH:3222          POP      D                        ;GET THE FIELD LENGTHS BACK
F4.4TH:3243 ; FIELD LENGTH
F4.4TH:3356          POP      B                        ;GET THE FIELD LENGTH SPECS
F4.4TH:3360          PUSH     B                        ;SAVE THE FIELD LENGTH SPECS AGAIN
F4.4TH:3383          POP      D                        ;GET THE FIELD LENGTH SPECS
F4.4TH:3471          POP      B                        ;GET THE FIELD LENGTH SPECS
F4.4TH:3499          MOV      A,C                      ;PRINT TRAILING ZEROS IF THE FIELD LENGTH IS
F4.4TH:3885 IFN      LENGTH-2,<
F4.4TH:3887 IFE      LENGTH-2,<
F4.4TH:4258 IFN      LENGTH,  
F4.4TH:4290 IFN      LENGTH,< 
F4.4TH:4422 IFN      LENGTH,  
F4.4TH:4782 IFE      LENGTH,<DC"[FOUR-K VERSION]">
F4.4TH:4783 IFE      LENGTH-1,<DC"[EIGHT-K VERSION]">
F4.4TH:4801 IFE      LENGTH-2,<DC"[BIG VERSION]">
F4.4TH:4822 IFE      LENGTH,< 
F4.4TH:4824 IFN      LENGTH,< 



*** LENGTH-2,<NUMTMP
F3.4TH: 119 IFE      LENGTH-2,<NUMTMP=5>



*** LENGTH-2,<STRSIZ
F3.4TH: 117 IFE      LENGTH-2,<STRSIZ==3>



*** LESSTK
F3.4TH:1036          LESSTK=Q 
F3.4TH:3632          NUMREL=LESSTK-GREATK+1            ;NUMBER OF RELATIONAL OPERATORS
F3.4TH:4544          NMREL==LESSTK-GREATK+1



*** LISTEN
F3.4TH: 126          LISTEN==0                         ;ON MEANS LISTEN FOR C
F3.4TH: 130          LISTEN==1>
F3.4TH:2672 IFN      LISTEN,< 
F3.4TH:2854 IFN      LISTEN,< 
F3.4TH:2995 IFN      LISTEN,< 
F3.4TH:7415 IFN      LISTEN,< 



*** LLIST
F3.4TH:1001 IFN      LPTSW,<DCI"LLIST">
F3.4TH:1122 IFN      LPTSW,<ADR(LLIST)>
F3.4TH:2659 LLIST:   MVI      A,1                      ;GET NON ZERO VALUE
F3.4TH:7396 SUBTTL   FANCY LIST, DELETE, EDIT, LLIST
F3.4TH:7399 LLIST:   MVI      A,1                      ;GET NON ZERO VALUE



*** LOOPDN
F3.4TH:4445 LOOPDN:  SPHL                              ;ELIMINATE THE FOR ENTRY



*** LPOS
F3.4TH: 912 IFN      LPTSW,<ADR(LPOS)>
F3.4TH:1047 IFN      PTSW,<DCI"LPOS">
F3.4TH:6277 LPOS:    LDA      LPTPOS   



*** LPRINT
F3.4TH: 996 IFN      LPTSW,<DCI"LPRINT">
F3.4TH:1108 IFN      LPTSW,<ADR(LPRINT)>
F3.4TH:2873 IFN      LPTSW,<XRA A                      ;FORCE PRINT TO GO TO TTY AFTER LPRINT
F3.4TH:3743 LPRINT:  MVI      A,1                      ;SAY NON ZERO



*** LPTSW
F3.4TH:   8          LPTSW==0 
F3.4TH:  16          LPTSW==0                          ;SIMULATOR DEFAULTS
F3.4TH:  27          LPTSW==0 
F3.4TH:  76 IFN      LPTSW,<PRINTX /LPT/>
F3.4TH: 163 IFN      LPTSW,<  
F3.4TH: 813 IFE      LENGTH!CONTRW!LPTSW,<
F3.4TH: 912 IFN      LPTSW,<ADR(LPOS)>
F3.4TH: 996 IFN      LPTSW,<DCI"LPRINT">
F3.4TH:1001 IFN      LPTSW,<DCI"LLIST">
F3.4TH:1108 IFN      LPTSW,<ADR(LPRINT)>
F3.4TH:1122 IFN      LPTSW,<ADR(LLIST)>
F3.4TH:1590 IFN      LPTSW,<  
F3.4TH:1940 READY:   IFN      LPTSW,<  
F3.4TH:2256 IFN      LPTSW,<  
F3.4TH:2544 IFN      LPTSW,<  
F3.4TH:2595 IFN      LENGTH!CONTRW!LPTSW,<
F3.4TH:2658 IFN      LPTSW,<  
F3.4TH:2873 IFN      LPTSW,<XRA A                      ;FORCE PRINT TO GO TO TTY AFTER LPRINT
F3.4TH:3742 IFN      LPTSW,<  
F3.4TH:3812 IFN      LPTSW,<  
F3.4TH:3855 CRDO:    IFN      LPTSW,<  
F3.4TH:3899 COMPRT:  IFN      LPTSW,<  
F3.4TH:3957 IFN      LPTSW,<  
F3.4TH:6276 IFN      LPTSW,<  
F3.4TH:7398 IFN      LPTSW,<  
F4.4TH:   7          LPTSW==0 
F4.4TH:  13          LPTSW==0                          ;SIMULATOR DEFAULTS
F4.4TH:  24          LPTSW==0 
F4.4TH:  72 IFN      LPTSW,<PRINTX /LPT/>
F4.4TH:4606 IFN      LPTSW,<  



*** MOD
F3.4TH: 842 ; AND NO OTHER REGISTERS ARE MODIFIED.
F3.4TH:1922          MOV      A,H                      ;SEE IF IN DIRECT MODE
F3.4TH:1924          INR      A                        ;ZERO SAYS DIRECT MODE
F3.4TH:1950          SHLD     CURLIN                   ;SETUP CURLIN FOR DIRECT MODE
F3.4TH:2599          CPI      LINLEN                   ;MODIFIED BY "TERMINAL WIDTH?" QUESTION IN INIT
F3.4TH:3923 MORCOM:  SUI      CLMWID                   ;GET [A] MODULUS CLMWID
F3.4TH:3931                                            ;WE PRINT CLMWID-[A] MOD CLMWID SPACES
F3.4TH:6415 ; SUBROUTINE TO SEE IF WE ARE IN DIRECT MODE AND
F3.4TH:6999 ; THIS VALUE IS RETURNED IN [H,L], ALL THE OTHER REGISTERS ARE MODIFIED.
F3.4TH:7384          POP      B                        ;GET THE MODIFIED CHARACTER OF THE NEXT
F3.4TH:7386          POP      H                        ;GET THE POINTER TO THE MODIFIED CHARACTER
F3.4TH:7389                                            ;WE ARE MODIFYING [MEMSIZ] AND
F3.4TH:7683 ; INTO [A] WITHOUT MODIFYING ANYTHING BUT [A] AND THE CONDITION
F3.4TH:7693 ; WITHOUT MODIFYING ANYTHING
F4.4TH:1827          PUSH     D                        ;IT IS POSITIVE, SAVE REMAINDER FOR MOD
F4.4TH:1829          POP      D                        ;GET MOD'S REMAINDER BACK
F4.4TH:1927 ; MOD OPERATOR
F4.4TH:1930 MOD:     PUSH     D                        ;SAVE (DE) FOR ITS SIGN
F4.4TH:3369 FFXXV1:  SUI      3                        ;REDUCE A MOD 3



*** MULDIM
F3.4TH:  24          MULDIM==0                         ;ON MEANS MULTIPLE DIMENSIONED ARRAYS ALLOWED
F3.4TH:  34          MULDIM==1
F3.4TH:  39          MULDIM==1
F3.4TH: 156 IFN      MULDIM,<INTERNAL BSERR>   
F3.4TH: 157 IFN      MULDIM,<EXTERNAL UMULT>   
F3.4TH: 516         ARE ALLOWED IS DESCRIBED IN THE "MULDIM" CODE.
F3.4TH: 713                    LENGTH, VALUE (EXTRA IF MULDIM ON)
F3.4TH:5754 IFE      MULDIM,< 
F3.4TH:5862 IFN      MULDIM,< 
F3.4TH:6403 IFN      MULDIM!STRING!FUNCTS,<
F4.4TH:  21          MULDIM==0                         ;ON MEANS MULTIPLE DIMENSIONED ARRAYS ALLOWED
F4.4TH:  31          MULDIM==1
F4.4TH:  36          MULDIM==1
F4.4TH:  93 IFN      MULDIM&<LENGTH-2>,<
F4.4TH:1688 IFN      MULDIM&<LENGTH-2>,<



*** NOTSTV
F3.4TH:4535 NOTSTV:  MOV      A,M                      ;GET NEXT CHARACTER



*** NULL
F3.4TH: 536         REPRESENTS THE NULL STRING). THE ONLY DIFFERENCE
F3.4TH: 647                IF THE STRING IS NOT NULL AND ITS POINTER IS
F3.4TH: 834 NULCNT:  1                                 ;STORE HERE THE NUMBER OF NULLS
F3.4TH:1103          ADR(NULL)
F3.4TH:3085 NULL:    CALL     GETBYT   
F3.4TH:3097          STA      NULCNT                   ;CHANGE NUMBER OF NULLS
F3.4TH:3527          XRA      A                        ;SET IT TO 0 -- ELIMINATING NULL
F3.4TH:3869 CRFIN:   LDA      NULCNT                   ;GET NUMBER OF NULLS
F3.4TH:3876          RZ                                ;ALL NULLS DONE [A]=0
F3.4TH:3880          XRA      A                        ;[A]= A NULL
F3.4TH:3883          JMP      PRTNUL                   ;LOOP PRINTING NULLS
F3.4TH:6633                                            ;TO CHECK FOR NULL STRING
F3.4TH:6826          ORA      M                        ;SEE IF ITS THE NULL STRING
F3.4TH:6841          RZ                                ;NULL STRING, RETURN
F3.4TH:7084          JZ       FCERR                    ;NULL STR, BAD ARG.
F3.4TH:7185 ; ONWARD. IF # IS GT LEN($) THEN RETURN NULL STRING,
F3.4TH:7220          MVI      B,0                      ;ASSUME NULL LENGTH STR
F3.4TH:7222          RNC                               ;YES, JUST USE NULL STR
F3.4TH:7365          JZ       ZERO                     ;RETURN ZERO IF NULL
F3.4TH:7603          DCR      C                        ;TEST FOR NULL



*** NUMLEV
F3.4TH: 111          NUMLEV==17+LENGTH*2               ;NUMBER OF STACK LEVELS RESERVED
F3.4TH:1842 ; [H,L] IS EXAMINED TO MAKE SURE AT LEAST NUMLEV
F3.4TH:1848          LXI      H,$CODE+65536-2*NUMLEV   ;SETUP OFFSET OF GUARANTEED



*** NUMTMP
F3.4TH: 118          NUMTMP==3                         ;NUMBER OF STRING TEMPORARIES
F3.4TH: 119 IFE      LENGTH-2,<NUMTMP=5>
F3.4TH:1614 TEMPST:  BLOCK    STRSIZ*NUMTMP            ;STORAGE FOR NUMTMP TEMP DESCRIPTORS



*** ONGOTO
F3.4TH:1101          ADR(ONGOTO)
F3.4TH:3584 ONGOTO:  CALL     GETBYT                   ;GET VALUE INTO [E]



*** OUTDO
F3.4TH: 146 INTERNAL OUTDO,STROUI
F3.4TH: 807 OUTDO:   PUSH     PSW      



*** OUTWRD
F3.4TH:7254 OUTWRD:  OUT      0                        ;DO IT
F3.4TH:7321          STA      OUTWRD+1                 ;SETUP "OUT"



*** PATCH
F3.4TH: 254     FUNCTION DISPATCH ADDRESSES
F3.4TH: 280         TABLE DISPATCHES TO PERFORM FUNCTIONS, STATEMENTS,
F3.4TH: 291     STATEMENT DISPATCH ADDRESSES
F3.4TH: 301         TO DISPATCH TO IS FETCHED FROM STMDSP (THE STATEMENT
F3.4TH: 302         DISPATCH TABLE) USING THE RESERVED WORD
F3.4TH: 387         NAME BEFORE DISPATCHING. WHEN RETURNING
F3.4TH: 895 SUBTTL   DISPATCH TABLES, RESERVED WORDS, ERROR TEXT ... ALL CONSTANT
F3.4TH:2284 ; BY ALLOWING FOR TABLE DISPATCH DURING EXECUTION.
F3.4TH:2948          LXI      H,STMDSP                 ;STATEMENT DISPATCH TABLE
F3.4TH:3547          ANI      6                        ;SETUP DISPATCH TO FORCE
F3.4TH:3566          PCHL                              ;DISPATCH TO FORCE
F3.4TH:3599          MOV      A,B                      ;PUT DISPATCH CHARACTER IN PLACE
F3.4TH:4494 ; TO DETERMINE PRECEDENCE AND DISPATCH ADDRESSES FOR
F3.4TH:4783                                            ;[E]=DISPATCH OFFSET FOR
F3.4TH:4861          MVI      B,0                      ;SPECIAL DISPATCH FOR SPEED
F3.4TH:4872          PUSH     B                        ;DISPATCH
F3.4TH:4902          LXI      H,DBLDSP                 ;DISPATCH TO A DOUBLE PRECISION ROUTINE
F3.4TH:4908          RLC                               ;CREATE A DISPATCH OFFSET, SINCE
F3.4TH:4959 SNGDO:   LXI      H,SNGDSP                 ;SETUP THE DISPATCH ADDRESS
F3.4TH:4963          JMP      DODSP                    ;DISPATCH
F3.4TH:5179          JMP      FINGO>                   ;DISPATCH TO FUNCTION
F3.4TH:5213 FINGO:   LXI      B,FUNDSP                 ;FUNCTION DISPATCH TABLE
F3.4TH:7652 PATCH:   BLOCK    20>      



*** PATLPT
F3.4TH:2564 PATLPT:  BLOCK    20       



*** PEEK
F3.4TH: 934          ADR(PEEK)>
F3.4TH:7762 SUBTTL   PEEK AND POKE
F3.4TH:7765 PEEK:    CALL     FRCINT                   ;GET AN INTEGER IN [H,L]
F3.4TH:7770 PEEK:    CALL     POSINT                   ;GET THE VALUE OF FACLO INTO [D,E]
F3.4TH:7796 ; NOTE: IN THE 8K PEEK ONLY ACCEPTS POSITIVE NUMBERS UP TO 32767



*** POKE
F3.4TH:1110          ADR(POKE)>
F3.4TH:7762 SUBTTL   PEEK AND POKE
F3.4TH:7776 POKE:    CALL     FRMEVL   
F3.4TH:7785 POKE:    CALL     INTID2                   ;READ LOCATION TO POKE
F3.4TH:7797 ; POKE WILL ONLY TAKE AN ADDRESS UP TO 32767 , NO



*** PTRGT2
F3.4TH:5534 PTRGT2:  CALL     ISLET                    ;CHECK FOR LETTER
F3.4TH:6446 IFN      STRING,<CALL PTRGT2               ;REALLY GET THE POINTER
F3.4TH:6448 IFE      STRING&<LENGTH-2>,<JMP     PTRGT2>> 



*** PUFOUT
F3.4TH: 167 EXTERNAL VMOVMF,VMOVFM,FRCINT,FRCSNG,FRCDBL,VNEG,PUFOUT,OCXBRT,IADD
F4.4TH: 102 INTERNAL VMOVMF,VMOVFM,FRCINT,PRCSNG,FRCDBL,VNEG,PUFOUT,DCXBRT,IADD
F4.4TH:3036 PUFOUT:  CALL     FOUINI                   ;SAVE THE FORMAT SPECIFICATION IN A AND PUT



*** PURE
F3.4TH:   7          PURE==0                           ;ON FOR PURE CODE
F3.4TH:  13          RAMBOT=^O20000                    ;BOTTOM LOCATION OF RAM FOR PURE SWITCH
F3.4TH:  75 IFN      PURE,<PRINTX /PURE/>
F3.4TH: 319     IMPURE STORAGE
F3.4TH:6037                                            ;!!IMPURE!! PCHL TO CONFUSE DISASSEMBLY



*** RAMBOT
F3.4TH:  13          RAMBOT=^O20000                    ;BOTTOM LOCATION OF RAM FOR PURE SWITCH



*** REALIO
F3.4TH:   5          REALIO==1
F3.4TH:  15 IFE      REALIO,< 
F3.4TH:  72 IFE      REALIO,<PRINTX /SIMULATE/>
F3.4TH:  73 IFN      REALIO,<PRINTX /ON MACHINE/>
F3.4TH: 129 IFN      REALIO,< 
F3.4TH: 137 IFN      REALIO,< 
F3.4TH: 999 IFE      REALIO,< 
F3.4TH:1119 IFE      REALIO,<ADR(DDT)>
F3.4TH:2469 IFN      REALIO,< 
F3.4TH:2474 INLINN:  IFN      REALIO,< 
F3.4TH:2533 IFN      REALIO,< 
F3.4TH:2543 IFN      REALIO,<                          ;MITS I/O
F3.4TH:2612 IFN      REALIO,< 
F3.4TH:2628 INCHR:   IFN      REALIO,< 
F3.4TH:3055 IFE      REALIO,< 
F3.4TH:6703 IFE      REALIO,< 
F3.4TH:7670 IFN      REALIO,< 
F4.4TH:   5          REALIO==1
F4.4TH:  12 IFE      REALIO,< 
F4.4TH:  69 IFE      REALIO,<PRINTX /SIMULATE/>
F4.4TH:  70 IFN      REALIO,<PRINTX /ON MACHINE/>
F4.4TH:4237 IFN      REALIO,< 
F4.4TH:4332 IFN      REALIO,  
F4.4TH:4385 IFE      REALIO,< 



*** REMTK
F3.4TH: 992          REMTK=Q  
F3.4TH:2411 NODATT:  SUI      REMTK-":">
F3.4TH:2413 IFE      STRING,<SUI REMTK>                ;WAS IT A REM STATEMENT



*** REPINI
F3.4TH: 135 INTERNAL .C1,BUF,READY,REASON,SNERR,OMERR,REPINI
F3.4TH:1956 REPINI:  CALL     INIT                     ;PRINT IT, REPLACED BY CALL STROUT
F4.4TH:4600          SHLD     REPINI##+1



*** RNDFIX
F3.4TH: 158 IFE      LENGTH,<INTERNAL RNDFIX,SQRFIX,SINFIX>
F3.4TH: 917 RNDFIX:  ADR(RND) 
F4.4TH:4628          ADR(RNDFIX)



*** SCRATH
F3.4TH:1130          ADR(SCRATH)
F3.4TH:2177 SCRATH:  RNZ                               ;MAKE SURE THERE IS A TERMINATOR



*** SCRATK
F3.4TH:1005          SCRATK=Q 
F3.4TH:2936          NUMCMD=SCRATK-ENDTK+1



*** SGN
F3.4TH: 897 FUNDSP:  ADR(SGN) 
F4.4TH:  89 INTERNAL PUSHF,ABS,INT,QINT,SGN,SQR,RND,SIN,FCOMP,SIGNC,OVERR
F4.4TH:1050 SUBTTL   SIGN, SGN, FLOAT, NEG AND ABS
F4.4TH:1074 ; SGN FUNCTION
F4.4TH:1077 SGN:     FSIGN>                            ;GET SIGN OF FAC IN A
F4.4TH:1143 ; SGN FUNCTION
F4.4TH:1145 SGN:     CALL     VSIGN                    ;GET THE SIGN OF THE FAC IN A
F4.4TH:1456                                            ;ENTRY FROM SGN, FIN, LINPRT



*** SQRFIX
F3.4TH: 158 IFE      LENGTH,<INTERNAL RNDFIX,SQRFIX,SINFIX>
F3.4TH: 915 SQRFIX:  ADR(SQR) 
F4.4TH:4631          ADR(SQRFIX)



*** SQRTK
F3.4TH:1048          SQRTK==Q 
F3.4TH:5194          BOTCON==<SQRTK-ONEFUN>*2



*** START
F3.4TH:  84          MCSSIM(START)
F3.4TH: 103     RESTART AT 0 SHOULD GO THROUGH STKINI
F3.4TH: 182     0   STARTUP
F3.4TH: 185         RESTARTING THE MACHINE AT 0 DURING PROGRAM
F3.4TH: 347         OF A "FOR" LOOP AND THEN RESTARTS THE LOOP AGAIN
F3.4TH: 399         ROUTINE. IF A STATEMENT SHOULD BE STARTED
F3.4TH: 418         GIVEN AN [H,L] POINTING TO THE STARTING
F3.4TH: 441            POINTER AT THE START OF THIS OPERATOR
F3.4TH: 684         THIS DETERMINES WHERE PROGRAM STORAGE WILL START. THE
F3.4TH: 692         OF INIT. ONCE THIS IS DONE THERE IS NO WAY TO RESTART
F3.4TH: 732 START:   DI                                ;DISENABLE INTERRUPTS
F3.4TH:1581                                            ;ONATA POINTER ALWAYS STARTS ON A
F3.4TH:1658 VARTAB:  BLOCK    2                        ;POINTER TO START OF SIMPLE
F3.4TH:1894          LXI      H,ERRTAB                 ;GET START OF ERROR TABLE
F3.4TH:1908          MVI      A,"?"                    ;START OF ERROR MESSAGE
F3.4TH:1960                                            ;ERRORS DURING INIT, INIT IS RESTARTED
F3.4TH:2075          INX      H                        ;FIX H TO START OF TEXT
F3.4TH:2098 SCNLIN:  LXI      D,$CODE                  ;ASSUME START LIST AT ZERO
F3.4TH:2148 FNDLIN:  LHLD     TXTTAB                   ;GET POINTER TO START OF TEXT
F3.4TH:2191          SHLD     VARTAB                   ;NEW START OF VARIABLE
F3.4TH:2196 RUNC:    LHLD     TXTTAB                   ;POINT AT THE START OF TEXT
F3.4TH:2220          LHLD     VARTAB                   ;GET START OF VARIABLE SPACE
F3.4TH:2223          SHLD     ARYTAB                   ;SAVE IN START OF ARRAY SPACE
F3.4TH:2449 CRDONE:  LXI      H,BUFMIN                 ;LEAVE WITH [H,L] POINTER TO START OF LINE
F3.4TH:2555          CNC      PRINTW                   ;YES, START OVER
F3.4TH:2665          PUSH     B                        ;SAVE START POINTER
F3.4TH:2675          CALL     CRDO                     ;DO CRLF TO START OUT
F3.4TH:2681 PRIT4:   POP      H                        ;RESTORE POINTER TO START OF TEXT
F3.4TH:2699          POP      H                        ;POP START POINTER HERE
F3.4TH:2871                                            ;TO REMEMBER HOW TO RESTART THIS
F3.4TH:3033          LHLD     TEMP                     ;GET POINTER TO START OF STATEMENT
F3.4TH:3299 ; IN THE 4K VERSION WE START AT THE BEGINNING
F3.4TH:3300 ; AND SEARCH. IN THE 8K WE START WHERE WE
F3.4TH:3324                                            ;START SEARCHING FROM WHERE WE ARE OR
F3.4TH:3325                                            ;TO START SEARCHING FROM THE BEGINNING
F3.4TH:3414 ; TO START EXECUTION AT. "DATA" COUNTS THE NUMBER OF "IF"S
F3.4TH:3991 TRYAGN:  DC"?REDO FROM START"
F3.4TH:4013 ; IS IMPROPERLY FORMATTED. FOR "INPUT" WE START AGAIN.
F3.4TH:4028          CALL     STROUT                   ;PRINT "?REDO FROM START"
F3.4TH:4031          LHLD     TEMP                     ;START ALL OVER BY GOING BACK
F3.4TH:4034          RET>                              ;TO NEWSTT POINTING AT THE START OF
F3.4TH:4105 ; THE POINTER INTO THE DATA ALWAYS STARTS POINTING TO A
F3.4TH:4155                                            ;THE DATA NOW STARTS AT THE BEGINNING
F3.4TH:4192          DCX      H                        ;BACKUP SINCE START CHARACTER MUST BE INCLUDED
F3.4TH:4195                                            ;INCLUDE THE STARTING OR ENDING QUOTE
F3.4TH:4288 ; IN THE 4K "DATA" MUST BE AT THE START OF THE LINE
F3.4TH:4289 ; SO THE SEARCH IS MADE USING THE LINKS AT THE START OF EACH LINE.
F3.4TH:4292 ; FOR DATA TO SKIP OVER STATEMENTS. THE START WORD OF EACH STATEMENT
F3.4TH:4488 ; THE FORMULA EVALUATOR STARTS WITH
F3.4TH:5629          LHLD     VARTAB                   ;[H,L]=PLACE TO START THE SEARCH
F3.4TH:5684          LHLD     VARTAB                   ;GET THE PLACE TO START
F3.4TH:5733          JNZ      ZEROER                   ;POINTS TO THE START OF THE VARIABLE
F3.4TH:5783          LALD     ARYTAB                   ;PLACE TO START SEARCH
F3.4TH:5871 ; FOR EACH DIMENSION STARTING WITH THE FIRST A LIST
F3.4TH:5917          LHLD     ARYTAB                   ;[H,L]=PLACE TO START THE SEARCH
F3.4TH:6080          XCHG                              ;[D,E]=START OF VALUES
F3.4TH:6435 GETFNM:  SYNCHK   FNTK                     ;MUST START WITH "FN"
F3.4TH:6442                                            ;THE START OF AN ARRAY REFEREENCE
F3.4TH:6536 STRLT2:  PUSH     H                        ;SAVE POINTER TO START OF LITERAL
F3.4TH:6700 GARBA2:  LHLD     MEMSIZ                   ;START FROM TOP DOWN
F3.4TH:6718          LXI      H,TEMPST                 ;GET START OF STRING TEMPS
F3.4TH:6734 SVARS:   LHLD     VARTAB                   ;GET START OF SIMPLE VARIABLES
F3.4TH:7289                                            ;ZERO. HOWEVER A RESTART AT 0 IS OK.
F3.4TH:7432          CALL     CRDO                     ;DO CRLF TO START OUT
F3.4TH:7446          LXI      H,BUF-1                  ;POINT AT THE START OF THE UNPACKED CHARACTERS
F3.4TH:7464 PRIT4:   POP      H                        ;RESTORE POINTER TO START OF TEXT
F3.4TH:7496          POP      H                        ;POP START POINTER HERE
F3.4TH:7521          PUSH     B                        ;SAVE POINTER TO START OF 1ST LINE
F3.4TH:7590          RAR                               ;TEST FOR START OF SECTOR
F3.4TH:7592          ANI      63                       ;START OF SECTOR, RIGHT ONE
F3.4TH:7659 ; CHANNELS X AND X+1. RESTARTING AT LOCATION ZERO FORCES THE TERMINAL
F3.4TH:7665          CALL     CONS2                    ;ON RESTART AT ZERO
F3.4TH:7710          CALL     CASOUT                   ;PUT OUT THE START BYTES
F3.4TH:7714          LHLD     TXTTAB                   ;START OF PROGRAM
F3.4TH:7735 LOPCLK:  MVI      B,3                      ;NUMBER OF START CHARACTERS
F3.4TH:7737          CPI      211                      ;START CHARACTER?
F3.4TH:7744          JNZ      LOPCLK                   ;IF NOT, START COMPLETELY OVER
F4.4TH:2242          MVI      B,0                      ;ZERO FLAG TO SEE WHEN WE START DIVIDING
F4.4TH:3252          MOV      A,M                      ;NO, WE MUST HAVE TOO MUCH SINCE WE STARTED
F4.4TH:3874 ; IF ARG .LT. 0, A NEW SEQUENCE OF RANDOM NUMBERS IS STARTED
F4.4TH:3894          JM       RND1                     ;START NEW SEQUENCE IF NEGATIVE
F4.4TH:4452          SHLD     FRETOP##                 ;STRINGS START FROM HERE DOWN
F4.4TH:4466 ASKAGN:  LXI      H,TBLDO                  ;START OF FUNCTION TABLE
F4.4TH:4467 LOPASK:  PUSHM                             ;PUT ON CANDIDATE FOR START OF FREE MEMORY
F4.4TH:4480 FINFUN:  POP      D                        ;POP OFF CANDIDATE FOR START OF
F4.4TH:4484          JNZ      ASKAGN                   ;MAKE HIM START OVER



*** STRAD1
F3.4TH:6510 STRAD1:  PUSH     H                        ;SAVE DESC. POINTER



*** STRING
F3.4TH:  25          STRING==0                         ;ON MEANS STRINGS ALLOWED
F3.4TH:  35          STRING==1>
F3.4TH:  40          STRING==1>
F3.4TH:  53 IFN      STRING,<^D10>>
F3.4TH: 104     USER DEFINED FUNCTIONS(MULTI-ARG,MULTI-LINE,STRINGS)
F3.4TH: 118          NUMTMP==3                         ;NUMBER OF STRING TEMPORARIES
F3.4TH: 148 IFN      STRING,< 
F3.4TH: 283         WHEN A MATCH IS FOUND BETWEEN A STRING
F3.4TH: 329         THE CODE TO CHECK IF A STRING MUST BE COPIED
F3.4TH: 330         IS CHANGED THESE STRINGS MUST BE STORED ABOVE
F3.4TH: 484         FOR EACH SIMPLE VARIABLE, WHETHER IT IS A STRING,
F3.4TH: 532     STRINGS
F3.4TH: 533         IN THE VARIABLE TABLE STRINGS ARE STORED JUST LIKE
F3.4TH: 534         NUMERIC VARIABLES. SIMPLE STRINGS HAVE FOUR VALUE
F3.4TH: 536         REPRESENTS THE NULL STRING). THE ONLY DIFFERENCE
F3.4TH: 546                 LENGTH OF THE STRING
F3.4TH: 551                     STRING IF LENGTH. NE.
F3.4TH: 554         THE VALUE OF A STRING VARIABLE (THESE 4 BYTES)
F3.4TH: 555         IS CALLED THE STRING DESCRIPTOR TO DISTINGUISH
F3.4TH: 556         IT FROM THE ACTUAL STRING DATA. WHENEVER A
F3.4TH: 557         STRING CONSTANT IS ENCOUNTERED IN A FORMULA OR AS
F3.4TH: 558         PART OF AN INPUT STRING, OR AS PART OF DATA, STRLIT
F3.4TH: 560         THE STRING. IF THE STRING CONSTANT IS IN BUF (WHICH
F3.4TH: 561         IT WILL BE IF THE STRING IS BEING "INPUT", OR THE
F3.4TH: 562         STRING IS PART OF SOME FORMULA IN A DIRECT STATEMENT)
F3.4TH: 563         THE VALUE IS COPIED INTO STRING SPACE SINCE BUF
F3.4TH: 565         STRINGS.
F3.4TH: 567         STRING FUNCTIONS AND THE ONE STRING OPERATOR "+"
F3.4TH: 568         ALWAYS RETURN THEIR VALUES IN STRING SPACE.
F3.4TH: 569         ASSIGNING A STRING A CONSTANT VALUE IN A PROGRAM
F3.4TH: 571         WILL NOT USE ANY STRING SPACE SINCE
F3.4TH: 572         THE STRING DESCRIPTOR WILL POINT INTO THE
F3.4TH: 574         WHEN A STRING VALUE IS IN BUF, OR IT IS IN STRING
F3.4TH: 577         STRING DATA IN STRING SPACE. FS=CHR$(7)
F3.4TH: 578         WILL USE ONE BYTE OF STRING SPACE TO STORE THE
F3.4TH: 579         NEW ONE CHARACTER STRING CREATED BY "CHR$", BUT
F3.4TH: 581         THE ONLY POINTER AT THE NEW STRING IS A
F3.4TH: 585         DISALLOWS HAVING TWO STRING DESCRIPTORS POINT TO THE SAME
F3.4TH: 586         AREA IN STRING SPACE. STRING FUNCTIONS AND OPERATORS
F3.4TH: 602                OSCTMP TRANSFERRED INTO A NEW STRING TEMPORARY.
F3.4TH: 604         THE REASON FOR STRING TEMPORARIES IS THAT GARBAGE
F3.4TH: 605         COLLECTION HAS TO KNOW ABOUT ALL ACTIVE STRING DESCRIPTORS
F3.4TH: 606         SO IT KNOWS WHAT IS AND ISN'T IN USE. STRING TEMPORARIES ARE
F3.4TH: 607         USED TO STORE THE DESCRIPTORS OF STRING EXPRESSIONS.
F3.4TH: 612         VARIABLES, STRINGS HAVE THE POINTER TO A STRING DESCRIPTOR
F3.4TH: 615         STRING FUNCTIONS CANNOT FREE THEIR ARGUMENTS UP RIGHT
F3.4TH: 617         GARBAGE COLLECTION AND THE ARGUMENT STRINGS
F3.4TH: 621         DSCTMP SINCE STRING TEMPORARIES ARE ALLOCATED
F3.4TH: 630         STRING SPACE IS ALLOCATED AT THE VERY TOP
F3.4TH: 632         STRING SPACE. STRING ARE STORED IN HIGH LOCATIONS
F3.4TH: 633         FIRST. WHENEVER STRING SPACE IS ALLOCATED (GETSPA)
F3.4TH: 635         TO GIVE THE HIGHEST LOCATION IN STRING SPACE
F3.4TH: 639         (STKTOP). THIS MEANS STRING SPACE HAS RUN INTO THE
F3.4TH: 645             2. FOR EACH STRING DESCRIPTOR
F3.4TH: 646                (TEMPORARIES, SIMPLE STRINGS, STRING ARRAYS)
F3.4TH: 647                IF THE STRING IS NOT NULL AND ITS POINTER IS
F3.4TH: 649                MINPTR=THIS STRING DESCRIPTORS POINTER
F3.4TH: 650                REMMIN=POINTER AT THIS STRING DESCRIPTOR
F3.4TH: 652             3. IF REMMIN.NE.0 (WE FOUND AN UNCOLLECTED STRING)
F3.4TH: 653                BLOCK TRANSFER THE STRING DATA POINTED
F3.4TH: 654                TO IN THE STRING DESCRIPTOR POINTED TO BY REMMIN
F3.4TH: 655                SO THAT THE LAST BYTE OF STRING DATA IS AT
F3.4TH: 658                THE STRING DATA WAS MOVED INTO. UPDATE
F3.4TH: 660                TO THE NEW LOCATION OF THE STRING DATA,
F3.4TH: 665         [STKTOP] AND [FRETOP] , IF NOT AN "OUT OF STRING"
F3.4TH: 686         STRING SPACE (50) GIVES THE FIRST LOCATION USED BY THE
F3.4TH: 720                    FREE STRING SPACE
F3.4TH: 722         [FRETOP]   STRING SPACE IN USE
F3.4TH: 846 ; AND GIVES "TMERR" ON STRINGS.
F3.4TH: 937 IFN      STRING,< 
F3.4TH:1053 IFN      STRING,< 
F3.4TH:1432 IFN      STRING,< 
F3.4TH:1451          DCL"OUT OF STRING SPACE"
F3.4TH:1474          DCL"STRING TOO LONG"
F3.4TH:1493          DCL"STRING FORMULA TOO COMPLEX"
F3.4TH:1587                                            ;THAN DSCTMP OR ASSIGMENT OF STRING
F3.4TH:1589                                            ;INTO STRING SPACE -- WHICH IT MUST
F3.4TH:1601 IFN      STRING,< 
F3.4TH:1603                                            ;IN THE 8K 0=NUMERIC 1=STRING
F3.4TH:1610                                            ;STRINGS WON'T BE CRUNCHED.
F3.4TH:1615 DSCTMP:  BLOCK    STRSIZ                   ;STRING FUNCTIONS BUILD ANSWER DESCRIPTOR HERE
F3.4TH:1616 FRETOP:  BLOCK    2>                       ;TOP OF STRING FREE SPACE
F3.4TH:1617 IFN      LENGTH!STRING,<
F3.4TH:1652                                            ;TO ALLOW FOR 50 BYTES OF STRING SPACE,
F3.4TH:1698 ; USER IS OUT OF STRING SPACE
F3.4TH:2206 IFE      STRING,<CLEAR:>
F3.4TH:2210 IFN      STRING,< 
F3.4TH:2214          SHLD     FRETOP>                  ;FREE UP STRING SPACE
F3.4TH:2231 ; GOSUB & FOR CONTEXT. STRING TEMPORARIES ARE FREED
F3.4TH:2242 IFN      STRING,< 
F3.4TH:2246          SHLD     TEMPPT>                  ;INITIALIZE STRING TEMPORARIES
F3.4TH:2275 IFE      STRING,<CALL INLIN                ;IN THE NON-STRING VERSIONS ALL
F3.4TH:2278 IFN      STRING,<JMP INLIN>                ;NO CRUNCHING IN THIS CASE
F3.4TH:2289 CRUNCH:  IFN      STRING,< 
F3.4TH:2306                                            ;SETUP B WITH A QUOTE IF IT IS A STRING
F3.4TH:2309          JZ       STRNG                    ;YES, GO TO SPECIAL STRING HANDLING
F3.4TH:2316 IFN      STRING,< 
F3.4TH:2348 IFE      STRING,< 
F3.4TH:2397 IFN      STRING,< 
F3.4TH:2413 IFE      STRING,<SUI REMTK>                ;WAS IT A REM STATEMENT
F3.4TH:2424          JZ       STUFFH                   ;IF YES, DONE WITH STRING
F3.4TH:2435 NTHIS:   POP      H                        ;RESTORE TEXT STRING
F3.4TH:2586 IFN      STRING,< 
F3.4TH:2778 IFN      STRING,<CALL CHKNUM>> 
F3.4TH:2812 IFN      STRING,< 
F3.4TH:2815 IFE      <LENGTH-2>&STRING,<
F3.4TH:3383 IFN      STRING,< 
F3.4TH:3433 ; WITHOUT STRINGS THERE IS NO NEED TO WATCH QUOTATIONS -
F3.4TH:3437 IFE      STRING,< 
F3.4TH:3461 IFN      STRING,< 
F3.4TH:3476 IFN      STRING,< 
F3.4TH:3482          CPI      3                        ;SEE IF ITS A STRING
F3.4TH:3488          CALL     CHKSTR>                  ;MAKE SURE THE FORMULA WAS A STRING
F3.4TH:3492          RAR                               ;CARRY SET FOR STRING OFF
F3.4TH:3507          LHLD     STKTOP                   ;SEE IF IT POINTS INTO STRING SPACE
F3.4TH:3528                                            ;STRING IN FRETMP IS HARMLESS
F3.4TH:3620 IFN      STRING,< 
F3.4TH:3666 IFN      STRING   
F3.4TH:3668 IFE      STRING,<PUSH H>                   ;SAVE THE TEXT POINTER
F3.4TH:3670 IFN      STRING,< 
F3.4TH:3676          CALL     STRCMP                   ;MUST BE STRING, SO STRING COMPARE
F3.4TH:3755 IFE      STRING,< 
F3.4TH:3789 IFN      STRING,< 
F3.4TH:3791          CALL     GETYPE                   ;SEE IF WE HAVE A STRING
F3.4TH:3800          JNZ      STRDON>>                 ;WAS IT A STRING FORMULA?
F3.4TH:3801          CALL     FOUT                     ;MAKE A NUMBER INTO A STRING
F3.4TH:3804 IFE      STRING,<CALL STROUT>              ;IF STRINGS OFF JUST OUTPUT IT
F3.4TH:3805 IFN      STRING,< 
F3.4TH:3806          CALL     STRLIT                   ;MAKE IT A STRING
F3.4TH:3837 IFN      STRING,< 
F3.4TH:3845 STRDON:  CNZ      STRPRT>>                 ;JUST PRINT STRINGS
F3.4TH:3886 IFE      STRING,< 
F3.4TH:4049 IFN      STRING,< 
F3.4TH:4050          CALL     STRLTI                   ;MAKE THE MESSAGE A STRING
F3.4TH:4060 IFE      STRING,< 
F3.4TH:4163 IFN      STRING,< 
F3.4TH:4164          LDA      VALTYP                   ;SEE IF ITS NUMERIC OR STRING
F3.4TH:4168          CPI      3                        ;IS IT A STRING ?
F3.4TH:4178                                            ;CHECKED SO AN UNQUOTED STRING
F3.4TH:4181          MOV      D,A                      ;ASSUME QUOTED STRING
F3.4TH:4188          MVI      D,":"                    ;UNQUOTED STRING TERMINATORS
F3.4TH:4194                                            ;IN THE QUOTED STRING CASE WE DON'T WANT TO
F3.4TH:4196 NOWGET:  CALL     STRLT2                   ;MAKE A STRING DESCRIPTOR FOR THE VALUE
F3.4TH:4473 IFN      STRING,< 
F3.4TH:4481 CHKVAL:  LDA      VALTYP                   ;0 MEANS NUMERIC 1 MEANS STRING
F3.4TH:4509 IFE      STRING,<FRMNUM:>
F3.4TH:4529 IFN      STRING,< 
F3.4TH:4533                                            ;SEE STRINGS
F3.4TH:4585 IFN      STRING,< 
F3.4TH:4586          LDA      VALTYP                   ;SEE IF LEFT PART IS STRING
F3.4TH:4590          CPI      3>                       ;SEE IF ITS A STRING
F3.4TH:4617 IFN      STRING,<CALL CHKNUM>              ;CAN'T BE STRING HERE
F3.4TH:4618                                            ;SINCE THE ONLY STRING OPERATOR
F3.4TH:4677 ; ONTO THE STACK, EXCEPT IN THE CASE OF STRINGS IN WHICH IT CALLS
F3.4TH:4685          JZ       TMERR                    ;BLOW UP ON STRINGS
F3.4TH:4767 ; STRINGS ARE TREATED SPECIALLY. NUMERIC COMPARES ARE DIFFERENT
F3.4TH:4770 ; BITS ARE STORED. STRINGS HAVE STRCMP, THE POINTER AT THE STRING DESCRIPTOR,
F3.4TH:4797          LHLD     FACLO                    ;GET THE POINTER AT THE STRING DESCRIPTOR
F3.4TH:4801          LXI      B,STRCMP                 ;STRING COMPARE ROUTINE
F3.4TH:4855          JZ       TMERR                    ;BLOW UP ON RIGHT HAND STRING OPERAND
F3.4TH:4995 IFN      STRING,< 
F3.4TH:5024 IFN      STRING,< 
F3.4TH:5025          CPI      34                       ;STRING CONSTANT?
F3.4TH:5082                                            ;STRING VALUES COME BACK HERE
F3.4TH:5084 IFN      STRING,< 
F3.4TH:5093 IFE      STRING,< 
F3.4TH:5097 IFN      STRING,< 
F3.4TH:5099                                            ;INTO [H,L]. IN THE CASE OF A STRING
F3.4TH:5102          SHLD     FACLO                    ;IN CASE IT'S STRING STORE THE POINTER
F3.4TH:5107          CALL     GETYPE                   ;FOR STRINGS WE JUST LEAVE
F3.4TH:5126 IFN      STRING,< 
F3.4TH:5138 ; THE TEXT POINTER. SO NORMAL FUNCTIONS THAT RETURN STRING RESULTS (I.E. CHR$)
F3.4TH:5143 ; THE FIRST OF WHICH MUST BE STRING AND THE SECOND OF WHICH .
F3.4TH:5149 ; THE POINTER TO THE DESCRIPTOR OF THE STRING ARGUMENT
F3.4TH:5155                                            ;STRING -- SECOND INTEGER
F3.4TH:5161          CALL     CHKSTR                   ;MAKE SURE THE FIRST ONE WAS STRING
F3.4TH:5165          LHLD     FACLO                    ;GET PTR AT STRING DESCRIPTOR
F3.4TH:5169                                            ;SAVE THE STRING PTR
F3.4TH:5253 IFN      STRING,<CALL CHKNUM>  
F3.4TH:5282 IFN      STRING,< 
F3.4TH:5288 IFE      STRING,<MOV E,D>     
F3.4TH:5304 ; OPERATOR IT WAS (IF STRINGS ON
F3.4TH:5305 ; LOW ORDER BIT SAYS WHETHER IT WAS STRING OR NOT)
F3.4TH:5308 IFN      STRING,< 
F3.4TH:5310          RAR>                              ;CARRY=WHETHER WAS STRING OR NOT
F3.4TH:5313 IFE      STRING,< 
F3.4TH:5315 IFN      STRING,< 
F3.4TH:5324 IFN      STRING,< 
F3.4TH:5326 ; THE FOLLOWING ROUTINE COMPARES TWO STRINGS
F3.4TH:5328 ; A=0 IF STRINGS EQUAL
F3.4TH:5345 STRCMP:  CALL     FRESTR                   ;FREE UP THE FAC STRING, AND GET THE
F3.4TH:5349          MOV      A,M                      ;SAVE THE LENGTH OF THE FAC STRING IN [A]
F3.4TH:5351          MOV      C,M                      ;SAVE THE POINTER AT THE FAC STRING
F3.4TH:5355          POP      D                        ;GET THE STACK STRING POINTER
F3.4TH:5356          PUSH     B                        ;SAVE THE POINTER AT THE FAC STRING DATA
F3.4TH:5357          PUSH     PSW                      ;SAVE THE FAC STRING LENGTH
F3.4TH:5358          CALL     FRETMP                   ;FREE UP THE STACK STRING AND RETURN
F3.4TH:5361                                            ;THE POINTER TO THE STACK STRING DESCRIPTOR
F3.4TH:5363          POP      D                        ;[D]=LENGTH OF FAC STRING
F3.4TH:5364          MOV      E,M                      ;[E]=LENGTH OF STACK STRING
F3.4TH:5366          MOV      C,M                      ;[B,C]=POINTER AT STACK STRING
F3.4TH:5370 CSLOOP:  MOV      A,E                      ;BOTH STRINGS ENDED
F3.4TH:5373          MOV      A,D                      ;GET FACLO STRING LENGTH
F3.4TH:5378          CMP      E                        ;OF B,C,D,E STRING HAVING ENDED FIRST
F3.4TH:5381                                            ;HERE WHEN NEITHER STRING ENDED
F3.4TH:5384          LOAX     B                        ;GET CHARACTER FROM B,C,D,E STRING
F3.4TH:5385          CMP      M                        ;COMPARE WITH FACLO STRING
F3.4TH:5388          JZ       CSLOOP                   ;IF BOTH THE SAME, MUST BE MORE TO STRINGS
F3.4TH:5391          CMC                               ;HERE WHEN STRINGS DIFFER
F3.4TH:5417 IFN      STRING,<CALL CHKNUM>              ;MAKE SURE ITS INT
F3.4TH:5543 IFN      STRING,< 
F3.4TH:5587          INR      D                        ;CHECK FOR STRING
F3.4TH:5600 IFN      STRING,< 
F3.4TH:5601          SUI      "$"                      ;IS IT A STRING?
F3.4TH:5604          STA      VALTYP                   ;FLAG THIS AS A STRING
F3.4TH:5607          MOV      C,A                      ;BACK INTO [C] WITH STRING BIT ON
F3.4TH:5757 IFN      STRING,< 
F3.4TH:5762 IFE      STRING,< 
F3.4TH:5767 IFN      STRING,< 
F3.4TH:5772 IFE      STRING,< 
F3.4TH:5867 ;       LOW BYTE = SECOND CHARCTER (200 BIT IS STRING FLAG)
F3.4TH:6175          SUI      4                        ;FOR INTEGERS AND STRINGS
F3.4TH:6186 SMLVAL:  JPO      DONMUL                   ;FOR STRINGS
F3.4TH:6217 IFN      STRING,< 
F3.4TH:6226          LDA      VALTYP                   ;WAS THE ARGUMENT A STRING?
F3.4TH:6232                                            ;TO GIVE FREE STRING SPACE
F3.4TH:6257 IFN      STRING,< 
F3.4TH:6294 ; NO STRINGS CAN BE INVOLVED WITH THESE FUNCTIONS
F3.4TH:6326 IFN      STRING,<CALL CHKNUM>>             ;STRINGS ILLEGAL
F3.4TH:6353 IFN      STRING,<CALL CHKNUM>>             ;ARG CANNOT BE STRING
F3.4TH:6403 IFN      MULDIM!STRING!FUNCTS,<
F3.4TH:6446 IFN      STRING,<CALL PTRGT2               ;REALLY GET THE POINTER
F3.4TH:6447          JMP      CHKNUM>>                 ;MAKE SURE ITS NOT A STRING NAME
F3.4TH:6448 IFE      STRING&<LENGTH-2>,<JMP     PTRGT2>> 
F3.4TH:6452 SUBTTL   STRING FUNCTIONS
F3.4TH:6453 IFN      STRING,                           ;STRING HANDLING SUBROUTINES
F3.4TH:6456 ; A STRING WITH THE CHARACTERS THE OUTPUT OF THE NUMBER
F3.4TH:6466          CALL     STRLIT                   ;SCAN IT AND TURN IT INTO A STRING
F3.4TH:6477 ; STRCPY CREATES A COPY OF THE STRING
F3.4TH:6480 ; WHICH HAS THE STRING INFO (LENGTH, WHERE COPIED TO)
F3.4TH:6490          POP      H                        ;FIND OUT WHERE STRING TO COPY
F3.4TH:6504 STRINI:  CALL     GETSPA                   ;GET SOME STRING SPACE ([A] CHARS)
F3.4TH:6520 ; STRLT2 TAKES THE STRING LITERAL WHOSE FIRST CHARACTER
F3.4TH:6525 ; ZERO THAT TERMINATE THE STRING SHOULD BE SET UP IN (B)
F3.4TH:6528 ; THE CHARACTER AFTER THE STRING LITERAL IS POINTED TO
F3.4TH:6554 STRFIN:  CPI      34                       ;IF QUOTE TERMINATES THE STRING
F3.4TH:6573 ; SOME STRING FUNCTION IS RETURNING A RESULT IN DSCTMP
F3.4TH:6576 ; RESULT AS TYPE STRING
F3.4TH:6590          STA      VALTYP                   ;FLAG THIS AS A STRING
F3.4TH:6597          MVI      A,1                      ;FLAG RESULT AS STRING
F3.4TH:6603          MVI      E,ERRST                  ;"STRING TEMPORARY" ERROR
F3.4TH:6615 ; PRINT THE STRING POINTED TO BY [H,L] WHICH ENDS WITH A ZERO
F3.4TH:6616 ; IF THE STRING IS BELOW DSCTMP IT WILL BE COPIED INTO STRING SPACE
F3.4TH:6619 STROUT:  CALL     STRLIT                   ;GET A STRING LITERAL
F3.4TH:6623 ; PRINT THE STRING WHOSE DESCRIPTOR IS POINTED TO BY FACLO.
F3.4TH:6633                                            ;TO CHECK FOR NULL STRING
F3.4TH:6652 ; GETSPA - GET SPACE FOR CHARACTER STRING
F3.4TH:6657 ; BLOWS OFF TO "OUT OF STRING SPACE" TYPE ERROR.
F3.4TH:6663          LHLD     STKTOP                   ;GET BOTTOM OF STRING SPACE
F3.4TH:6677          JC       GARBAG                   ;NOT ENOUGH ROOM FOR STRING, OFFAL TIME
F3.4TH:6683          INX      H                        ;MOVE BACK TO POINT TO STRING
F3.4TH:6689          MVI      E,ERRSO                  ;GET READY FOR OUT OF STRING SPACE ERROR
F3.4TH:6713          LHLD     STKTOP                   ;FORCE DVARS TO IGNORE STRINGS
F3.4TH:6718          LXI      H,TEMPST                 ;GET START OF STRING TEMPS
F3.4TH:6743          JZ       ARYVAR                   ;IF YES, DO ARRAY TYPE STRINGS
F3.4TH:6751          CPI      3                        ;SEE IF ITS A STRING
F3.4TH:6792          CPI      3                        ;SEE IF ITS A STRING
F3.4TH:6798          ORA      A                        ;SEE IF STRING VAR
F3.4TH:6826          ORA      M                        ;SEE IF ITS THE NULL STRING
F3.4TH:6837          POP      B                        ;POP OF STRING LENGTH
F3.4TH:6839          MOV      A,C                      ;GET LENGTH OF STRING
F3.4TH:6841          RZ                                ;NULL STRING, RETURN
F3.4TH:6844          LHLD     FRETOP                   ;GET POINTER TO TOP OF STRING FREE SPACE
F3.4TH:6847          COMPAR                            ;IS THIS STRINGS POINTER .LT. FRETOP
F3.4TH:6867 ; HERE WHEN MADE ONE COMPLETE PASS THRU STRING VARS
F3.4TH:6878          MOV      C,M                      ;[B,C]=POINTER AT STRING DATA
F3.4TH:6880                                            ;CAN BE UPDATED AFTER THE STRING IS
F3.4TH:6885          MOV      L,M                      ;[L]=STRING LENGTH
F3.4TH:6888          DAD      B                        ;[H,L]=POINTER BEYOND STRING
F3.4TH:6891          DCX      H                        ;DON'T MOVE ONE BEYOND STRING
F3.4TH:6892          MOV      B,H                      ;GET TOP OF STRING IN [B,C]
F3.4TH:6897          CALL     BLTUC                    ;MOVE STRING
F3.4TH:6912 ; THE FOLLOWING ROUTINE CONCATENATES TWO STRINGS
F3.4TH:6918          LHLD     FACLO                    ;GET POINTER TO STRING DESC.
F3.4TH:6938          JC       ERROR                    ;ERROR "LONG STRING"
F3.4TH:6941          CALL     STRINI                   ;GET INITIAL STRING
F3.4TH:6957          CALL     MOVINS                   ;MOVE IN THE FIRST STRING
F3.4TH:6976          MOV      A,M                      ;[A]=STRING LENGTH
F3.4TH:6978          MOV      C,M                      ;[B,C]=POINTER AT STRING DATA
F3.4TH:6981          MOV      L,A>                     ;[L]=STRING LENGTH
F3.4TH:6998 ; FRETMP IS PASSED A POINTER TO A STRING DESCRIPTOR IN [D,E]
F3.4TH:7000 ; A CHECK TO IS MADE TO SEE IF THE STRING DESCRIPTOR [D,E] POINTS
F3.4TH:7004 ; STRING DATA THAT THAT STRING TEMPORARY POINTED TO IS THE
F3.4TH:7005 ; THE LOWEST PART OF STRING SPACE IN USE.
F3.4TH:7014 FRESTR:  CALL     CHKSTR                   ;MAKE SURE ITS A STRING
F3.4TH:7025          MOV      B,M                      ;[B,C]=POINTER AT STRING
F3.4TH:7040          MOV      D,B                      ;[D,E]=POINTER AT STRING
F3.4TH:7043          MOV      C,M                      ;[C]=LENGTH OF THE STRING FREED UP
F3.4TH:7047                                            ;ONE IN STRING SPACE
F3.4TH:7061 ; STRING PASSED AS AN ARGUMENT
F3.4TH:7097 ; CHR$(#) CREATES A STRING WHICH CONTAINS AS ITS ONLY
F3.4TH:7103          CALL     STRINI                   ;GET STRING IN DSCTMP
F3.4TH:7126          XRA      A                        ;LEFT NEVER CHANGES STRING POINTER
F3.4TH:7130          MOV      A,M                      ;GET STRING LENGTH
F3.4TH:7131          CMP      B                        ;ENTIRE STRING WANTED?
F3.4TH:7135          MOV      A,B                      ;GET TRUNCATED LENGTH OF STRING
F3.4TH:7140          CALL     GETSPA                   ;GET SPACE FOR NEW STRING
F3.4TH:7146          INX      H                        ;MOVE TO STRING POINTER FIELD
F3.4TH:7185 ; ONWARD. IF # IS GT LEN($) THEN RETURN NULL STRING,
F3.4TH:7187 ; FOR #2 CHARS. IF #2 GOES PAST END OF STRING, RETURN
F3.4TH:7291 IFN      STRING,< 
F3.4TH:7327 IFN      STRING!LENGTH,<
F3.4TH:7354 IFN      STRING,< 
F3.4TH:7356 ; THE VAL FUNCTION TAKES A STRING AND TURN IT INTO
F3.4TH:7359 ; BY REPLACING THE CHARACTER BEYOND THE STRING, VAL
F3.4TH:7372          PUSHM                             ;TWO STRINGS "1" AND "2"
F3.4TH:7377          MOV      M,D                      ;STRING BEYOND THE ONE VAL
F3.4TH:7379          PUSH     B                        ;THE FIRST CHARACTER OF THE NEXT STRING
F3.4TH:7385                                            ;STRING INTO [B]
F3.4TH:7388                                            ;IF STRING IS HIGHEST IN STRING SPACE
F3.4TH:7391                                            ;STRING DATA BECAUSE WHAT IF THE
F3.4TH:7392                                            ;USER TOOK VAL OFF THAT HIGH STRING
F3.4TH:7451          CALL     STRLT3                   ;LITERALIZE THE LINE STRING
F3.4TH:7561 ; THE STATEMENT DSKO$ STRING, SECTOR WRITES
F3.4TH:7562 ; THE STRING (UP TO 132 DECIMAL CHARS)
F3.4TH:7564 ; OSKIS (SECTOR) IS A STRING FUNCTION THAT
F3.4TH:7565 ; RETURNS THE 133 BYTE STRING STORED ON SECTOR.
F3.4TH:7572                                            ;STRING DESCRIPTOR ON THE STACK
F3.4TH:7577          POP      H                        ;[H,L] GET STRING POINTER
F3.4TH:7582          JC       FCERR                    ;STRING TOO LONG
F4.4TH:  22          STRING==0                         ;ON MEANS STRINGS ALLOWED
F4.4TH:  32          STRING==1>
F4.4TH:  37          STRING==1>
F4.4TH:  50 IFN      STRING,<^D10>>
F4.4TH:  95 IFN      STRING,< 
F4.4TH:1139          JM       TMERR                    ;BLOW UP ON STRINGS
F4.4TH:1288 ; STRINGS ARE TREATED AS INTEGERS
F4.4TH:1294          JM       VPUSHD                   ;RETURN IF THE DATA WAS AN INTEGER OR A STRING
F4.4TH:1318          ANI      177                      ;STRINGS LOOK LIKE REALS
F4.4TH:1441          JM       TMERR                    ;WE HAVE A STRING, THAT IS A "NO-NO"
F4.4TH:1475          JM       TMERR                    ;STRINGS!! -- ERROR!!
F4.4TH:1510          JNC      TMERR                    ;GIVE AN ERROR IF WE HAVE A STRING
F4.4TH:2323 IFN      STRING,< 
F4.4TH:2364 IFN      STRING,< 
F4.4TH:2373 IFE      STRING,< 
F4.4TH:2375 IFN      STRING,< 
F4.4TH:2381 IFN      STRING,< 
F4.4TH:2387 IFE      STRING,  
F4.4TH:2389 IFN      STRING,< 
F4.4TH:2433 IFE      STRING,< 
F4.4TH:2435 IFN      STRING,< 
F4.4TH:2726          LXI      H,STROUI##               ;PUT PRINT STRING ADDRESS ON STACK SO WE WILL
F4.4TH:2952          POP      H                        ;EXIT WITH (HL) POINTING TO STRING
F4.4TH:4325 IFN      STRING,  
F4.4TH:4336          CALL     STROUT                   ;CALL THE STRING PRINTER
F4.4TH:4426 IFN      STRING,  
F4.4TH:4444 IFN      STRING,<                          ;SET UP DEFAULT STRING SPACE
F4.4TH:4452          SHLD     FRETOP##                 ;STRINGS START FROM HERE DOWN
F4.4TH:4499          CALL     STROUT                   ;THE STRING



*** STRSIZ
F3.4TH: 116          STRSIZ==4
F3.4TH: 117 IFE      LENGTH-2,<STRSIZ==3>
F3.4TH:1614 TEMPST:  BLOCK    STRSIZ*NUMTMP            ;STORAGE FOR NUMTMP TEMP DESCRIPTORS
F3.4TH:1615 DSCTMP:  BLOCK    STRSIZ                   ;STRING FUNCTIONS BUILD ANSWER DESCRIPTOR HERE
F3.4TH:7026          DCX      H                        ;DECREMENT TEMPPT BY STRSIZ



*** SVARS
F3.4TH:6734 SVARS:   LHLD     VARTAB                   ;GET START OF SIMPLE VARIABLES



*** THENTK
F3.4TH: 197         EXAMPLE: SYNCHK THENTK (THE MATCH CHARACTER IS
F3.4TH: 199         WOULD CHECK TO MAKE SURE [H,L] POINTED TO A THENTK
F3.4TH:1023          THENTK=Q 
F3.4TH:3659          SYNCHK   THENTK                   ;MUST HAVE A THEN



*** TOFF
F3.4TH:1095          ADR(TOFF)
F3.4TH:3103 TOFF:    XRA      A                        ;MAKE [A]=0 FOR NO TRACE



*** TRUFIN
F3.4TH:7620 TRUFIN:  MVI      A,8                      ;UNLOAD THE HEAD



*** USERR
F3.4TH:3340 USERR:   MVI      E,ERRUS  



*** USINTK
F3.4TH:1022          USINTK==Q>



*** USRLOC
F3.4TH: 906 USRLOC:  ADR(ILLFUN)                       ;INITIALLY NO USER ROUTINE



*** VPUSHF
F4.4TH:1286          REPEAT   0,<                      ;VPUSHF WILL BE IN-LINE IN F3
F4.4TH:1290 VPUSHF:  LDA      VALTYP                   ;GET THE VALUE TYPE



