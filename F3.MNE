  55          PUSH     D        
  56          PUSH     B>       
  58          POP      B        
  59          POP      D>       
 730 SUBTTL   RST ROUTINES
 732 START:   DI                                ;DISENABLE INTERRUPTS
 733          JMP      INIT                     ;INIT IS THE INTIALIZE ROUTINE
 764          MOV      A,M                      ;GET THE CURRENT CHARACTER
 765          XTHL                              ;GET CALL ADDRESS INTO [H,L]
 767          CMP      M                        ;SEE IF [A] #CURRENT CHARACTER
 769          INX      H                        ;FIX RETURN ADDRESS.
 770          XTHL                              ;PUT RETURN ADDRESS BACK AND RESTORE
 772          JNZ      SNERR                    ;IF THE CHARACTER WASN'T RIGHT CALL
 790          INX      H                        ;UPDATE THE TEXT POINTER
 791          MOV      A,M                      ;GET NEW CHARACTER
 792          CPI      ":"                      ;MAKE ":" HAVE ZERO ON AND
 797          RNC                               ;.GT.":" GO BACK
 798          JMP      CHRCON                   ;NO ROOM FOR WHOLE ROUTINE
 807 OUTDO:   PUSH     PSW      
 809          LDA      CNTWFL                   ;GET SUPPRESS FLAG
 812          ORA      A>                       ;SEE IF IT IS SET
 814          LDA      TTYPOS>                  ;USE RST BYTES, [A]=TTYPOS
 815          JMP      OUTCON   
 827          MOV      A,H      
 828          SUB      D        
 829          RNZ      
 830          MOV      A,L      
 831          SUB      E        
 832          RET      
 849 SIGN:    LDA      FAC      
 852          ORA      A        
 853          JNZ      SIGNC    
 856          RET      
 869          XTHL                              ;SWITCH [H,L] AND RETURN ADDRESS
 870          SHLD     PUSHMA+1                 ;FIXUP JUMP TO PLACE TO GO
 873          POP      H                        ;REGAIN [H,L]
 875          JMP      $CODE+59                 ;IN 8K ALLOW USER TO HAVE RST 7
 880          RET                               ;INITIALLY NO INTERRUPT
 882          NOP      
 884          MOV      C,M                      ;GRAB FROM MEMORY
 885          INX      H        
 886          MOV      B,14     
 887          INX      H        
 888          PUSH     B                        ;PUSH [B,0] ONTO THE STACK
 890 PUSHMA:  JMP      PUSHMA                   ;RETURN ADDRESS STORED HERE
1346          DCL"SUBSCRIPT OUT OF RANGE"
1693 SUBTTL   TEXT CONSTANTS FOR PRINT OUT
1704 INTXT:   DC" IN "
1735 FNDFOR:  LXI      H,4+$CODE                ;IGNORING EVERYONES "NEWSTT"
1739          DAD      SP                       ;SUBROUTINE, SET [H,L]=SP
1740 LOOPER:  MOV      A,M                      ;SEE WHAT TYPE OF THING IS ON THE STACK
1741          INX      H        
1742          CPI      FORTK                    ;IS THIS STACK ENTRY A FOR?
1744          RNZ                               ;NO SO OK
1749          MOV      C,M      
1750          INX      H                        ;DO EQUIVALENT OF PUSHM / XTHL
1751          MOV      B,M      
1752          INX      H        
1753          PUSH     H                        ;PUT H ON
1754          MOV      L,C                      ;PUSH B / XTHL IS SLOWER
1755          MOV      H,B      
1756          MOV      A,D                      ;FOR THE "NEXT" STATMENT WITHOUT AN ARGUMENT
1757          ORA      E                        ;WE MATCH ON ANYTHING
1758          XCHG                              ;MAKE SURE WE RETURN [D,E]
1759          JZ       POPGOF                   ;POINTING TO THE VARIABLE
1764 POPGOF:  LXI      B,$CODE+13               ;TO WIPE OUT A FOR ENTRY
1767          POP      H        
1768          RZ                                ;IF FOR MATCHES GOOD
1769          DAD      B        
1770          JMP      LOOPER                   ;TRY THE NEXT ONE
1788 BLTU:    CALL     REASON                   ;CHECK DESTINATION TO MAKE
1792 BLTUC:   PUSH     B                        ;EXCHANGE [B,C] AND [H,L]
1793          XTHL     
1794          POP      B        
1796          MOV      A,M                      ;GET THE WORD TO TRANSFER
1797          STAX     B                        ;TRANSFER IT
1798          RZ       
1799          DCX      B        
1800          DCX      H                        ;BACKUP FOR NEXT GUY
1801          JMP      BLTLOP   
1821 GETSTK:  XTHL     
1822          MOV      C,M                      ;GET ARGUMENT INTO [C]
1824          INX      H        
1825          XTHL                              ;PUT BACK RETURN ADDRESS
1826          PUSH     H                        ;SAVE [H,L]
1827          LHLD     STREND   
1830          MVI      B,0      
1832          DAD      B        
1833          DAD      B                        ;SEE IF WE CAN HAVE THIS MANY
1834          CALL     REASON   
1837          POP      H                        ;RESTORE [H,L]
1838          RET      
1846 REASON:  PUSH     D                        ;SAVE [D,E]
1847          XCHG                              ;PUT [H,L] IN [D,E]
1848          LXI      H,$CODE+65536-2*NUMLEV   ;SETUP OFFSET OF GUARANTEED
1852          DAD      SP                       ;[H,L]=STACK POINTER + OFFSET
1854          XCHG                              ;RESTORE [H,L] FROM [D,E]
1855          POP      D                        ;GET [D,E] BACK
1856          RNC                               ;WAS OK?
1857 OMERR:   MVI      E,ERROM                  ;"OUT OF MEMORY"
1862          JMP      ERROR>   
1868 DATSNE:  LHLD     DATLIN                   ;GET DATA LINE
1871          SHLD     CURLIN>                  ;MAKE IT CURRENT LINE
1874 SNERR:   MVI      E,ERRSN  "SYNTAX  ERROR"   
1877 DV0ERR:  MVI      E,ERRDV0                 ;DIVISION BY ZERO
1881 NFERR:   MVI      E,ERRNF>                 ;"NEXT WITHOUT FOR" ERROR
1883 ERROR:   CALL     STKINI                   ;RESET THE STACK AND FLAGS
1887          XRA      A        
1888          STA      CNTWFL>                  ;FORCE OUTPUT
1891          CALL     CRDO                     ;CRLF
1894          LXI      H,ERRTAB                 ;GET START OF ERROR TABLE
1898 LEPSKP:  CALL     REM                      ;SKIP AN ERROR MESSAGE
1901          DCR      E                        ;DECREMENT ERROR COUNT
1902          INX      H                        ;SKIP OVER THIS ERROR MESSAGE
1903          JNZ      LEPSKP>                  ;SKIP SOME MORE
1907          MOV      D,A                      ;GET ZERO INTO D
1908          MVI      A,"?"                    ;START OF ERROR MESSAGE
1910          DAD      D                        ;ADD IN ERROR CODE
1911          MOV      A,M                      ;GET FIRST ERROR CHARACTER
1915          LXI      H,ERR>                   ;GET POINTER TO " ERROR"
1916 ERRFIN:  CALL     STROUT                   ;TYPE IT
1919          LHLD     CURLIN                   ;CURRENT LINE #
1922          MOV      A,H                      ;SEE IF IN DIRECT MODE
1923          ANA      L        
1924          INR      A                        ;ZERO SAYS DIRECT MODE
1925          CNZ      INPRT                    ;PRINT LINE NUMBER IN [H,L]
1931 STOP:    RNZ                               ;MAKE SURE HE TERMINATED IT
1932 STPEND:  POP      B                        ;GET RID OF "NEWSTT" RETURN ADDRESS
1939 STPRDY:  POP      B>       
1941          CALL     FINLPT>                  ;PRINT ANY LEFT OVERS
1943          XRA      
1944          STA      CNTWFL>                  ;FORCE OUTPUT
1947          LXI      H,$CODE+65535
1950          SHLD     CURLIN                   ;SETUP CURLIN FOR DIRECT MODE
1953          LXI      H,REDDY                  ;"READY" CRLF CRLF
1956 REPINI:  CALL     INIT                     ;PRINT IT, REPLACED BY CALL STROUT
1961 MAIN:    CALL     INLIN                    ;GET A LINE FROM TTY
1965          INR      A                        ;SEE IF 0 SAVING THE CARRY FLAG
1966          DCR      A        
1967          JZ       MAIN                     ;IF SO, A BLANK LINE WAS INPUT
1970          PUSH     PSW                      ;SAVE STATUS INDICATOR FOR 1ST CHARACTER
1971          CALL     LINGET                   ;READ IN A LINE #
1974          PUSH     D                        ;SAVE LINE #
1975          CALL     CRUNCH                   ;CRUNCH THE LINE DOWN
1978          MOV      B,A                      ;A=0 AFTER CRUNCH, [B,C]=CHAR COUNT FOR NODEL
1979          POP      D                        ;RESTORE LINE #
1980          POP      PSW                      ;WAS THERE A LINE #?
1981          JNC      GONE                     ;IF NOT ITS A DIRECT STATEMENT
1984          PUSH     D        
1985          PUSH     B                        ;SAVE LINE # AND CHARACTER COUNT
1987          PUSH     PSW                      ;BLANK SO WE DON'T INSERT IT
1988          CALL     FNDLIN                   ;GET A POINTER TO THE LINE
1991          PUSH     B                        ;SAVE THE POINTER
1993          CC       DEL>                     ;DELETE THE LINE
1997          JNC      NODEL                    ;NO MATCH SO DON'T DELETE
1998          XCHG                              ;[D,E] NOW HAS THE POINTER TO THE LINE
2000          LHLD     VARTAB                   ;COMPACTIFYING TO VARTAB
2001 MLOOP:   LDAX     D        
2002          STAX     B                        ;SHOVING DOWN TO ELIMINATE A LINE
2003          INX      B        
2004          INX      D        
2006          JNC      MLOOP                    ;DONE COMPACTIFYING?
2007          MOV      H,B      
2008          MOV      L,C      
2009          INX      H                        ;NEW VARTAB
2010          SHLD     VARTAB>  
2011 NODEL:   POP      D                        ;POP POINTER AT PLACE TO INSERT
2012          POP      PSW                      ;SEE IF THIS LINE HAD
2014          JZ       FINI                     ;IF NOT DON'T INSERT
2017          LHLD     VARTAB                   ;CURRENT END
2020          XTHL                              ;[H,L]=CHARACTER COUNT. VARTAB
2022          POP      B                        ;[B,C]=OLD VARTAB
2023          DAD      B        
2024          PUSH     H                        ;SAVE NEW VARTAB
2025          CALL     BLTU     
2028          POP      H                        ;POP OFF VARTAB
2029          SHLD     VARTAB                   ;UPDATE VARTAB
2032          XCHG     
2033          MOV      M,H                      ;FOOL CHEAD WITH NON-ZERO LINK
2034          INX      H                        ;SO IT DOESN'T THINK
2037          INX      H        
2038          POP      D                        ;GET LINE # OFF STACK
2039          MOV      M,E      
2040          INX      H                        ;PUT DOWN LINE #
2041          MOV      M,D      
2042          INX      H        
2044          LXI      D,BUF                    ;MOVE LINE FROM BUF TO PROGRAM AREA
2047 MLOOPR:  LDAX     D                        ;NOW TRANSFERING LINE
2049          MOV      M,A      
2050          INX      H        
2051          INX      D        
2052          ORA      A                        ;ZERO MARKS THE END
2053          JNZ      MLOOPR   
2056 FINI:    CALL     RUNC                     ;DO CLEAR & SET UP STACK
2060          INX      H        
2067 CHEAD:   MOV      D,H      
2068          MOV      E,L      
2069          MOV      A,M                      ;SEE IF END OF CHAIN
2070          INX      H                        ;BUMP POINTER
2071          ORA      M                        ;2ND BYTE
2072          JZ       MAIN                     ;DONE
2075          INX      H                        ;FIX H TO START OF TEXT
2076          INX      H        
2077          INX      H        
2078          XRA      A                        ;SEARCHING FOR A ZERO IN MEMORY
2079 CZLOOP:  CMP      M                        ;TO MARK THE END OF THIS LINE
2080          INX      H                        ;BUMP POINTER
2081          JNZ      CZLOOP                   ;END OF LINE
2084          XCHG                              ;SWITCH TEMP
2085          MOV      M,E                      ;DO FIRST BYTE OF FIXUP
2086          INX      H                        ;ADVANCE POINTER
2087          MOV      M,D                      ;2ND BYTE OF FIXUP
2088          XCHG                              ;AND BACK AGAIN
2089          JMP      CHEAD                    ;KEEP CHAINING TIL DONE
2098 SCNLIN:  LXI      D,$CODE                  ;ASSUME START LIST AT ZERO
2101          PUSH     D                        ;SAVE INITIAL ASSUMPTION
2102          JZ       ALLLST                   ;IF FINISHED, LIST IT ALL
2105          POP      D                        ;WE ARE GOING TO GRAB A #
2106          CALL     LINGET                   ;GET A LINE #. IF NONE, RETURNS ZERO
2109          PUSH     D                        ;SAVE FIRST
2110          JZ       ONELIN                   ;IF ONLY # THEN DONE.
2115 ALLLST:  LXI      D,$CODE+-06552           ;ASSUME MAX END OF RANGE
2118          CNZ      LINGET                   ;GET THE END OF RANGE
2121          JNZ      SNERR                    ;MUST BE TERMINATOR
2124 ONELIN:  XCHG                              ;[H,L] = FINAL
2125          POP      D                        ;GET INITIAL IN [D,E]
2126          XTHL                              ;PUT MAX ON STACK, RETURN ADDR TO [H,L]
2127          PUSH     H>                       ;SAVE RETURN ADDRESS BACK
2148 FNDLIN:  LHLD     TXTTAB                   ;GET POINTER TO START OF TEXT
2151 LOOP:    MOV      B,H                      ;IF EXITING BECAUSE OF END OF PROGRAM,
2153          MOV      C,L      
2154          MOV      A,M                      ;GET WORD POINTER TO
2155          INX      H                        ;BUMP POINTER
2156          ORA      M                        ;GET 2ND BYTE
2157          DCX      H                        ;GO BACK
2158          RZ                                ;IF ZERO THEN DONE
2159          PUSH     B        
2162          POP      H                        ;POP HERE
2164          POP      H                        ;GET LINK
2165          POP      B                        ;GET POINTER TO THIS LINE IN [B,C]
2166          CMC                               ;TURN CARRY ON
2167          RZ                                ;EQUAL RETURN
2168          CMC                               ;MAKE CARRY ZERO
2169          RNC                               ;NO MATCH RETURN (GREATER)
2170          JMP      LOOP                     ;KEEP LOOPING
2177 SCRATH:  RNZ                               ;MAKE SURE THERE IS A TERMINATOR
2178 SCRTCH:  LHLD     TXTTAB   
2182          XRA      A>       
2184          CALL     TUFF>                    ;TURN OFF TRACE, SET [A]=0.
2187          MOV      M,A                      ;SAVE AT END OFF TEXT
2188          INX      H                        ;BUMP POINTER
2189          MOV      M,A                      ;SAVE ZERO
2190          INX      H                        ;BUMP POINTER
2191          SHLD     VARTAB                   ;NEW START OF VARIABLE
2196 RUNC:    LHLD     TXTTAB                   ;POINT AT THE START OF TEXT
2199          DCX      H        
2207 CLEARC:  SHLD     TEMP                     ;SAVE [H,L] IN TEMP
2211          LHLD     MEMSIZ   
2214          SHLD     FRETOP>                  ;FREE UP STRING SPACE
2217          CALL     RESTORE                  ;RESTORE DATA
2220          LHLD     VARTAB                   ;GET START OF VARIABLE SPACE
2223          SHLD     ARYTAB                   ;SAVE IN START OF ARRAY SPACE
2226          SHLD     STREND                   ;AND END OF VARIABLE STORAGE
2237 STKINI:  POP      B                        ;GET RETURN ADDRESS HERE
2238          LHLD     STKTOP                   ;[H,L] POINTER TO END OF MEMORY
2241          SPHL                              ;INITIALIZE STACK
2243          LXI      H,TEMPST 
2246          SHLD     TEMPPT>                  ;INITIALIZE STRING TEMPORARIES
2249          LXI      H,$CODE                  ;PUT ZERO (NON NEXT, FOR, GOSUB TOKEN)
2252          PUSH     H                        ;ON STACK
2257          CALL     FINLPT>  
2258          LHLD     TEMP                     ;GET SAVED [H,L]
2263          STA      SUBFLG>                  ;ALLOW SUBSCRIPTS
2266          PUSH     B                        ;PUT RETURN ADDRESS BACK ON
2267          RET                               ;GO BACK
2269 QINLIN:  MVI      A,"?"                    ;GET A QMARK
2272          MVI      A,"      "               ;SPACE
2277          INX      H>                       ;GET A LINE OF INPUT FROM TTY
2290          XRA      A        
2291          STA      DORES>                   ;ALLOW CRUNCHING
2294          MVI      C,5                      ;COUNT OF CHARS AT LEAST 5
2296          LXI      D,BUF                    ;SETUP DESTINATION POINTER
2299 KLOOP:   MOV      A,M                      ;GET CHARACTER FROM BUF
2300          CPI      "        "               ;IS IT A SPACE WE WANT TO SAVE
2302          JZ       STUFFH                   ;YES, STUFF IN DESTINATION LINE.
2305          MOV      B,A                      ;GET A CHARACTER FROM THE LINE
2307          CPI      34                       ;QUOTE SIGN?
2309          JZ       STRNG                    ;YES, GO TO SPECIAL STRING HANDLING
2312          ORA      A                        ;END OF LINE?
2313          JZ       CRDONE                   ;YES, DONE CRUNCHING
2317          LDA      DORES                    ;IN DATA STATEMENT AND NO CRUNCH?
2320          ORA      A        
2321          MOV      B,A                      ;INITIALIZE RESERVED WORD COUNT
2322          MOV      A,M                      ;GET THE CHARACTER AGAIN
2323          JNZ      STUFFH>                  ;IF NO CRUNCHING JUST STORE
2328          CPI      "?"                      ;A QMARK?
2330          MVI      A,PRINTK 
2332          JZ       STUFFH                   ;THEN USE A "PRINT" TOKEN
2335          MOV      A,M      
2336          CPI      "0"                      ;SKIP NUMERICS
2338          JC       MUSTCR                   ;SINCE CRUNCHING IS SLOW
2341          CPI      60                       ;":" ALSO PUT IN QUICKLY
2343          JC       STUFFH   
2347          PUSH     D                        ;SAVE STORE POINTER
2349          MVI      B,0>                     ;INIT RESERVED WORD COUNT
2350          LXI      D,RESLST-1               ;INIT TO RESERVED WORD LIST
2353          PUSH     H                        ;SAVE IN BUF POINTER
2356          INX      D                        ;BUMP DEPOSIT POINTER
2357 RESER:   LDAX     D                        ;GET A BYTE FROM RESERVED WORD LIST
2358          ANI      127                      ;GET RID OF SIGN BIT
2360          JZ       TABEND                   ;END OF RESERVED WORD TABLE
2363          CMP      M                        ;TWO CHARS THE SAME?
2364          JNZ      NTHIS                    ;NO, DIFFERENT
2368          ORA      A                        ;SET CONDITION CODES
2369          JP       NXTRES                   ;IF SIGN SET, RESERVED WORD FOUND
2372 FOUND:   POP      PSW                      ;TAKE OFF GARBAGE ORIG POINTER
2373          MOV      A,B                      ;GET RESERVED WORD #
2374          ORI      128                      ;SET MSB TO FLAG AS RESERVED WORD
2377 TABEND:  POP      H                        ;GET BACK ORIG POINTER
2378          MOV      A,M                      ;GET BACK ORIG CHAR
2379          POP      D                        ;GET STUFF POINTER BACK
2381          XCHG                              ;[H,L]=STUFF POINTER
2382          CPI      ELSETK                   ;HAVE TO PUT A HIDDEN
2385          MVI      M,":"                    ;STORE IT
2387          CZ       INXHRT##                 ;ADVANCE POINTER ON "ELSE"
2393 STUFFH:  INX      H                        ;ENTRY TO BUMP [H,L]
2394          STAX     D                        ;SAVE CHARACTER IN CRUNCHED LINE
2395          INX      D                        ;BUMP SAVE POINTER
2396          INR      C                        ;BUMP CRUNCHED CHARACTER COUNT
2398          SUI      ":"                      ;SEE IF IT IS A COLON
2400          JZ       COLIS                    ;IF SO ALLOW CRUNCHING AGAIN
2403          CPI      DATATK-":"
2405          JNZ      NODATT                   ;SEE IF IT IS A DATA TOKEN
2408 COLIS:   STA      DORES                    ;SETUP FLAG
2411 NODATT:  SUI      REMTK-":">
2414          JNZ      KLOOP                    ;KEEP LOOPING
2417          MOV      B,A                      ;REM DOESN'T STOP ON ":", ONLY ON A ZERO
2418 STR1:    MOV      A,M                      ;GET A CHAR
2419          ORA      A                        ;SET CONDITION CODES
2420          JZ       CROONE                   ;IF END OF LINE THEN DONE
2423          CMP      B                        ;END OF GOBBLE
2424          JZ       STUFFH                   ;IF YES, DONE WITH STRING
2427 STRNG:   INX      H                        ;INCREMENT TEXT POINTER
2428          STAX     D                        ;STORE CHAR
2429          INR      C                        ;BUMP COUNT
2430          INX      D                        ;AND POINTER
2431          JMP      STR1                     ;KEEP LOOPING
2435 NTHIS:   POP      H                        ;RESTORE TEXT STRING
2436          PUSH     H                        ;AND SAVE IT BACK
2437          INR      B                        ;INCREMENT RESERVED WORD #
2438          XCHG                              ;RESLST POINTER INTO [H,L]
2439 NTHIS1:  ORA      M                        ;TEST BITS IN RESERVED WORD LIST
2440          INX      H        
2441          JP       NTHIS1                   ;SKIP MORE
2444          XCHG                              ;RESLST POINTER INTO [D,E]
2446          JMP      RESER                    ;DONE, MOVE TO NEXT RESERVED WORD
2449 CROONE:  LXI      H,BUFMIN                 ;LEAVE WITH [H,L] POINTER TO START OF LINE
2452          STAX     D                        ;NEED THREE 0'S ON THE END
2453          INX      D                        ;ONE FOR END-OF-LINE
2454          STAX     D                        ;AND 2 FOR A ZERO LINK
2455          INX      D                        ;SINCE IF THIS IS A DIRECT STATEMENT
2456          STAX     D                        ;ITS END MUST LOOK LIKE THE END OF A PROGRAM
2457          RET                               ;END OF CRUNCHING
2467 LINLIN:  DCR      B                        ;BACK ARROW SO DECREMENT COUNT
2468          DCX      H                        ;BACK UP POINTER
2471          JNZ      INLINC                   ;NOT TOO MANY SO CONTINUE
2477          CALL     CRDO                     ;TYPE A CRLF
2480 INLIN:   LXI      H,BUF    
2483          MVI      B,1                      ;CHARACTER COUNT
2485 INLINC:  CALL     INCHR                    ;GET A CHARACTER
2489          CPI      7                        ;IS IT BOB ALBRECHT RINGING THE BELL
2491          JZ       GOODCH>                  ;FOR SCHOOL KIDS?
2494          CPI      13                       ;IS IT A CARRIAGE RETURN?
2496          JZ       FININL                   ;IF SO FINISH UP
2499          CPI      32                       ;CHECK FOR FUNNY CHARACTERS
2501          JC       INLINC   
2504          CPI      125      
2506          JNC      INLINC                   ;BIG ONES BAD TOO
2509          CPI      "@"                      ;LINE DELETE?
2511          JZ       INLINN   
2514          CPI      "+"                      ;CHARACTER DELETE?
2516          JZ       LINLIN   
2519 GOODCH:  MOV      C,A      
2520          MOV      A,B      
2521          CPI      BUFLEN   
2523          MVI      A,7                      ;GET A BELL IN CASE LINE TOO LONG.
2525          JNC      OUTBEL                   ;LINE TOO LONG, RING BELL.
2528          MOV      A,C      
2529          MOV      M,C                      ;STORE THIS CHARACTER
2530          INX      H        
2531          INR      B        
2535          JMP      INLINC   
2540          JNZ      PPSWRT>                  ;NO, DO OUTPUT
2545          LDA      PRTFLG                   ;SEE IF WE WANT TO TALK TO LPT
2546          ORA      A                        ;TEST BITS
2547          JZ       TTYCHR                   ;IF ZERO THEN NOT
2548          POP      PSW                      ;GET CHARACTER WE WANT TO PRINT
2549          PUSH     PSW      
2550          CPI      13                       ;IS IT CARRIAGE RETURN?
2551          CZ       PRINTW                   ;FORCE OUT A LINE
2552          JC       PPSWRT                   ;IF FUNNY CONTROL CHARACTER (LF) DO NOTHING
2553          LDA      LPTPOS                   ;WHERE ARE WE?
2554          CPI      LPTLEN                   ;AT THE END?
2555          CNC      PRINTW                   ;YES, START OVER
2556          INR      A        
2557          STA      LPTPOS   
2558 LPTWAT:  IN       2        
2559          ANI      2        
2560          JZ       LPTWAT   
2561          POP      PSW      
2562          OUT      3                        ;SEND OUT CHAR
2563          RET      RETURN   
2565 FINLPT:  XRA      A                        ;RESET PRINT FLAG SO OUTPUT
2566          STA      PRTFLG                   ;GOES TO THE TERMINAL
2567          LDA      LPTPOS                   ;SEE IF ANY LEFTOVERS MUST BE
2568          ORA      A                        ;FORCED OUT
2569          RZ                                ;BY LOOKING AT LPTPOS
2570 PRINTW:  IN       2                        ;MAKE SURE LAST PRINT
2571          ANI      2                        ;FINISHED BY TESTING DONE
2572          JZ       PRINTW                   ;BIT
2574          LDA      LPTPOS   
2575          ORA      A                        ;CHARACTERS IN THE BUFFER?
2576          JNZ      PRINTR                   ;IF SO DON'T CLEAR THE BUFFER
2577          MVI      A,4                      ;OTHERWISE BUFFER MUST BE EMPTIED
2578          OUT      2                        ;CLEAR THE BUFFER
2580 PRINTR:  MVI      A,1                      ;TELL LPT TO PRINT
2581          OUT      2                        ;STATUS REG
2582          DCR      A                        ;[A]=0
2583          STA      LPTPOS                   ;RESET LINE PRINT POSITION
2587          POP      PSW                      ;GET THE CHARACTER
2588          PUSH     PSW                      ;AND SAVE IT AGAIN
2589          CPI      32                       ;IS THIS A MEANINGFUL CHARACTER?
2591          JC       TRYOUT>                  ;IF IT'S A NON-PRINTING CHARACTER
2596          LDA      TTYPOS>                  ;SEE IF PRINT HEAD IS AT THE END OF THE LINE
2599          CPI      LINLEN                   ;MODIFIED BY "TERMINAL WIDTH?" QUESTION IN INIT
2603          CZ       CRDO                     ;TYPE CRLF AND SET TTYPOS AND (A)= IF SO
2606          INR      A                        ;INCREMENT TTYPOS SINCE WE'RE
2608          STA      TTYPOS                   ;STORE NEW PRINT HEAD POSITION
2613 NOPRIN:  IN       0                        ;GET STATUS
2616          ANI      ODONE                    ;0K TO SEND CHAR
2618          JNZ      NOPRIN>                  ;KEEP LOOPING
2621          POP      PSW                      ;GET CHARACTER BACK
2622          OUT      TTOCHN                   ;SEND OUT THE CHAR
2625          RET                               ;RETURN FROM OUTCHR
2629 TRYIN:   IN       0                        ;GET STATUS
2632          ANI      IDONE                    ;TEST BIT
2634          JNZ      TRYIN>                   ;GO BACK & DO IT AGAIN
2637          IN       TTICHN                   ;GET A CHAR
2640          ANI      127                      ;GET RID OF PARITY BIT
2643          CPI      CONTW                    ;IS IT SUPRESS OUTPUT?
2645          RNZ      
2646          LDA      CNTWFL   
2649          CMA                               ;COMPLEMENT ITS STATE
2650          STA      CNTWFL>                  ;SAVE BACK
2653          RET      
2659 LLIST:   MVI      A,1                      ;GET NON ZERO VALUE
2660          STA      PRTFLG>                  ;SAVE IN I/O FLAG
2661 LIST:    CALL     LINGET                   ;GET LINE NUMBER INTO [D,E]
2662          RNZ                               ;MUST BE A TERMINATOR OR ERROR
2663          POP      B                        ;GET RID OF NEWSTI RETURN ADDR
2664          CALL     FNDLIN                   ;FIND LINE GREATER THAN OR EQUAL TO [D,E]
2665          PUSH     B                        ;SAVE START POINTER
2666 LIST4:   POP      H                        ;GET POINTER TO LINE
2668          POP      B                        ;TAKE OFF FOR A SECOND
2669          MOV      A,B                      ;SEE IF END OF CHAIN
2670          ORA      C        
2671          JZ       READY    
2673          CALL     ISCNTC>                  ;CHECK FOR CONTROL-C
2674          PUSH     B                        ;PUT BACK ON
2675          CALL     CRDO                     ;DO CRLF TO START OUT
2677          XTHL                              ;GET LINE # INTO [H,L]
2679          CALL     LINPRT                   ;PRINT AS INT WITOUT LEADING SPACE
2680          MVI      A,"      "        
2681 PRIT4:   POP      H                        ;RESTORE POINTER TO START OF TEXT
2683          MOV      A,M                      ;GET A CHARACTER FROM LINE.
2684          ORA      A                        ;IS IT A RESERVED WORD
2685          INX      H                        ;INCREMENT POINTER INTO TEXT
2686          JZ       LIST4                    ;ZERO, END OF LINE, GET NEXT LINE
2687          JP       PLOOP                    ;REGULAR CHAR, JUST PRINT IT
2688          SUI      127                      ;GET RID OF SIGN BIT AND ADD ONE
2689          MOV      C,A                      ;GET RESERVED WORD # IN C
2690          PUSH     H                        ;SAVE CURRRENT POSIT
2691          LXI      D,RESLST                 ;GET RESLST POINTER.
2692 RESRCH:  PUSH     D                        ;SAVE
2694 RESCRI:  LDAX     D                        ;GET CHARACTER FROM RESLST
2695          INX      D                        ;BUMP RESLST POINTER
2696          ORA      A                        ;TEST BITS
2697          JP       RESCRI                   ;NOT AT END OF RESERVED WORD YET
2698          DCR      C                        ;DECREMENT CHAR
2699          POP      H                        ;POP START POINTER HERE
2700          JNZ      RESRCH                   ;NOT AT END OF RESLST YET.
2702 PRIT3:   MOV      A,M                      ;GET A CHARACTER FROM RESERVED WORD
2703          ORA      A                        ;SET CONDITION CODES
2704          JM       PRIT4    
2706          INX      H                        ;BUMP RESLST POINTER
2707          JMP      PRIT3>                   ;PRINT THE REST
2732          MVI      A,100    
2734          STA      SUBFLG>                  ;DONT RECOGNIZE SUBSCRIPTED VARIABLES
2737          CALL     LET                      ;READ THE VARIABLE AND ASSIGN IT
2743          XTHL                              ;SAVE TEXT PTR ON THE STACK
2744          CALL     FNDFOR                   ;MUST HAVE VARIABLE POINTER IN [D,E]
2747          POP      D                        ;[D,E]=TEXT POINTER
2748          JNZ      NOTOL                    ;IF NO MATCHING ENTRY, DON'T
2752          DAD      B                        ;IN THE CASE OF "FOR"
2755          SPHL                              ;DO THE ELIMINATION
2757 NOTOL:   XCHG                              ;[H,L]=TEXT POINTER
2758          CALL     GETSTK   
2763          PUSH     H                        ;REALLY SAVE THE TEXT POINTER
2764          CALL     DATA                     ;GET AN [H,L] THAT POINTS
2768          XTHL                              ;PUT [H,L] POINTER 10 TERMINATOR ON THE STACK
2771          PUSH     H                        ;PUSH THE TEXT POINTER ONTO THE STACK
2772          LHLD     CURLIN                   ;[H,L] GET THE CURRENT LINE #
2775          XTHL                              ;NOW THE CURRENT LINE # IS ON THE STACK AND
2782          CALL     FRMNUM>                  ;READ FINAL VALUE
2784          CALL     FRMEVL>  
2787          PUSH     H                        ;SAVE THE TEXT POINTER
2789          CALL     FRCSNG>  
2792          CALL     MOVRF                    ;GET THE STUFF
2795          POP      H                        ;REGAIN TEXT POINTER
2796          PUSH     B                        ;OPPOSITE OF PUSHR
2797          PUSH     D                        ;SAVE THE SIGN OF THE INCREMENT
2798          LXI      B,$CODE+^O201*256
2801          MOV      D,C      
2802          MOV      E,D                      ;GET 1.0 IN THE REGISTERS
2803          MOV      A,M                      ;GET TERMINATING CHARACTER
2804          CPI      STEPTK                   ;DO WE HAVE "STEP" ?
2806          MVI      A,1                      ;SETUP DEFAULT SIGN
2808          JNZ      ONEON                    ;PUSH SOME CONSTANTS ON IF NOT
2814          CALL     FRMNUM>>                 ;READ THE STEP
2816          CALL     FRMCHK>                  ;DON'T NEED TO CHECK THE TYPE
2819          PUSH     H        
2821          CALL     FRCSNG>  
2824          CALL     MOVRF                    ;SET UP THE REGISTERS
2827          POP      H        
2829 ONEON:   PUSH     B                        ;PUT VALUE ON BACKWARDS
2830          PUSH     D                        ;OPPOSITE OF PUSHR
2831 IFORDN:  PUSH     PSW                      ;SAVE THE SIGN OF THE INCREMENT
2832          INX      SP                       ;A ONE BYTE ENTRY ONLY
2833          PUSH     H        
2834          LHLD     TEMP                     ;GET THE POINTER TO THE VARIABLE BACK
2837          XTHL                              ;PUT THE POINTER TO THE VARIABLE
2839 NXTCON:  MVI      B,FORTK                  ;PUT A 'FOR' TOKEN ONTO THE STACK
2841          PUSH     B        
2842          INX      SP                       ;THE "TOKEN" ONLY TAKES ONE BYTE OF
2856          IN       0                        ;CHECK FOR A CHARACTER WITHOUT
2860          ANI      IDONE                    ;CHARACTER THERE?
2862          CZ       CNTCCN>                  ;SEE IF IT'S CONTROL-C
2866          CALL     ISCNTC   
2868          SHLD     TEMP>                    ;USED BY CONTINUE AND INPUT AND CLEAR
2874          STA      PRTFLG>  
2875          MOV      A,M                      ;GET CURRENT CHARACTER
2877          CPI      ":"                      ;IS IT A COLON?
2879          JZ       GONE     
2882          ORA      A        
2883          JNZ      SNERR                    ;MUST BE A ZERO
2886          INX      H        
2887          MOV      A,M                      ;CHECK POINTER TO SEE IF
2890          INX      H        
2891          ORA      M                        ;OR IN HIGH PART
2892          INX      H        
2893          JZ       ENDCON                   ;RAN OFF THE END -- OK
2896          MOV      E,M      
2897          INX      H        
2898          MOV      D,M                      ;GET LINE # IN [0,E]
2899          XCHG                              ;[H,L]=LINE #
2900          SHLD     CURLIN                   ;SETUP CURLIN WITH THE CURRENT LINE #
2904          LDA      TRCFLG                   ;SEE IF TRACE IS ON
2907          ORA      A                        ;NON-ZERO MEANS YES
2908          JZ       NOTTRC                   ;SKIP THIS PRINTING
2911          PUSH     D                        ;SAVE THE TEXT POINTER
2912          MVI      A,"C"                    ;FORMAT THE LINE NUMBER
2915          CALL     LINPRT                   ;PRINT THE LINE IN [H,L]
2918          MVI      A,"]"                    ;SOME MORE FORMATING
2921          POP      D                        ;[D,E]=TEXT POINTER
2923          XCHG                              ;RESTORE THE TEXT POINTER
2925          LXI      D,NEWSTT                 ;PUSH ON A RETURN ADDRESS OF NEWSTT
2928          PUSH     D                        ;STATEMENT
2929          GONE     3:       RZ              ;IF A TERMINATOR TRY AGAIN
2931 GONE2:   SUI      ENDTK                    ;"ON ... GOTO" AND "ON ... GOSUB" COME HERE
2933          JC       LET                      ;MUST BE A LET
2937          CPI      NUMCMD   
2939          JNC      SNERR                    ;SOME RESERVED WORD, BUT NOT
2943          RLC                               ;MULTIPLY BY 2
2944          MOV      C,A      
2945          MVI      B,0      
2947          XCHG     
2948          LXI      H,STMDSP                 ;STATEMENT DISPATCH TABLE
2951          DAD      B                        ;ADD ON OFFSET
2952          MOV      C,M                      ;ONUSH THE ADDRESS TO GO TO ONTO
2953          INX      H                        ;THE STACK
2954          MOV      B,M                      ;PUSHM SAVES BYTES BUT NOT SPEED
2955          PUSH     B        
2956          XCHG                              ;RESTORE THE TEXT POINTER
2961 CHRGTR:  INX      H                        ;DUPLICATION OF CHRGET RST FOR SPEED
2962          MOV      A,M                      ;SEE CHRGET RST FOR EXPLANATION
2963          CPI      
2969 CHRCON:  CPI                               ;MUST SKIP SPACES
2971          JZ       CHRGTR                   ;GET ANOTHER CHARACTER
2974          CPI      "0"                      ;ALL CHARACTERS GREATER THAN
2977          CMC                               ;MAKE NUMERICS HAVE CARRY ON
2978          INR      A                        ;SET ZERO IF [A]=0
2979          DCR      A        
2980          RET      
2984 RESTOR:  XCHG                              ;SAVE [H,L] IN [D,E]
2985          LHLD     TXTTAB   
2988          DCX      H                        ;INITIALIZE DATPTR TO (TXTTAB) -1
2989 RESFIN:  SHLD     DATPTR                   ;READ FINISHES COME TO RESFIN
2992          XCHG                              ;GET THE TEXT POINTER BACK
2993          RET      
2996 ISCNTC:  IN       0        
2999          ANI      IDONE    
3001          RNZ                               ;IF NO CHARACTERS THEN NO ^C
3002 CNTCCN:  CALL     INCHR    
3005          CPI      3                        ;STOP CHARACTER IS ^C
3008          JMP      STOP>>   
3010 STOP:    RNZ                               ;RETURN IF NOT CONTROL-C AND MAKE
3014 END:     RNZ                               ;MAKE SURE "END" STATEMENTS HAVE A TERMINATOR
3015          SHLD     TEMP                     ;SAVE FOR "CONTINUE"
3018 STPEND:  POP      B                        ;POP OFF NEWSTT ADDRESS
3019 ENDCON:  PUSH     PSW                      ;SAVE THE MESSAGE FLAG
3021          LHLD     CURLIN                   ;SAVE CURLIN
3024          MOV      A,L      
3025          ANA      H                        ;SEE IF IT WAS DIRECT
3026          INR      A        
3027          JZ       DIRIS                    ;IF NOT SET UP FOR CONTINUE
3030          SHLD     OLDLIN                   ;SAVE OLD LINE #
3033          LHLD     TEMP                     ;GET POINTER TO START OF STATEMENT
3036          SHLD     OLDTXT                   ;SAVE IT
3041          XRA      A        
3042          STA      CNTWFL>                  ;FORCE OUTPUT
3045          POP      PSW                      ;GET BACK ^C FLAG
3046          LXI      H,BRKTXT                 ;"BREAK"
3049          JNZ      ERRFIN                   ;CALL STROUT AND FALL INTO READY
3052          JMP      READY>                   ;TYPE "READY"
3056 DDT:     POP      B                        ;GET RID OF NEWSTT RETURN
3061 CONT:    RNZ                               ;MAKE SURE THERE IS A TERMINATOR
3062          MVI      E,ERRCN  
3064          LHLD     OLDTXT                   ;A STORED TEXT POINTER OF
3070          MOV      A,H                      ;"STOP", "END", TYPING CRLF
3071          ORA      L                        ;TO "INPUT" AND ^C SETUP OLDTXT
3072          JZ       ERROR    
3075          XCHG                              ;SAVE [H,L]
3076          LHLD     OLDLIN   
3079          SHLD     CURLIN                   ;SET UP OLD LINE # AS CURRENT LINE #
3082          XCHG                              ;RESTORE [H,L]
3085 NULL:    CALL     GETBYT   
3088          RNZ                               ;MAKE SURE THERE IS A TERMINATOR
3089          INR      A        
3090          CPI      LINLEN                   ;MAKE SURE THE NUMBER IS REASONABLE
3094          JNC      FCERR                    ;"FUNCTION CALL" ERROR
3097          STA      NULCNT                   ;CHANGE NUMBER OF NULLS
3103 TOFF:    XRA      A                        ;MAKE [A]=0 FOR NO TRACE
3104          STA      TRCFLG                   ;UPDATE THE TRACE FLAG
3112 ISLET:   MOV      A,M      
3113          CPI      "A"      
3115          RC                                ;IF LESS THAN "A", RETURN EARLY
3116          CPI      91                       ;91="Z"+1
3118          CMC      
3119          RET      
3129 INTID2:  CALL     FRMNUM   
3131          JM       FCERR                    ;IF NEGATIVE BLOW HIM OUT
3132 DEINT:   LDA      FAC                      ;SEE IF ARG GREATER THAN 32767
3133          CPI      144      
3134          JC       QINT     
3137          CALL     FCOMP                    ;SEE IF FAC=REGISTERS
3138          MOV      D,C                      ;SETUP D=200 E=0 FOR -32768
3141 FCERR:   MVI      E,RRFC                   ;TOO BIG. FUNCTION CALL ERROR
3142          JMP      ERROR>   
3145 INTID2:  CALL     FRMEVL                   ;EVALUATE A FORMULA
3148          PUSH     H                        ;SAVE THE TEXT POINTER -
3149          CALL     FRCINT                   ;CONVERT THE FAC TO AN INTEGER
3152          MOV      A,H                      ;SEE IF THE RESULT IS NEGATIVE
3153          ORA      A                        ;BY LOOKING AT [H]'S MSB
3154          JM       FCERR                    ;DON'T ALLOW NEGATIVE NUMBERS -
3157          XCHG                              ;RETURN THE INTEGER IN [D,E]
3158          POP      H                        ;RESTORE THE TEXT POINTER
3173 LINGET:  DCX      H        
3174 LINGT2:  LXI      D,$CODE                  ;ZERO ACCUMULATED LINE
3178          RNC                               ;WAS IT A DIGIT
3179          PUSH     H        
3180          PUSH     PSW      
3181          LXI      H,$CODE+6552             ;SEE IF THE LINE # IS TOO BIG
3185          JC       SNERR                    ;YES, SYNTAX ERROR
3188          MOV      H,D                      ;SAVE [D,E]
3189          MOV      L,E      
3190          DAD      D        
3191          DAD      H        
3192          DAD      D        
3193          DAD      H                        ;PUTTING [D,E]*10 INTO [H,L]
3194          POP      PSW      
3195          SUI      "0"      
3197          MOV      E,A      
3198          MVI      D,0      
3200          DAD      D                        ;ADD THE NEW DIGIT
3201          XCHG     
3202          POP      H                        ;GET BACK TEXT POINTER
3203          JMP      MORLIN   
3207 CLEAR:   JZ       CLEARC                   ;IF NO FORMULA JUST CLEAR
3210          CALL     INTID2                   ;GET AN INTEGER INTO CD,E
3213          DCX      H        
3215          RNZ                               ;SHOULD FINISH THERE
3216          PUSH     H                        ;SAVE TXTPTR
3217          LHLD     MEMSIZ                   ;GET HIGHEST ADDRESS
3220          MOV      A,L                      ;SUBTRACT [H,L]-[D,E] INTO [D,E]
3221          SUB      E        
3222          MOV      E,A      
3223          MOV      A,H      
3224          SBB      D        
3225          MOV      D,A      
3226          JC       SNERR                    ;WANTED MORE THAN TOTAL!
3229          LHLD     VARTAB                   ;TOP LOCATION IN USE
3232          LXI      B,$CODE+40               ;LEAVE BREATHING ROOM
3235          DAD      B        
3237          JNC      OMERR                    ;NO, DON'T EVEN CLEAR
3240          XCHG                              ;NEW STACK LOCATION [H,L]
3241          SHLD     STKTOP                   ;SET UP NEW STACK LOCATION
3244          POP      H                        ;REGAIN THE TEXT POINTER
3245          JMP      CLEARC>                  ;GO CLEAR
3251 RUN:     JZ       RUNC                     ;NO LINE # ARGUMENT
3256          CALL     CLEARC                   ;CLEAN UP -- RESET THE STACK
3261          LXI      B,NEWSTT 
3264          JMP      RUNC2>                   ;PUT "NEWSTT" ON AND FALL INTO "GOTO"
3280 GOSUB:   CALL     GETSTK                   ;MAKE SURE THERE IS ROOM
3284          POP      B                        ;POP OFF RETURN ADDRESS OF "NEWSTT"
3285          PUSH     H                        ;REALLY PUSH THE TEXT POINTER
3286          PUSH     H                        ;SAVE TEXT POINTER
3287          LHLD     CURLIN                   ;GET THE CURRENT LINE #
3290          XTHL                              ;PUT CURLIN ON THE STACK AND H,L]=TEXT PTR
3291          MVI      D,GOSUTK                 ;LEAVE A GOSUB TOKEN
3294          PUSH     D        
3296 RUNC2:   PUSH     B                        ;RESTORE RETURN ADDRESS
3295          INX      SP                       ;THE GOSUB TOKEN TAKES ONLY ONE BYTE
3303 GOTO:    CALL     LINGET                   ;PICK UP THE LINE
3312          CALL     FNDLIN>  
3314          CALL     REM                      ;SKIP TO THE END OF THIS LINE
3317          PUSH     H                        ;SAVE THE POINTER
3318          LHLD     CURLIN                   ;GET THE CURRENT LINE #
3327          POP      H                        ;[H,L]=CURRENT POINTER
3328          INX      H                        ;POINT AT THE LINK BEYOND IT
3329          CC       LOOP                     ;SEARCH FROM THIS POINT
3332          CNC      FNDLIN>                  ;SEARCH FROM THE BEGINNING -- ACTUALLY
3336          MOV      H,B      
3337          MOV      L,C      
3338          DCX      H        
3339          RC                                ;IF A MATCH WE ARE DONE
3340 USERR:   MVI      E,ERRUS  
3342          JMP      ERROR                    ;C=MATCH, SO IF NO MATCH WE
3352 RETURN:  RNZ                               ;BLOW HIM UP IF THERE ISN'T A TERMINATOR
3353          MVI      D,255                    ;MAKE SURE THIS VARIABLE POINTER
3356          CALL     FNDFOR                   ;GO PAST ALL THE "FOR" ENTRIES
3359          SPHL                              ;UPDATE THE STACK
3360          CPI      GOSUTK   
3362          MVI      E,ERRRG                  ;ERROR ERRRG IS "RETURN WITHOUT GOSUB"
3364          JNZ      ERROR    
3367          POP      H                        ;GET LINE # "GOSUB" WAS FROM
3368          SHLD     CURLIN                   ;PUT IT INTO CURLIN
3371          LXI      H,NEWSTT 
3374          XTHL                              ;PUT RETURN ADDRESS OF "NEWSTT"
3395          MVI      B,0                      ;INSIDE QUOTES THE ONLY TERMINATOR IS ZERO
3397 EXCHQT:  MOV      A,C                      ;WHEN A QUOTE IS SEEN THE SECOND
3398          MOV      C,B                      ;TERMINATOR IS TRADED, SO IN "DATA"
3399          MOV      B,A                      ;COLONS INSIDE QUOTATIONS WILL HAVE NO EFFECT
3400 REMER:   MOV      A,M                      ;GET THE CHARACTER
3401          ORA      A                        ;ZERO IS ALWAYS A TERMINATOR
3402          RZ       
3403          CMP      B                        ;TEST FOR THE OTHER TERMINATOR
3404          RZ       
3405          INX      H        
3406          CPI      34                       ;IS IT A QUOTE?
3408          JZ       EXCHQT                   ;IF SO TIME TO TRADE
3418          SUI      IFTK                     ;IS IT AN "IF"
3420          JNZ      REMER                    ;IF NOT, CONTINUE ON
3423          CMP      B                        ;SINCE "REM" CAN'T SMASH
3427          ADC      D                        ;CARRY ON IF [B] NOT ZERO .
3428          MOV      D,A>                     ;UPDATE [D]
3429          JMP      REMER>   
3442 LOOPDR:  MOV      A,M      
3443          ORA      A                        ;ALWAYS STOP ON ZERO
3444          RZ       
3445          CMP      C                        ;CHECK FOR ":" IN DATA
3446          RZ       
3447          INX      H                        ;LOOK AT NEXT CHARACTER
3448          JMP      LOOPDR>  
3451 LET:     CALL     PTRGET                   ;GET THE POINTER TO THE VARIABLE
3462          LDA      VALTYP   
3465          PUSH     PSW>     
3466          PUSH     D        
3467          CALL     FRMEVL                   ;GET THE VALUE OF THE FORMULA
3471          XTHL                              ;[H,L]=POINTER TO VARIABLE
3473          SHLD     TEMP                     ;SAVE VARIABLE POINTER FOR "FOR"
3477          POP      D                        ;GET TEXT POINTER OFF
3478          POP      PSW                      ;GET THE VALTYP OF THE .
3480          PUSH     D                        ;RESAVE THE TEXT-POINTER
3482          CPI      3                        ;SEE IF ITS A STRING
3484 INPCOM:  PUSH     H                        ;SAVE THE POINTER AT THE VALUE POSITION .
3485          JNZ      COPNUM                   ;NUMERIC, SO FORCE IT AND COPY
3488          CALL     CHKSTR>                  ;MAKE SURE THE FORMULA WAS A STRING
3492          RAR                               ;CARRY SET FOR STRING OFF
3494          CALL     CHKVAL                   ;MAKE SURE VALTYP MATCHES CARRY
3497          JZ       COPNUM                   ;IF A NUMBER COPY
3498 INPCOM:  PUSH     H>                       ;SAVE POINTER AT VARIABLE
3499          LHLD     FACLO                    ;GET POINTER TO THE DESCRIPTOR OF THE RESULT
3502          PUSH     H                        ;SAVE THE POINTER AT THE DESCRIPTOR
3503          INX      H        
3504          INX      H        
3506          POP      D        
3507          LHLD     STKTOP                   ;SEE IF IT POINTS INTO STRING SPACE
3511          POP      D                        ;GET BACK THE POINTER AT THE DESCRIPTOR
3512          JNC      DNTCPY                   ;DON'T COPY LITERALS
3515          LHLD     VARTAB                   ;NOW, SEE IF ITS A VARIABLE
3519          MOV      L,E      
3520          MOV      H,D      
3521          CC       STRCPY                   ;IS BEYOND [VARTAB], IF SO COPY
3524 DNTCPY:  LDAX     D                        ;GET THE LENGTH AND SAVE IT
3525          PUSH     PSW                      ;SINCE WE ARE GOING TO SET IT TO
3527          XRA      A                        ;SET IT TO 0 -- ELIMINATING NULL
3529          STAX     D                        ;PUT 0 IN THE LENGTH FIELD
3530          CALL     FRETMP                   ;FREE IT UP
3533          POP      PSW                      ;GET LENGTH BACK
3534          MOV      M,A                      ;REPLACE IT ( FRETMP RETURNS [D,E] IN [H,L] )
3535          XCHG                              ;PUT THE DESCRIPTOR POINTER BACK IN [D,E]
3536          POP      H                        ;GET THE PLACE OF THE NEW VARIABLE
3538          CALL     MOVE>                    ;COPY THE DESCRIPTOR
3540          CALL     VMOVE>   
3543          POP      H                        ;GET THE TEXT POINTER BACK
3547          ANI      6                        ;SETUP DISPATCH TO FORCE
3551          LXI      H,FRCTBL                 ;TABLE OF FORCE ROUTINES
3554          MOV      C,A                      ;[B,C]=TWO BYTE OFFSET
3555          MVI      B,0      
3557          DAD      B        
3558          MOV      A,M                      ;[H,L]=ADDRESS TO GO TO
3559          INX      H        
3560          MOV      H,M      
3561          MOV      L,A      
3562          LXI      B,PUTVAL                 ;RETURN TO PUTVAL
3565          PUSH     B        
3566          PCHL                              ;DISPATCH TO FORCE
3567 PUTVAL:  POP      H                        ;GET THE POINTER OF WHERE TO STORE
3569          PUSH     H                        ;SAVE IT BACK
3570          CALL     VMOVMF>                  ;MOVE THE VALUE IN
3574          PUSH     H                        ;SAVE THE VARIABLE POINTER FOR "FOR"
3575          CALL     MOVMF>                   ;TRANSFER THE VALUE
3576          POP      D                        ;"FOR" WANTS VARIABLE POINTER IN
3578          POP      H                        ;GET THE TEXT POINTER
3579          RET      
3584 ONGOTO:  CALL     GETBYT                   ;GET VALUE INTO [E]
3587          MOV      A,M                      ;GET THE TERMINATOR BACK
3588          MOV      B,A                      ;SAVE THIS CHARACTER FOR LATER
3589          CPI      GOSUTK                   ;AN "ON GOSUB" PERHAPS?
3591          JZ       ISGOSU                   ;YES, SOME FEATURE USE
3596          DCX      H                        ;BACK UP CHARACTER POINTER
3597 ISGOSU:  MOV      C,E                      ;GET COUNT INTO (C)
3598 LOOPON:  DCR      C                        ;SEE IF ENOUGH SKIPS
3599          MOV      A,B                      ;PUT DISPATCH CHARACTER IN PLACE
3600          JZ       GONE2                    ;IF DONE, GO OFF
3603          CALL     LINGT2                   ;SKIP OVER A LINE #
3606          CPI      44                       ;A COMMA
3608          RNZ                               ;IF A COMMA DOESN'T DELIMIT THE END OF
3610          JMP      LOOPON>                  ;CONTINUE GOBBLING LINE #S
3616 IF:      CALL     FRMEVL                   ;EVALUATE A FORMULA
3621          LDA      VALTYP                   ;GET VALUE TYPE INTO [A]
3622          PUSH     PSW>>                    ;SAVE THE VALUE TYPE ON THE STACK
3623          MOV      A,M                      ;GET TERMINATING CHARACTER OF FORMULA
3625          CALL     PUSHF                    ;ONTO THE STACK
3626          MVI      D,0                      ;KEEPS RELATIONAL OPERATOR MEMORIES
3630 LOOPIF:  SUI      GREATK                   ;CHECK FOR A RELATIONAL OPERATOR
3631          JC       ENDREL                   ;NOPE
3633          CPI      NUMREL                   ;IS THIS ONE OF THEM?
3634          JNC      ENDREL                   ;NO SEE WHAT WE HAVE
3635          CPI      1                        ;SETUP BITS BY MAPPING
3636          RAL                               ;0 TO 1, 1 TO 2 AND 2 TO 4
3637          ORA      D                        ;FOR WITH EARLIER BITS
3638          MOV      D,A                      ;STORE NEW BITS
3640          JMP      LOOPIF                   ;SEE IF RELATIONAL
3641 ENDREL:  MOV      A,D                      ;GET REALTIONAL MEMORIES
3642          ORA      A                        ;SEE IF THERE ARE ANY
3643          JZ       SNERR                    ;NO RELATIONAL OPERATORS:
3644          PUSH     PSW                      ;SAVE RELATIONAL MEMORIES
3645          CALL     FRMEVL>                  ;PICK UP FIRST NON-RELATIONAL
3650          CZ       CHRGTR>                  ;IF SO SKIP IT
3654          CPI      GOTOTK                   ;ALLOW "GOTO" AS WELL
3656          JZ       OKGOTO>  
3661          DCX      H        
3664          POP      PSW      
3669          PUSH     PSW                      ;RESAVE RELATIONAL MEMORIES
3671          LDA      VALTYP                   ;GET VALUE TYPE
3672          CMP      H                        ;[H] HAS OLD VALTYP ARE THEY =?
3673          JNZ      TMERR                    ;IF NOT ITS A TYPE ERROR
3674          ORA      A                        ;SEE WHAT TYPE IT WAS
3675          JZ       NUMCMP                   ;ZERO MEANS IT WAS NUMERIC
3676          CALL     STRCMP                   ;MUST BE STRING, SO STRING COMPARE
3677          JMP      SKPNCM>                  ;SKIP OVER NUMERIC COMPARE
3678 NUMCMP:  CALL     FCOMP                    ;COMPARE THE 2 SIDE OF THE RELATION STATEMENT
3679 SKPNCM:  INR      A                        ;BUILD RELATIONAL BITS
3680          RAL                               ;LESS=4 EQUAL=2 GREATER=1
3683          POP      B                        ;POP OFF WHAT RELATIONAL OPERATOR WAS
3684          ANA      B>                       ;SEE IF WE MATCHED
3687          CALL     VSIGN##> 
3693          POP      H>                       ;POP OFF TEXT POINTER
3695          JZ       FALSIF>                  ;HANDLE POSSIBLE "ELSE"
3699          JZ       REM>                     ;IF TEST FAILED -- JUST SKIP REST OF THE LINE
3701          JC       GOTO                     ;LINE NUMBER MEANS "GOTO"
3704          JMP      GONE3                    ;INTERPRET NEW STATEMENT
3711 FALSIF:  MVI      D,1                      ;NUMBER OF "ELSE"S THAT MUST -
3715 SKPMRF:  CALL     DATA                     ;SKIP A STATEMENT
3721          ORA      A                        ;END OF LINE?
3722          RZ                                ;IF SO, NO "ELSE" CLAUSE
3724          CPI      ELSETK   
3726          JNZ      SKPMRF                   ;NO, STILL IN THE "THEN" CLAUSE
3729          DCR      0                        ;DECREMENT THE NUMBER OF "ELSE"S THAT
3731          JNZ      SKPMRF                   ;SKIP MORE IF HAVEN'T SEEN
3735          JMP      DOCOND>                  ;FOUND THE RIGHT "ELSE" -- GO EXECUTE
3743 LPRINT:  MVI      A,1                      ;SAY NON ZERO
3744          STA      PRTFLG>                  ;SAVE AWAY
3745 NEWCHR:  DCX      H        
3747 PRINT:   JZ       CRDO                     ;IF WE SEE A TERMINATOR
3751 PRINTC:  RZ                                ;HERE AFTER SEEING TAB(X) OR , OR ;
3756          CPI      34                       ;A TERMINATING QUOTE?
3757          CZ       STROUI   
3758          JZ       NEWCHR>                  ;A QUOTATION -- JUST PRINT IT
3759          CPI      TABTK    
3761          JZ       TABER                    ;THE TAB FUNCTION?
3765          CPI      SPCTK    
3767          JZ       TABER>                   ;THE SPC FUNCTION?
3770          PUSH     H                        ;SAVE THE TEXT POINTER
3771          CPI      44       
3773          JZ       COMPRT                   ;IS IT A COMMA?
3776          CPI      59                       ;IS IT A ";"
3778          JZ       NOTABR   
3781          POP      B                        ;GET RID OF OLD TEXT POINTER
3782          CALL     FRMEVL                   ;BACK UP ONE CHARACTER AND READ THAT ONE
3787          DCX      H                        ;BACKUP FROM TERMINATOR
3788          PUSH     H                        ;SAVE TEXT POINTER
3791          CALL     GETYPE                   ;SEE IF WE HAVE A STRING
3794          JZ       STRDON>                  ;IF SO, PRINT SPECIALY
3798          LDA      VALTYP   
3799          ORA      A        
3800          JNZ      STROON>>                 ;WAS IT A STRING FORMULA?
3801          CALL     FOUT                     ;MAKE A NUMBER INTO A STRING
3806          CALL     STRLIT                   ;MAKE IT A STRING
3809          LHLD     FACLO                    ;GET THE POINTER
3813          LDA      PRTFLG   
3814          ORA      A        
3815          JZ       ISTTY                    ;LPT OR TTY?
3816          LDA      LPTPOS   
3817          ADD      M        
3818          CPI      LPTLEN                   ;WILL THIS NUMBER OVERLAP?
3819          JMP      LINCHK   
3821          LDA      TTYPOS                   ;SEE WHERE WE ARE
3824          ADD      M                        ;ADD THIS LENGTH
3825          CPI      LINLEN                   ;SEE IF GREATER THAN THE LINE LENGTH
3828 LINCHK:  CNC      CRDO                     ;IF SO CRLF
3831          CALL     STRPRT>                  ;PRINT THE NUMBER
3834          MVI      A,"      "               ;ALWAYS END WITH A SPACE
3839          ORA      A                        ;TURN OFF THE ZERO FLAG
3840 STROON:  CZ       STRPRT>  
3844          XRA      A        
3845 STROON:  CNZ      STRPRT>>                 ;JUST PRINT STRINGS
3846          POP      H        
3847          JMP      MORPR                    ;PRINT SOME MORE
3850 FININL:  MVI      M,0                      ;PUT A ZERO AT THE END OF BUF
3852          LXI      H,BUFMIN                 ;SETUP POINTER
3856          LDA      PRTFLG   
3857          ORA      A        
3858          JNZ      PRINTW>  
3859          MVI      A,13     
3861          STA      TTYPOS                   ;MAKE TTYPOS LESS THAN LINE LENGTH
3866          MVI      A,10     
3869 CRFIN:   LDA      NULCNT                   ;GET NUMBER OF NULLS
3872 PRTNUL:  DCR      A        
3873          STA      TTYPOS                   ;EVENTUALLY SETUP TTYPOS=0
3876          RZ                                ;ALL NULLS DONE [A]=0
3879          PUSH     PSW                      ;SAVE THE COUNT
3880          XRA      A                        ;[A]= A NULL
3882          POP      PSW                      ;RESTORE THE COUNT
3883          JMP      PRINUL                   ;LOOP PRINTING NULLS
3887 STROUI:  INX      H        
3888 STROUT:  MOV      A,M      
3889          ORA      A                        ;CHECK FOR END OF LINE
3890          RZ                                ;LET IT END THAT WAY
3891          INX      H        
3892          CPI      34                       ;A TERMINATING QUOTE?
3893          RZ                                ;DONE IF SO
3895          CPI      CR                       ;IF IT'S A CARRIAGE RETURN
3896          CZ       CROO                     ;TYPE LINE-FEED AND SET [TTYPOS]=0
3897          JMP      STROUT>                  ;PRINT MORE CHARACTERS
3900          LDA      PRTFLG                   ;OUTPUT TO THE LINE PRINTER?
3901          ORA      A                        ;NON-ZERO MEANS YES
3902          JZ       ISCTTY                   ;NO, DO TELETYPE COMMA
3903          LDA      LPTPOS                   ;GET LINE PRINTER POSITION
3906          CPI      NLPPOS                   ;COMMA JUST DOES A "CRDO"
3907          JMP      CHKCOM                   ;USE TELETYPE CHECK
3909          LDA      TTYPOS                   ;GET TELETYPE POSITION
3914          CPI      NUTPOS                   ;SO ALL COMMA DOES IS A "CRDO"
3917 CHKCOM:  CNC      CRDO                     ;TYPE CRLF
3920          JNC      NOTABR                   ;AND QUIT IF BEYOND THE LAST COMMA FIELD
3923 MORCOM:  SUI      CLMWID                   ;GET [A] MODULUS CLMWID
3925          JNC      MORCOM   
3928          CMA                               ;WE WANT TO FILL
3932          JMP      ASPA2                    ;GO PRINT [A]+1 SPACES
3939          CALL     INTIDXX                  ;INTEGERIZE A FORMULA INTO [D,E]
3941          CALL     GTBYTC>                  ;GET VALUE INTO [E]
3946          DCX      H        
3948          POP      PSW                      ;GET BACK SPCTK OR TABTK
3949          CPI      SPCTK>                   ;WAS IT SPCTK?
3951          PUSH     H                        ;SAVE THE TEXT POINTER
3953          MOV      A,E                      ;FOR "SPC" PUT THE FORMULA
3954          JZ       ASPAC>                   ;VALUE IN [A]
3958          LDA      PRTFLG                   ;LINE PRINTER OR TTY?
3959          ORA      A                        ;NON-ZERO MEANS LPT
3960          JZ       TTYIST   
3961          LDA      LPTPOS                   ;GET LINE PRINTER POSITION
3962          JMP      DOSIZI>  
3963 TTYIST:  LDA      TTYPOS                   ;GET TELETYPE PRINT POSITION
3966 DOSIZT:  CMA                               ;PRINT [E]-[A] SPACES
3967          ADD      E        
3968          JNC      NOTABR                   ;IF NEGATIVE, DON'T PRINT ANY
3972 ASPA2:   INR      A        
3973 ASPAC:   MOV      B,A                      ;[B]=NUMBER OF SPACES TO PRINT
3974          MVI      A,"      "               ;[A]=SPACE
3977          DCR      B                        ;DECREMENT THE COUNT
3978          JNZ      REPOUT   
3981 NOTABR:  POP      H                        ;PICK UP TEXT POINTER
3983          JMP      PRINTC                   ;AND SINCE WE JUST PRINTED
4016 TRMNOK:  LDA      FLGINP                   ;WAS IT READ OR INPUT?
4019          ORA      A                        ;ZERO=INPUT
4020          JNZ      DATSNE                   ;GIVE ERROR AT DATA LINE 0
4023          POP      B                        ;GET RID OF THE POINTER INTO THE VARIABLE LIST
4025          LXI      H,TRYAGN 
4028          CALL     STROUT                   ;PRINT "?REDO FROM START"
4031          LHLD     TEMP                     ;START ALL OVER BY GOING BACK
4038          CPI      34                       ;IS IT A QUOTE?
4041          MVI      A,0                      ;BE TALKATIVE
4043          STA      CNTWFL>                  ;FORCE OUTPUT
4046          JNZ      NOTQTI                   ;IF NOT NO MESSAGE
4050          CALL     STRLTI                   ;MAKE THE MESSAGE A STRING
4055          PUSH     H                        ;REMEMBER WHERE IT ENDED
4056          CALL     STRPRT                   ;PRINT IT OUT
4059          POP      H>       
4061          CALL     STROUI   
4063 NOTQTI:  PUSH     H        
4065          LHLD     CURLIN                   ;IS IT DIRECT?
4066          MVI      E,ERRID                  ;IF SO "ILLEGAL DIRECT" ERROR
4067          INX      H                        ;DIRECT MEANS THAT
4068          MOV      A,L                      ;CURLIN=65535
4069          ORA      H                        ;ADDED ONE AND GOT 0?
4070          JZ       ERROR>                   ;IF SO, GO COMPLAIN
4072          CALL     ERRDIR>                  ;USE COMMON ROUTINE SINCE DEF
4076 GETAGN:  CALL     QINLIN                   ;TYPE '?' AND INPUT A LINE OF TEXT
4080          MOV      A,M      
4081          ORA      A        
4082          DCX      H        
4083          POP      B                        ;TAKE OFF SINCE MAYBE LEAVING
4084          JZ       STPEND                   ;IF EMPTY LEAVE
4087          PUSH     B>                       ;PUT BACK SINCE DIDN'T LEAVE
4088          JMP      INPCON   
4091 READ:    PUSH     H                        ;SAVE THE TEXT POINTER
4092          LHLD     DATPTR                   ;GET LAST DATA LOCATION
4096 INPCON:  XRA      A                        ;SET FLAG THAT THIS IS AN INPUT
4097          STA      FLGINP                   ;STORE THE FLAG
4108          XTHL                              ;[H,L]=VARIABLE LIST POINTER
4113          CALL     PTRGET                   ;READ THE VARIABLE LIST
4117          XTHL                              ;PUT THE VARIABLE LIST POINTER ONTO THE
4124          PUSH     D                        ;SAVE THE POINTER TO THE VARIABLE WE
4126          MOV      A,M                      ;SINCE THE DATA LIST POINTER ALWAYS POINTS
4130          CPI      44       
4132          JZ       DATBK                    ;A COMMA SO A VALUE MUST FOLLOW
4136          ORA      A                        ;IN THE 4K VERSION
4137          JNZ      SNERR>                   ;DATA MUST BE ALONE ON A LINE
4138          LDA      FLGINP                   ;SEE WHAT TYPE OF STATEMENT THIS WAS
4141          ORA      A        
4143          INX      H                        ;POINT AT POINTER TO NEXT LINE
4144          JNZ      DATFND>                  ;IF IT IS A READ GO
4149          MVI      A,"?"    
4152          CALL     QINLIN                   ;GET A WHOLE LINE AFTER TYPING "?"
4160          INX      H                        ;FUDGE CHARACTER POINTER
4161          CALL     REDINP>                  ;READ A VALUE USING "LET" CODE
4164          LDA      VALTYP                   ;SEE IF ITS NUMERIC OR STRING
4168          CPI      3                        ;IS IT A STRING ?
4170          PUSH     PSW                      ;SAVE THE TYPE INFORMATION
4171          JNZ      NUMINS>                  ;IF NUMERIC, USE FIN TO GET IT
4175          ORA      A        
4176          JZ       NUMINS>                  ;INPUT A NUMBER IF NUMERIC
4181          MOV      D,A                      ;ASSUME QUOTED STRING
4182          MOV      B,A                      ;SETUP TERMINATORS
4183          CPI      34                       ;QUOTE ?
4185          JZ       NOWGET                   ;TERMINATORS OK
4188          MVI      D,":"                    ;UNQUOTED STRING TERMINATORS
4190          MVI      B,44                     ;ARE COLON AND COMMA
4192          DCX      H                        ;BACKUP SINCE START CHARACTER MUST BE INCLUDED
4196 NOWGET:  CALL     STRLT2                   ;MAKE A STRING DESCRIPTOR FOR THE VALUE
4201 DOASIG:  POP      PSW>                     ;POP OFF THE TYPE INFORMATION
4202          XCHG                              ;[D,E]=TEXT POINTER
4203          LXI      H,STRDN2                 ;RETURN LOC
4206          XTHL                              ;[H,L]=PLACE TO STORE VARIABLE VALUE
4207          PUSH     D                        ;TEXT POINTER GOES ON
4208          JMP      INPCOM>                  ;DO ASSIGNMENT
4212          CALL     FIN      
4216          JMP      DOASIG>                  ;ASSIGNMENT IS COMPLICATED
4221          XTHL                              ;[H,L] GET POINTER AT VARIABLE
4222          CALL     MOVMF                    ;DO THE ASSIGNMENT
4223          POP      H>>                      ;GET BACK THE TEXT POINTER
4226          DCX      H        
4228          JZ       TRMOK    
4231          CPI      44       
4233          JNZ      TRMNOK>                  ;ENDED PROPERLY?
4236 TRMOK:   XTHL     
4237          DCX      H                        ;LOOK AT TERMINATOR
4239          JNZ      LOPOT2                   ;NOT ENDING, CHECK FOR COMMA
4245          POP      D                        ;POP OFF THE POINTER INTO DATA
4246          LDA      FLGINP                   ;FETCH THE STATEMENT TYPE FLAG
4249          ORA      A        
4252          XCHG     
4253          JNZ      RESFIN                   ;UPDATE DATPTR
4257          ORA      M                        ;COULD HAVE ENDED WITH COMMA OR
4259          LXI      H,EXIGNT                 ;TEXT FOR "EXTRA"
4262          PUSH     D                        ;SAVE THE TEXT POINTER
4263          CNZ      STROUT                   ;IF WASN'T REAL END SAY SOMETHING
4266          POP      H                        ;GET BACK THE TEXT POINTER
4267          RET      
4303          ORA      A        
4304          JNZ      NOWLIN>  
4308          INX      H>       
4310          MOV      A,C                      ;SEE IF WE ARE AT THE END
4311          ORA      B        
4312          MVI      E,ERROD                  ;NO DATA IS ERROR ERROD
4314          JZ       ERROR                    ;IF SO COMPLAIN
4319          MOV      E,M                      ;GET DATA LINE #
4320          INX      H        
4321          MOV      D,M      
4322          XCHG     
4323          SHLD     DATLIN   
4328          CPI      DATATK                   ;IS IS "DATA"?
4330          JNZ      DATLOP                   ;NOT DATA SO LOOK SOME MORE
4334          JMP      DATBK                    ;CONTINUE READING
4369          CALL     PTRGET>                  ;MUST HAVE A VARIABLE
4371          CNZ      PTRGET>                  ;GET A POINTER TO THE
4375          SHLD     TEMP                     ;PUT THE TEXT POINTER
4380          CALL     FNDFOR                   ;TRY TO FIND A FOR ENTRY
4386          JNZ      NFERR>                   ;"NEXT WITHOUT FOR"
4389          SPHL                              ;SETUP STACK POINTER BY CHOPPING
4391          PUSH     D                        ;PUT THE VARIABLE PTR BACK ON
4392          MOV      A,M                      ;STEP ONTO THE STACK
4393          INX      H        
4394          PUSH     PSW      
4395          PUSH     D                        ;PUT THE POINTER TO THE LOOP
4398          MVI      E,ERRNF  
4399          JNZ      ERROR>   
4400          CALL     MOVFM                    ;STEP VALUE INTO THE FAC
4403          XTHL                              ;PUT THE POINTER INTO THE
4405          PUSH     H                        ;PUT THE POINTER TO THE LOOP
4407          CALL     FADDS                    ;ADD THE STEP AND LOOP VARIABLE
4410          POP      H                        ;POP OFF THE POINTER TO
4412          CALL     MOVMF                    ;MOV FAC INTO LOOP VARIABLE
4415          POP      H                        ;GET THE ENTRY POINTER
4416          CALL     MOVRM                    ;GET THE FINAL INTO THE REGISTERS
4419          PUSH     H                        ;SAVE THE ENTRY POINTER
4420          CALL     FCOMP                    ;COMPARE THE NUMBERS
4423          POP      H                        ;STILL POINTING TO THE FINAL VALUE
4424          POP      B                        ;GET THE SIGN OF THE INCREMENT
4425          SUB      B                        ;SUBTRACT THE INCREMENTS SIGN FROM THAT
4427          CALL     MOVRM                    ;GET LINE # OF "FOR" INTO [D,E]
4431          JZ       LOOPON                   ;IF SIGN(FINAL-CURRENT)+SIGN(STEP)=0
4435          XCHG     
4436          SHLD     CURLIN                   ;STORE THE LINE #
4439          MOV      L,C                      ;SETUP THE TEXT POINTER
4440          MOV      H,B      
4441          JMP      NXTCON   
4445 LOOPDN:  SPHL                              ;ELIMINATE THE FOR ENTRY
4448          LHLD     TEMP                     ;RESTORE THE TEXT POINTER
4453          MOV      A,M                      ;IS THERE A COMMA AT THE END
4454          CPI      44                       ;IF SO LOOK AT ANOTHER
4456          JNZ      NEWSTT                   ;VARIABLE NAME TO "NEXT"
4460          CALL     NEXTC>                   ;DO NEXT, BUT DON'T ALLOW
4478 FRMNUM:  CALL     FRMEVL                   ;EVALUATE A FORMULA
4480 CHKSTR:  STC                               ;SET CARRY
4481 CHKVAL:  LDA      VALTYP                   ;0 MEANS NUMERIC 1 MEANS STRING
4482          ADC      A                        ;RESULT SHOULD BE 0 OR 3
4484          RPE                               ;RETURN IF CORRECT RESULT
4485 TMERR:   MVI      E,ERRTM                  ;"TYPE MISMATCH ERROR"
4486          JMP      ERROR    
4510 FRMEVL:  DCX      H                        ;BACK UP CHARACTER POINTER
4511 FRMCHK:  MVI      D,0                      ;INITIAL DUMMY PRECEDENCE IS 0
4513 LPOPER:  PUSH     D                        ;SAVE PRECEDENCE
4514          CALL     GETSTK                   ;MAKE SURE THERE IS ROOM FOR RECURSIVE CALLS
4518          CALL     EVAL                     ;EVALUATE SOMETHING
4521          SHLD     TEMP2                    ;SAVE TEXT POINTER
4524 RETAOP:  LHLD     TEMP2                    ;RESTORE TEXT PTR
4527 TSTOP:   POP      B                        ;POP OFF THE PRECEDENCE OF OLDOP
4530          MOV      A,B                      ;LOOK AT PRECEDENCE
4531          CPI      120                      ;IF ITS SOME ARITHMETIC
4534          CNC      CHKNUM>>                 ;TYPE MISMATCH ERROR IF NOT NUMERIC
4535 NOTSTV:  MOV      A,M                      ;GET NEXT CHARACTER
4537          MVI      D,0                      ;ASSUME NO RELATION OPS
4539 LOPREL:  SUI      GREATK                   ;IS THIS ONE RELATION?
4541          JC       ENDREL                   ;RELATIONS ALL THROUGH
4545          CPI      NMREL                    ;IS IT REALLY RELATIONAL?
4547          JNC      ENDREL                   ;NO JUST BIG
4550          CPI      1                        ;SET UP BITS BY MAPPING
4552          RAL                               ;0 TO 1 1 TO 2 AND 2 TO 4
4553          XRA      D                        ;BRING IN THE OLD BITS
4554          CMP      D                        ;MAKE SURE RESULT IS BIGGER
4555          MOV      D,A                      ;SAVE THE MASK
4556          JC       SNERR                    ;DON'T ALLOW TWO OF THE SAME
4559          SHLD     TEMP3                    ;SAVE CHARACTER POINTER
4563          JMP      LOPREL   
4566 ENDREL:  MOV      A,D                      ;GET THE MASK
4567          ORA      A                        ;WERE THERE ANY?
4568          JNZ      FINREL                   ;IF SO, HANDLE AS SPECIAL OP
4571          MOV      A,M                      ;GET THE CHARACTER AGAIN
4572          SHLD     TEMP3>                   ;SAVE UPDATED CHARACTER POINTER
4575          SUI      PLUSTK                   ;AN OPERATOR?
4577          RC                                ;RETURN IF NOT
4580          CPI      LSTOPK                   ;HIGHER THAN THE LAST OP?
4582          RNC      
4583          MOV      E,A                      ;MUST MUTIPLY BY 3 SINCE
4586          LDA      VALTYP                   ;SEE IF LEFT PART IS STRING
4590          CPI      3>                       ;SEE IF ITS A STRING
4593          DCR      A>       
4594          ORA      E                        ;SET CONDITION CODES
4596          MOV      A,E>                     ;REFETCH OP-VALUE
4597          JZ       CAT>                     ;MUST BE CAT
4601          RLC                               ;A= ORIGINAL A*2
4602          ADD      E                        ;ADD IN ORIGINAL A
4603          MOV      E,A>                     ;CREATE TWO BYTE VALUE
4605          MVI      D,0>                     ;HIGH ORDER #0
4606          LXI      H,OPTAB                  ;CREATE INDEX INTO OPTAB
4609          DAD      D                        ;ADD IN CALCULATED OFFSET
4610          MOV      A,B                      ;[A] GETS OLD PRECEDENCE
4611          MOV      D,M                      ;REMEMBER NEW PRECEDENCE
4612          CMP      D                        ;OLD=NEW
4613          RNC                               ;MUST APPLY OLD OP
4616          INX      H                        ;NOW POINTING AT ROUTINE ADDRESS
4621 DOPREC:  PUSH     B                        ;SAVE OLD PRECEDENCE
4622          LXI      B,RETAOP                 ;OPERATOR RETURN ADDRESS
4623          PUSH     B                        ;FIRST PART OF "TEMP" ENTRY
4625          MOV      B,E>                     ;SAVE SECOND BYTE OF PRECEDENCE
4631          MOV      C,D      
4632          CALL     PUSHF    
4634          MOV      E,B>                     ;GET SECOND BYTE OF PRECEDENCE AGAIN
4635          MOV      D,C                      ;[D] GETS PRECEDENCE
4638          LHLD     TEMP3>   
4640          LHLD     TEMP2>                   ;IF WE DONT HAVE "LENGTH"
4652          JMP      LPOPER>                  ;PUT ON PRECEDENCE AND LOOK AT A
4656          PUSH     B                        ;SAVE THE OLD PRECEDENCE
4657          LXI      B,RETAOP                 ;PUT ON THE ADDRESS OF THE
4660          PUSH     B                        ;PLACE TO RETURN TO AFTER OPERATOR APPLICATION
4662          MOV      A,D                      ;SEE IF THE OPERATOR IS EXPONENTIATION
4663          CPI      127                      ;WHICH HAS PRECEDENCE 127
4665          JZ       EXPSTK                   ;IF SO, "FRCSNG" AND MAKE A SPECIAL STACK ENTRY
4669          CPI      81                       ;SEE IF THE OPERATOR IS "AND" OR "OR"
4671          JC       ANDORD                   ;AND IF SO "FRCINT" AND
4680 NUMREL:  LDA      VALTYP                   ;GET THE VALUE TYPE
4683          CPI      3                        ;AND SET THE CONDITION CODES BASED ON IT
4685          JZ       TMERR                    ;BLOW UP ON STRINGS
4688          LXI      H,FACLO                  ;GET POINTER TO LO IN FAC
4691          MOV      C,M      
4692          INX      H        
4693          MOV      B,M      
4694          INX      H        
4695          PUSH     B                        ;PUSH FACLO+0,1 ON THE STACK
4696          JM       VPUSHD                   ;ALL DONE IF THE DATA WAS AN INTEGER
4699          MOV      C,M      
4700          INX      H        
4701          MOV      B,M      
4702          INX      H        
4703          PUSH     B                        ;PUSH FAC-1,0 ON THE STACK
4704          JPO      VPUSHD                   ;ALL DONE IF WE HAD A SNG
4707          LXI      H,DFACLO                 ;WE HAVE A DOUBLE PRECISON NUMBER
4712 VPUSHD:  MOV      C,E                      ;[C]=OPERATOR NUMBER
4713          MOV      B,A                      ;B=TYPE OF VALUE ON THE STACK
4714          PUSH     B                        ;SAVE THESE THINGS FOR APPLOP
4715          LXI      B,APPLOP                 ;GENERAL OPERATOR APPLICATION
4719 FINTMP:  PUSH     B                        ;SAVE PLACE TO GO
4720          LHLD     TEMP3                    ;REGET THE TEXT POINTER
4723          JMP      LPOPER                   ;PUSH ON THE PRECEDENCE AND READ MORE
4732 EXPSTK:  CALL     FRCSNG                   ;COERCE LEFT HAND OPERAND
4735          CALL     PUSHF                    ;PUT IT ON THE STACK
4738          LXI      B,FPWRQ##                ;PLACE TO COERCE RIGHT HAND
4742          MVI      D,127                    ;RESTORE THE PRECEDENCE
4744          JMP      FINTMP                   ;FINISH ENTRY AND EVALUATE MORE FORMULA
4752 ANDORD:  PUSH     D                        ;SAVE THE PRECEDENCE (70 OR 80)
4753          CALL     FRCINT   
4756          POP      D                        ;[D]=PRECEDENCE
4757          PUSH     H                        ;PUSH THE LEFT HAND OPERAND
4758          LXI      B,DANDOR                 ;"AND" AND "OR" DOER
4761          JMP      FINTMP                   ;PUSH ON THIS ADDRESS, PRECEDENCE
4773 FINREL:  MOV      A,B                      ;[A]=OLD PRECEDENCE
4774          CPI      100                      ;RELATIONALS HAVE PRECEDENCE 100
4776          RNC                               ;APPLY EARLIER OPERATOR IF IT HAS
4778          PUSH     B                        ;SAVE THE OLD PRECEDENCE
4779          PUSH     D                        ;SAVE [D]=RELATIONAL BITS
4780          LXI      D,$CODE+25604            ;[D]=PRECEDENCE=100
4786          LXI      H,DOCMP                  ;ROUTINE TO TAKE COMPARE ROUTINE RESULT
4790          PUSH     H                        ;DOES A JMP TO RETAOP WHEN DONE
4791          CALL     GETYPE                   ;SEE IF WE HAVE A NUMERIC COMPARE
4794          JNZ      NUMREL                   ;YES, BUILD AN APPLOP ENTRY
4797          LHLD     FACLO                    ;GET THE POINTER AT THE STRING DESCRIPTOR
4800          PUSH     H                        ;SAVE IT FOR STRCMP
4801          LXI      B,STRCMP                 ;STRING COMPARE ROUTINE
4804          JMP      FINTMP                   ;PUSH THE ADDRESS, REGET THE TEXT POINTER
4821 APPLOP:  POP      B                        ;[B]=STACK OPERAND VALUE TYPE
4823          MOV      A,C                      ;SAVE IN MEMORY SINCE THE STACK WILL BE BUSY
4824          STA      OPRTYP                   ;A RAM LOCATION
4827          MOV      A,B                      ;CHECK FOR DOUBLE
4828          CPI      8                        ;PRECISION ENTRY ON THE STACK
4830          JZ       STKDBL                   ;FORCE FAC TO DOUBLE
4833          LDA      VALTYP                   ;SEE IF THE FAC IS DOUBLE PRECISION
4836          CPI      8                        ;AND IF SO, CONVERT THE STACK OPERAND
4838          JZ       FACOBL                   ;TO DOUBLE PRECISION
4841          MOV      D,A                      ;SAVE THE VALUE TYPE OF THE FAC
4842          MOV      A,B                      ;SEE IF THE STACK ENTRY IS SINGLE
4843          CPI      4                        ;PRECISION AND IF SO, CONVERT
4845          JZ       STKSNG                   ;THE FAC TO SINGLE PRECISION
4848          MOV      A,D                      ;SEE IF THE FAC IS SINGLE PRECISION
4849          CPI      3                        ;AND IF SO CONVERT THE STACK TO SINGLE
4851          JNC      FACSNG                   ;PRECISION
4855          JZ       TMERR                    ;BLOW UP ON RIGHT HAND STRING OPERAND
4858          LXI      H,INTDSP                 ;INTEGER INTEGER CASE
4861          MVI      B,0                      ;SPECIAL DISPATCH FOR SPEED
4863          DAD      B                        ;[H,L] POINTS TO THE ADDRESS TO GO TO
4864          DAD      B        
4865          MOV      C,M                      ;[B,C]=ROUTINE ADDRESS
4866          INX      H        
4867          MOV      B,M      
4868          POP      D                        ;[D,E]=LEFT HAND OPERAND
4869          LHLD     FACLO                    ;[H,L]=RIGHT HAND OPERAND
4872          PUSH     B                        ;DISPATCH
4873          RET      
4879 STKDBL:  CALL     FRCOBL                   ;MAKE THE FAC DOUBLE PRECISION
4882          CALL     VMOVAF                   ;MOVE THE FAC INTO ARG
4885          POP      H                        ;POP OFF THE STACK OPERAND INTO THE FAC
4886          SHLD     DFACL0+2 
4889          POP      H        
4890          SHLD     DFACLO                   ;STORE LOW BYTES AWAY
4895          CALL     MOVER                    ;INTO THE FAC
4898 SETDBL:  CALL     FRCOBL                   ;MAKE SURE THE LEFT OPERAND IS
4902          LXI      H,DBLOSP                 ;DISPATCH TO A DOUBLE PRECISION ROUTINE
4905 DODSP:   LDA      OPRTYP                   ;RECALL WHICH OPERAND IT WAS
4908          RLC                               ;CREATE A DISPATCH OFFSET, SINCE
4910          PUSH     B                        ;SAVE [B,C] FOR SINGLE PRECISION
4911          MOV      C,A                      ;DOUBLE BYTE OFFSET
4912          MVI      B,0                      ;INTO [B,C]
4914          DAD      B                        ;CALCULATE LOCATION OF ROUTINE TO GO TO
4915          POP      B                        ;GET BACK [B,C] FOR SINGLE PRECISION
4916          MOV      A,M                      ;GET THE ADDRESS
4917          INX      H        
4918          MOV      H,M      
4919          MOV      L,A      
4920          PCHL                              ;AND PERFORM THE OPERATION, RETURNING
4927 FACOBL:  PUSH     B                        ;SAVE THE STACK VALUE TYPE
4928          CALL     VMOVAF                   ;MOVE THE FAC INTO ARG .
4931          POP      PSW                      ;POP THE STACK VALUE TYPE INTO [A]
4932          STA      VALTYP                   ;PUT IT IN VALTYP FOR THE FORCE
4936          CPI      4                        ;SEE IF ITS SINGLE, SO WE KNOW
4939          JZ       SNGOBL                   ;IT'S SINGLE PRECISION
4943          POP      H                        ;POP OFF THE INTEGER VALUE
4944          SHLD     FACLO                    ;SAVE IT FOR CONVERSION
4947          JMP      SETOBL                   ;SET IT UP
4954 STKSNG:  CALL     FRCSNG                   ;CONVERT THE FAC IF NECESSARY
4959 SNGDO:   LXI      H,SNGDSP                 ;SETUP THE DISPATCH ADDRESS
4963          JMP      DODSP                    ;DISPATCH
4970 FACSNG:  POP      H                        ;POP OFF THE INTEGER ON THE STACK
4971          CALL     PUSHF                    ;SAVE THE FAC ON THE STACK
4974          CALL     CONSIH                   ;CONVERT [H,L] TO A SINGLE PRECISION
4978          CALL     MOVRF                    ;PUT THE LEFT HAND OPERAND IN THE REGISTERS
4981          POP      H                        ;RESTORE THE FAC
4982          SHLD     FAC-1                    ;FROM THE STACK
4985          POP      H        
4986          SHLD     FACLO    
4989          JMP      SNGDO>                   ;PERFORM THE OPERATION
4996          XRA      A        
4997          STA      VALTYP>>                 ;ASSUME THE VALUE WILL BE NUMERIC
4999          JC       FIN                      ;IF NUMERIC, INTERPRET CONSTANT
5002          CALL     ISLET                    ;VARIABLE NAME?
5005          JNC      ISVAR                    ;AN ALPHABETIC CHARACTER MEANS YES
5008          CPI      PLUSTK                   ;IGNORE "+"
5010          JZ       EVAL     
5013          CPI      "."                      ;"." AS LEADING CHARACTER OF A
5016          JZ       FIN      
5019          CPI      MINUTK                   ;NEGATION?
5021          JZ       DOMIN    
5025          CPI      34                       ;STRING CONSTANT?
5027          JZ       STRLTI>                  ;IF SO BUILD A DESCRIPTOR IN A TEMPORARY
5033          CPI      NOTTK                    ;CHECK FOR "NOT" OPERATOR
5035          JZ       NOTER>   
5039          CPI      FNTK                     ;USER-DEFINED FUNCTION?
5041          JZ       FNODER>  
5044          SUI      ONEFUN                   ;IS IT A FUNCTION NAME?
5046          JNC      ISFUN                    ;FUNCTIONS ARE THE HIGHEST
5055          CALL     FRMEVL                   ;RECURSIVELY EVALUATE THE FORMULA
5060          RET      
5063          CALL     EVAL>                    ;NO ^ OPERATOR IN THIS CASE
5065          MVI      D,125                    ;A PRECEDENCE BELOW ^
5068          CALL     LPOPER                   ;SO ^ GREATER THAN UNARY MINUS
5071          LHLD     TEMP2>                   ;GET TEXT POINTER
5074          PUSH     H        
5076          CALL     VNEG>    
5080          CALL     NEG>                     ;NEGATE THE FAC.
5085          CALL     CHKNUM>> 
5086          POP      H        
5087          RET      
5088 ISVAR:   CALL     PTRGET                   ;GET A POINTER TO THE
5092          PUSH     H                        ;SAVE THE TEXT POINTER
5094          XCHG                              ;TRANSFER THE POINTER AT THE VALUE
5096          CALL     MOVFM>                   ;SETUP FAC WITH VARIABLE VALUE
5098          XCHG                              ;PUT THE POINTER TO THE VARIABLE VALUE
5102          SHLD     FACLO                    ;IN CASE IT'S STRING STORE THE POINTER
5107          CALL     GETYPE                   ;FOR STRINGS WE JUST LEAVE
5110          CNZ      VMOVFM>                  ;A POINTER IN THE FAC
5114          LDA      VALTYP   
5115          ORA      A        
5116          CZ       MOVFM>>                  ;IF NOT, ACTUALLY TRANSFER THE VALUE INTO
5118          POP      H                        ;RESTORE THE TEXT POINTER
5119          RET      
5120 ISFUN:   MVI      B,0      
5122          RLC                               ;MULTIPLY BY 2
5123          MOV      C,A      
5124          PUSH     B                        ;SAVE THE FUNCTION # ON THE STACK
5127          MOV      A,C                      ;LOOK AT FUNCTION #
5129          CPI      NUMGFN                   ;IS IT PAST LASNUM?
5131          JC       OKNORM                   ;NO, MUST BE NORMAL FUNCTION
5156          CALL     FRMEVL                   ;EAT OPEN PAREN AND FIRST ARG
5161          CALL     CHKSTR                   ;MAKE SURE THE FIRST ONE WAS STRING
5164          XCHG     1                        ;[D,E] #TXTPTR
5165          LHLD     FACLO                    ;GET PTR AT STRING DESCRIPTOR
5168          XTHL                              ;GET FUNCTION #
5170          PUSH     H                        ;PUT THE FUNCTION # ON
5171          XCHG                              ;[H,L]=TXTPTR
5172          CALL     GETBYT                   ;[E]=VALUE OF FORMULA
5175          XCHG                              ;TEXT POINTER INTO [D,E]
5177          XTHL                              ;SAVE INT VALUE OF SECOND ARG
5179          JMP      FINGO>                   ;DISPATCH TO FUNCTION
5182 OKNORM:  CALL     PARCHK                   ;MAKE SURE ITS THERE.
5187          XTHL                              ;[H,L]=FUNCTION # AND SAVE TEXT POINTER
5193          MOV      A,L                      ;[A]=FUNCTION NUMBER
5195          CPI      BOTCON                   ;LESS THAN SQUARE ROOT?
5197          JC       NOTFRF                   ;DON*T FORCE THE ARGUMENT
5201          CPI      TOPCON                   ;BIGGER THAN ARC-TANGENT?
5203          PUSH     H                        ;SAVE THE FUNCTION NUMBER
5204          CC       FRCSNG                   ;IF NOT, FORCE FAC TO SINGLE-PRECISION
5207          POP      H                        ;RESTORE THE FUNCTION NUMBER
5209          LXI      D,LABBCK                 ;RETURN ADDRESS
5212          PUSH     D                        ;MAKE THEM REALLY COME BACK
5213 FINGO:   LXI      B,FUNDSP                 ;FUNCTION DISPATCH TABLE
5216          DAD      B                        ;ADD ON THE OFFSET
5221          MOV      C,M                      ;FASTER THAN PUSHM
5222          INX      H        
5223          MOV      H,M      
5224          MOV      L,C      
5236 GETYPE:  LDA      VALTYP                   ;GET THE VALTYP
5239          CPI      8                        ;SET CARRY CORRECTLY
5241          DCR      A                        ;SET THE OTHER CONDITION CODES CORRECTLY
5242          DCR      A                        ;WITHOUT AFFECTING CARRY
5243          DCR      A        
5250 AND:     XRA      A                        ;FLAG AS "AND"
5252          PUSH     PSW      
5254          CALL     DEINT                    ;GET [D,E]=INT VALUE AND CHECK SIZE
5255          POP      PSW      
5256          XCHG                              ;[H,L]=INT VALUE
5257          POP      B                        ;GET HIGH ORDER OFF
5258          XTHL                              ;PUT INT VALUE ON
5260          XCHG                              ;LOW OF SECOND ARG
5261          CALL     MOVER    
5262          PUSH     PSW      
5263          CALL     DEINT                    ;GET [D,E]=INT VALUE
5264          POP      PSW      
5266          POP      B                        ;[B,C]=INT VALUE OF SECOND ARG
5267          MOV      A,C                      ;[A]=LOW OF SECOND ARG
5268          LXI      H,GIVACF                 ;SETUP JUMP ADDRESS
5269          JNZ      ORFIN                    ;IT WAS "OR" SO FINISH UP
5270          ANA      E                        ;AND TWO LOW ORDERS
5271          MOV      C,A                      ;SAVE ANSWER IN [C]
5272          MOV      A,B                      ;[A]=HIGH ORDER SECOND ARG
5273          ANA      D                        ;[A]=HIGH ORDER OF ANSWER
5274          PCHL                              ;FLOAT [A,C] AS ANSWER
5275 ORFIN:   ORA      E                        ;OR TWO LOW ORDERS
5276          MOV      C,A                      ;SAVE ANSWER LOW ORDER IN [C]
5277          MOV      A,B                      ;[A]=HIGH ORDER SECOND ARG
5278          ORA      D                        ;OR TWO HIGH ORDERS
5280          PCHL                              ;FLOAT [A,C] AS ANSWER
5281 FINREL:  LXI      H,PTDORL                 ;MAKE [H,L] POINT AT OPERATOR ADDRESS
5283          LDA      VALTYP                   ;STORE VALUE TYPE AS LOW
5284          RAR                               ;ORDER BIT OF [E]
5285          MOV      A,D                      ;GET RELATIONAL MEMORIES IN [A]
5286          RAL                               ;MOVE CARRY BIT IN
5287          MOV      E,A>                     ;KEEP THIS BYTE IN [E]
5289          MVI      D,100                    ;PRECEDENCE OF ALL RELATIONAL
5291          MOV      A,B                      ;[A]=PRECEDENCE OF OLD OPERATOR
5292          CMP      D                        ;SEE WHETHER TO APPLY OLD OPERATOR
5293          RNC                               ;IF OLD OPERATOR HAS EQUAL OR GREATER
5295          JMP      DOPREC                   ;SEE IF TIME TO APPLY
5307 DOREL:   MOV      A,C                      ;GET MEMORIES INTO [A]
5309          ORA      A        
5312          PUSH     PSW                      ;SAVE WHICH OPERATOR IT WAS
5314          CALL     FCOMP>                   ;DO A NUMERIC COMPARE
5316          CALL     CHKVAL                   ;SEE IF VALTYP MATCHES
5319          LXI      H,DOCMP                  ;COME BACK TO COMPARE
5320          PUSH     H        
5321          JZ       FCOMP                    ;DO NUMERIC COMPARE
5322          XRA      A                        ;SET VALUE TYPE AS NUMERIC
5323          STA      VALTYP>>>
5333 STRCMP:  PUSH     D                        ;SAVE DESC, POINTER TO FIRST STR.
5334          CALL     FREFAC                   ;FREE THE FACLO STR
5335          POP      D                        ;RESTORE 1ST DESC. POINTER
5338          CALL     FRETMP                   ;FREES IST DESC. POINTER
5339          CALL     MOVRM                    ;[B,C] POINT AT FIRST CHAR
5341          POP      H                        ;GET 2ND CHARACTER POINTER IN H
5342          XTHL                              ;GET 2ND CHARACTER COUNTER IN L
5343          MOV      D,L>                     ;SAVE IN D
5345 STRCMP:  CALL     FRESTR                   ;FREE UP THE FAC STRING, AND GET THE
5349          MOV      A,M                      ;SAVE THE LENGTH OF THE FAC STRING IN [A]
5350          INX      H        
5351          MOV      C,M                      ;SAVE THE POINTER AT THE FAC STRING
5353          INX      H        
5354          MOV      B,M      
5355          POP      D                        ;GET THE STACK STRING POINTER
5356          PUSH     B                        ;SAVE THE POINTER AT THE FAC STRING DATA
5357          PUSH     PSW                      ;SAVE THE FAC STRING LENGTH
5358          CALL     FRETMP                   ;FREE UP THE STACK STRING AND RETURN
5363          POP      D                        ;[D]=LENGTH OF FAC STRING
5364          MOV      E,M                      ;[E]=LENGTH OF STACK STRING
5365          INX      H        
5366          MOV      C,M                      ;[B,C]=POINTER AT STACK STRING
5367          INX      H        
5368          MOV      B,M>     
5369          POP      H                        ;GET BACK 2ND CHARACTER POINTER
5370 CSLOOP:  MOV      A,E                      ;BOTH STRINGS ENDED
5371          ORA      D                        ;TEST BY OR'ING THE LENGTHS TOGETHER
5372          RZ                                ;IF SO, RETURN WITH A ZERO
5373          MOV      A,D                      ;GET FACLO STRING LENGTH
5374          ORA      A                        ;IF IT ENDED, OTHER MUST NOT HAVE
5375          CMA                               ;MAKE -1
5376          RZ                                ;TEST
5377          XRA      A                        ;MUST NOT HAVE BEEN ZERO, TEST CASE
5378          CMP      E                        ;OF B,C,D,E STRING HAVING ENDED FIRST
5379          INR      A                        ;RETURN WITH A=1
5380          RNC                               ;TEST THE CONDITION
5382          DCR      D                        ;DECREMENT BOTH CHARACTER COUNTS
5383          DCR      E        
5385          CMP      M                        ;COMPARE WITH FACLO STRING
5386          INX      H                        ;BUMP POINTERS (INX DOESNT CLOBBER CC'S)
5387          INX      B        
5388          JZ       CSLOOP                   ;IF BOTH THE SAME, MUST BE MORE TO STRINGS
5391          CMC                               ;HERE WHEN STRINGS DIFFER
5392          JMP      SIGNS>                   ;SET [A] ACCORDING TO CARRY
5396 DOCMP:   INR      A                        ;SETUP BITS
5397          ADC      A                        ;4=LESS 2=EQUAL 1 GREATER
5398          POP      B                        ;WHAT DID HE WANT?
5399          ANA      B                        ;ANY BITS MATCH?
5400          ADI      255                      ;MAP 0 TO 0
5402          SBB      A                        ;AND ALL OTHERS TO 377
5404          CALL     CONIA##                  ;CONVERT [A] TO AN INTEGER SIGNED
5407          JMP      RETAOP>                  ;RETURN FROM OPERATOR APPLICATION
5411          JMP      FLOAT                    ;MAKE FAC= SIGNED
5415 NOTER:   MVI      D,90                     ;"NOT" HAS PRECEDENCE 90
5416          CALL     LPOPER                   ;GO PERFORM
5418          CALL     DEINT                    ;GET VALUE IN [D,E]
5419          MOV      A,E      
5420          CMA                               ;COMPLEMENT
5421          MOV      C,A                      ;[C] LOW ORDER OF ANSWER
5422          MOV      A,D      
5423          CMA                               ;COMPLEMENT HIGH ORDER 100
5424          CALL     GIVACA                   ;FLOAT [A,C] AS RESULT
5425          POP      B                        ;TAKE RETURN ADDRESS OF FRMEVL
5426          JMP      RETAOP>>                 ;OFF AND RETURN TO THE RIGHT
5431 NOTER:   MVI      D,90                     ;"NOT" HAS PRECEDENCE 90, SO
5433          CALL     LPOPER                   ;FORMULA EVALUATION IS ENTERED WITH A DUMMY
5437          CALL     FROINT                   ;COERCE THE ARGUMENT TO INTEGER
5440          MOV      A,L                      ;COMPLEMENT [H,L]
5441          CMA      
5442          MOV      L,A      
5443          MOV      A,H      
5444          CMA      
5445          MOV      H,A      
5446          SHLD     FACLO                    ;UPDATE THE FAC
5449          POP      B                        ;FRMEVL, AFTER SEEING THE PRECEDENCE
5453          JMP      RETAOP                   ;RETURN TO REFETCH IT
5464 DANDOR:  PUSH     B                        ;SAVE THE PRECEDENCE "OR"=70
5465          CALL     FRCINT                   ;COERCE RIGHT HAND ARGUMENT TO INTEGER
5468          POP      PSW                      ;GET BACK THE PRECEDENCE TO DISTINGUISH
5470          POP      D                        ;POP OFF THE LEFT HAND ARGUMENT
5471          CPI      70                       ;SET ZERO FOR "OR"
5473          MOV      A,E                      ;SETUP LOW IN [A]
5474          JZ       ORFIN                    ;DO "OR" IF PRECEDENCE WAS 70
5477          ANA      
5478          MOV      L,A      
5479          MOV      A,H      
5480          ANA      D        
5481          MOV      H,A      
5482          JMP      MAKINT                   ;RETURN THE INTEGER [H,L]
5486 ORFIN:   ORA      
5487          MOV      L,A      
5488          MOV      A,H      
5489          ORA      D        
5490          MOV      H,A      
5491          JMP      MAKINT>                  ;RETURN THE INTEGER [H,L]
5497 DIMCON:  DCX      H                        ;SEE IF COMMA ENDED THIS VARIABLE
5499          RZ                                ;IF TERMINATOR, GOOD BYE
5516 DIM:     LXI      B,DIMCON                 ;PLACE TO COME BACK TO
5519          PUSH     B        
5529 PTRGET:  XRA      A                        ;MAKE [A]
5530          STA      DIMFLG                   ;FLAG IT AS SUCH
5533          MOV      B,M                      ;GET FIRST CHARACTER IN [B]
5534 PTRGT2:  CALL     ISLET                    ;CHECK FOR LETTER
5537          JC       SNERR                    ;MUST HAVE A LETTER
5540          XRA      
5541          MOV      C,A                      ;ASSUME NO SECOND CHARACTER
5544          STA      VALTYP>>                 ;DEFAULT IS ZERO (NUMERIC)
5547          JNC      NOSEC>                   ;ONLY NUMBERS ALLOWED
5549          JC       ISSEC                    ;CARRY SET BY CHRGET IF CHARACTER IS
5553          CALL     ISLET                    ;SET CARRY IF NOT ALPHABETIC
5556          JC       NOSEC>                   ;ALLOW ALPHABETICS
5559 ISSEC:   MOV      C,A                      ;IT IS A NUMBER--SAVE IN C
5562          JC       EATEM                    ;SKIP NUMERICS
5565          CALL     ISLET    
5568          JNC      EATEM>                   ;SKIP ALPHABETICS
5573          LXI      D,HAVTYP                 ;SAVE JUMPS BY USING RETURN ADDRESS
5576          PUSH     D        
5577          MVI      D,8                      ;ASSUME ITS DOUBLE PRECISION
5579          CPI      "#"                      ;CHECK THE CHARACTER
5581          RZ                                ;WHEN WE MATCH, SETUP VALTYP
5582          MVI      D,2                      ;CHECK FOR INTEGER
5584          CPI      "%"      
5586          RZ       
5587          INR      D                        ;CHECK FOR STRING
5588          CPI      "$"      
5590          RZ       
5591          INR      D                        ;SINGLE PRECISION IS THE DEFAULT
5592          DCX      H                        ;NO MARKING CHARACTER
5593          RET                               ;GET RID OF RETURN ADDRESS
5594 HAVTYP:  MOV      A,D                      ;SETUP VALTYP
5595          STA      VALTYP   
5601          SUI      "$"                      ;IS IT A STRING?
5602          JNZ      NOTSTR                   ;IF NOT VALTYP ALREADY=0
5603          INR      A                        ;[A]=1
5604          STA      VALTYP                   ;FLAG THIS AS A STRING
5605          RRC                               ;MAKE [A]=128
5606          ADD      C                        ;MAKE [A]=SECOND CHARACTER
5607          MOV      C,A                      ;BACK INTO [C] WITH STRING BIT ON
5611          LDA      SUBFLG                   ;GET FLAG WHETHER TO ALLOW ARRAYS
5614          ADD      M>                       ;ADD ONTO CHARACTER
5615          CPI      "("                      ;ARRAY PERHAPS (IF SUBFLG SET NEVER WILL MATCH)
5618          JZ       ISARY                    ;IT IS!
5622          XRA      A                        ;ALLOW PARENS AGAIN
5623          STA      SUBFLG>                  ;SAVE IN FLAG LOCATION
5626          PUSH     H                        ;SAVE THE TEXT POINTER
5628          MOV      A,D                      ;VALUE TYPE INTO [A]
5629          LHLD     VARTAB                   ;[H,L]=PLACE TO START THE SEARCH
5632 LOPEND:  PUSH     PSW                      ;SAVE THE VALUE TYPE
5633          XCHG                              ;[D,E]=POINTER INTO SIMPLE VARIABLES
5634          LHLD     ARYTAB                   ;[H,L]=END OF SIMPLE VARIABLES
5638          POP      H                        ;[H]=VALTYP
5639          JZ       NOTENS                   ;COULDN'T FIND IT, SO MAKE A NEW ENTRY
5642          LDAX     D                        ;GET THE VALTYP OF THIS SIMPLE VARIABLE
5643          MOV      L,A                      ;SAVE SO WE KNOW HOW MUCH TO SKIP
5644          CMP      H                        ;COMPARE WITH OUR VALTYP
5645          INX      0        
5646          JNZ      NOTIT1                   ;NOT RIGHT KIND -- SKIP IT
5650          CMP      C                        ;SEE IF OUR VARIABLE MATCHES
5651          JNZ      NOTIT1   
5654          INX      D        
5655          LDAX     D                        ;SEE IF SECOND CHACRACTER MATCHES
5656          CMP      B        
5657          JZ       FINPTR                   ;THAT WAS IT, ALL DONE
5662 NOTIT1:  INX      D        
5663          INX      D        
5664          MOV      A,H                      ;SKIP OVER THE
5667          MVI      H,0                      ;[H,L]=NUMBER OF BYTES TO SKIP
5669          DAD      D                        ;ADD ON THE POINTER
5670          JMP      LOPEND                   ;AND SEARCH SOME MORE
5673 NOTENS:  PUSH     B                        ;SAVE THE LOOKS
5674          MOV      C,H                      ;[B,C]=LENGTH OF THIS VARIABLE
5675          MOV      B,A                      ;[B]=0
5676          PUSH     B                        ;SAVE THE VALTYP ON THE STACK
5677          INX      B                        ;MAKE THE LENGTH INCLUDE
5679          INX      B        
5680          INX      B>       
5682          LHLD     ARYTAB                   ;PLACE TO STOP SEARCHING
5683          XCHG     
5684          LHLD     VARTAB                   ;GET THE PLACE TO START
5686          JZ       NOTENS                   ;COULDN'T FIND THIS VARIABLE
5688          MOV      A,C      
5689          SUB      M                        ;IS THIS VARIABLE THE ONE?
5690          INX      H        
5691          JNZ      NOTIT                    ;NOPE
5692          MOV      A,B      
5693          SUB      M                        ;TRY SECOND CHARACTER MATCHING
5694 NOTIT:   INX      H        
5695          JZ       FINPTR                   ;THAT WAS ITI
5696          INX      H                        ;SKIP OVER THAT ONE--NOT IT
5697          INX      H        
5698          INX      H        
5699          INX      H        
5700          JMP      LOPFNO                   ;TRY AGAIN
5701 NOTENS:  PUSH     B                        ;REMEMBER WHAT THIS
5703          LXI      B,6+$CODE>               ;THE AMOUNT TO SHOVE
5705          LHLD     STREND                   ;THE CURRENT END OF STORAGE
5708          PUSH     H                        ;SAVE THIS #
5709          DAD      B                        ;ADD ON THE AMOUNT OF SPACE
5711          POP      B                        ;POP OFF HIGH ADDRESS TO MOVE
5712          PUSH     H                        ;SAVE NEW CANDIDATE FOR STREND
5713          CALL     BLTU                     ;BLOCK TRANSFER AND MAKE SURE
5718          POP      H                        ;[H,L]=NEW STREND
5719          SHLD     STREND                   ;STORE SINCE WAS OK
5724          MOV      H,B                      ;GET BACK [H,L] POINTING AT THE END
5725          MOV      L,C                      ;OF THE NEW VARIABLE
5726          SHLD     ARYTAB                   ;UPDATE THE ARRAY TABLE POINTER
5729 ZEROER:  DCX      H                        ;[H,L] IS RETURNED POINTING TO THE
5730          MVI      M,O                      ;END OF THE VARIABLE SO WE
5733          JNZ      ZEROER                   ;POINTS TO THE START OF THE VARIABLE
5737          POP      D                        ;[E]=VALTYP
5738          MOV      M,E                      ;STORE AS PART OF THE LOOKS
5739          INX      H>       
5740          POP      D        
5741          MOV      M,E                      ;PUT DESCRIPTION
5742          INX      H        
5743          MOV      M,D                      ;OF THIS VARIABLE
5746          XCHG                              ;POINTER AT VARIABLE INTO [D,E]
5747 FINPTR:  INX      D>                       ;POINT AT THE VALUE
5749          INX      H        
5751          POP      H                        ;RESTORE THE TEXT POINTER
5752          RET      
5755 ISARY:   PUSH     B                        ;REMEMBER WHAT VARIABLE LOOKS
5758          PUSH     H                        ;SAVE THE TXTPTR
5759          LHLD     DIMFLG                   ;[L]=DIMFLG [H]=VALTYP
5763          LDA      DIMFLG                   ;SINCE THIS CALL IS RECURSIVE
5764          PUSH     PSW>                     ;DIMFLG MUST BE SAVED ON THE STACK
5765          CALL     INTIDX                   ;EVALUATE THE INDEX INTO [D,E]
5768          XTHL                              ;[L]=DIMFLG [H]=VALTYP
5770          SHLD     DIMFLG                   ;SAVE BOTH VALUES BACK
5771          POP      H>                       ;RESTORE THE TEXT POINTER
5773          POP      PSW                      ;GET DIMFLG OFF THE STACK
5774          STA      DIMFLG>                  ;RESTORE IT
5775          XTHL                              ;[H,L] GET VARIABLE DESCRIPTOR
5778          XCHG                              ;[D,E]=DESCRIPTOR
5780          DAD      H                        ;MULTIPLY BY 4 TO GET
5781          DAD      H                        ;BYTE OFFSET
5782          PUSH     H                        ;SAVE THE INDEX
5785 LOPFD2:  POP      B                        ;OF LAST VARIABLE
5786          DAD      B                        ;SKIP OVER LAST VARIABLE BY ADDING ITS
5788          XCHG                              ;[D,E] GET CURRENT SEARCH POINT
5789          PUSH     H                        ;SAVE THE VARIABLE LOOK
5790          LHLD     STREND                   ;GET PLACE TO STOP
5792          XCHG                              ;[H,L] GETS SEARCH POINT
5793          POP      D                        ;POP OFF VARIABLE LOOKS
5794          JZ       NOTFDO                   ;COULDN'T FIND IT
5797          XTHL                              ;PUT [H,L] ON THE STACK AND
5801          POP      H                        ;POP OFF SEARCH POINTER
5804          JNZ      LOPFD2                   ;IF NO MATCH, GO LOOK SOMEMORE
5805          LDA      DIMFLG                   ;IS THIS VARIABLE TRYING TO BE
5807          ORA      A                        ;EXISTS?
5808          MVI      E,ERRDD                  ;THATS ERROR ERRDD
5809          JNZ      ERROR    
5810 MAKDFN:  POP      D                        ;POP OFF LENGTH OF THIS VARIABLE
5811          DCX      D                        ;DECREMENT LENGTH SO WE CAN
5814          XTHL                              ;TRADE POINTER AT VARIABLE WITH
5817          MVI      E,ERRBS                  ;THATS ERROR ERRBS
5818          JNC      ERROR                    ;SINCE LENGTH REALLY HAS AN
5822          POP      D                        ;POP OFF POINTER AT VARIABLE
5823          DAD      D                        ;ADD IT TO THE INDEX
5824          POP      D                        ;POP OFF TEXT POINTER
5825          XCHG                              ;TEXT POINTER INTO [H,L]
5826          RET                               ;VARIABLE POINTER INTO [D,E]
5828 NOTFDD:  MOV      M,E                      ;PUT LOOKS DOWN
5829          INX      H        
5830          MOV      M,D      
5831          INX      H        
5832          LXI      D,$CODE+44               ;DEFAULT SIZE IS 10
5833          LDA      DIMFLG                   ;ARE WE DIMENSIONING
5834          ORA      A        
5835          JZ       NOTDIM   
5836          POP      D                        ;POP OFF INDEX
5837          PUSH     D                        ;PUT INDEX BACK ON
5838          INX      D        
5839          INX      D        
5840          INX      D        
5841          INX      D        
5842 NOTDIM:  PUSH     D        
5843          MOV      M,E                      ;PUT LENGTH DOWN
5844          INX      H        
5845          MOV      M,D      
5846          INX      H        
5847          PUSH     H        
5848          DAD      D        
5849          CALL     REASON                   ;MAKE SURE WE'RE NOT RUNNING
5851          SHLD     STREND                   ;SETUP NEW STORAGE END
5852          POP      D        
5853 ZERIT2:  DCX      H        
5854          MVI      M,0      
5856          JNZ      ZERIT2   
5857          JMP      MAKDFN>                  ;FINISH UP
5875 ISARY:   PUSH     H                        ;SAVE DIMFLG AND VALTYP FOR RECURSION
5876          LHLD     DIMFLG   
5879          XTHL     STEXT                    ;POINTER BACK INTO [H,L]
5880          MVI      D,0                      ;SET # DIMENSIONS =0
5882 INDLOP:  PUSH     D                        ;SAVE NUMBER OF DIMENSIONS
5883          PUSH     B                        ;SAVE LOOKS
5884          CALL     INTIDX                   ;EVALUATE INDICE INTO [D,E]
5887          POP      B                        ;POP OFF THE LOOKS
5888          POP      PSW                      ;[A]=NUMBER OF DIMENSIONS SO FAR
5889          XCHG                              ;[D,E]=TEXT POINTER
5891          XTHL                              ;PUT THE INDICE ON THE STACK
5893          PUSH     H                        ;RESAVE VALTYP AND DIMFLG
5894          XCHG                              ;[H,L]=TEXT POINTER
5895          INR      A                        ;INCREMENT # OF DIMENSIONS
5896          MOV      D,A                      ;[D]=NUMBER OF DIMENSIONS
5897          MOV      A,M                      ;GET TERMINATING CHARACTER
5898          CPI      44                       ;A COMMA SO MORE INDICES FOLLOW?
5900          JZ       INDLOP                   ;IF SO, READ MORE
5905          SHLD     TEMP2                    ;SAVE THE TEXT POINTER
5908          POP      H                        ;[H,L]=VALTYP & DIMFLG
5909          SHLD     DIMFLG                   ;SAVE VALTYP AND DIMFLG
5912          PUSH     D                        ;SAVE NUMBER OF DIMENSIONS
5917          LHLD     ARYTAB                   ;[H,L]=PLACE TO START THE SEARCH
5921 LOPFDA:  DAD      D                        ;SKIP OVER THIS ARRAY SINCE IT'S
5923          XCHG                              ;[D,E]=CURRENT SEARCH POINT
5924          LHLD     STREND                   ;GET THE PLACE TO STOP INTO [H,L]
5927          XCHG     CH                       ;[H,L]=SEARCH POINT
5930          LDA      VALTYP>  
5933          JZ       NOTFOO                   ;YES, COULDN'T FIND THIS ARRAY
5937          CMP      M                        ;SEE IF THE VALTYPS ARE THE SAME
5938          INX      H        
5939          JNZ      NMARY2>  
5942          MOV      A,M                      ;GET FIRST CHARACTER
5943          CMP      C                        ;SEE IF IT MATCHES
5944          INX      H        
5945          JNZ      NMARY1                   ;NOT THIS ONE
5948          MOV      A,M                      ;GET SECOND CHARACTER
5949          CMP      B                        ;ANOTHER MATCH?
5952 NMARY2:  INX      H>       
5953 NMARY1:  INX      H                        ;POINT TO SIZE ENTRY
5954          MOV      E,M                      ;[D,E]=LENGTH
5955          INX      H                        ;OF THE ARRAY BEING LOOKED AT
5956          MOV      D,M      
5957          INX      H        
5958          JNZ      LOPFDA                   ;IF NO MATCH, SKIP THIS ONE
5962          LDA      DIMFLG                   ;SEE IF CALLED BY "DIM"
5965          ORA      A                        ;ZERO MEANS NO
5966          MVI      E,ERRDO                  ;"DOUBLY DIMENSIONED" ERROR
5968          JNZ      ERROR    
5977          POP      PSW                      ;[A]=NUMBER OF DIMENSIONS
5978          CMP      M                        ;MAKE SURE THE NUMBER GIVEN NOW AND
5981          JZ       GETDER                   ;JUMP OFF AND READ
5985 BSERR:   MVI      E,ERRBS                  ;"SUBSCRIPT OUT OF RANGE"
5987          JMP      ERROR    
6017          MOV      M,A                      ;PUT DOWN THE VARIABLE TYPE
6018          INX      H        
6019          MOV      E,A      
6020          MVI      E,A                      ;[D,E]=SIZE OF ONE VALUE (VALTYP)
6023          LXI      D,$CODE+4>               ;INITIALIZE TALLY TO FOUR
6024          MOV      M,C                      ;PUT DOWN THE DESCRIPTOR
6025          INX      H        
6026          MOV      M,B      
6027          INX      H        
6028          POP      PSW                      ;[A]=NUMBER OF DIMENSIONS
6029          STA      TEMP6                    ;SETUP GETSTK CALL
6032          CALL     GETSTK                   ;GET SPACE FOR DIMENSION ENTRIES
6035 TEMP6:   PCHL                              ;PLACE TO STORE NUMBER OF DIMENSIONS
6038          SHLD     TEMP3                    ;SAVE THE LOCATION TO PUT THE SIZE
6042          INX      H                        ;SKIP OVER THE SIZE LOCATIONS
6043          INX      H        
6044          MOV      B,C                      ;[B]=NUMBER OF DIMENSIONS
6047          MOV      M,B                      ;STORE THE NUMBER OF DIMENSIONS
6048          INX      H        
6049 LOPPTA:  LDA      OIMFLG                   ;CALLED BY DIMENSION?
6052          ORA      A        
6053          MOV      A,B                      ;[A]=NUMBER OF DIMENSIONS
6054          LXI      B,$CODE+11               ;ASSUME ITS NOT "DIM"
6057          JZ       NOTDIM                   ;DEFAULT DIMENSIONS TO TEN
6060          POP      B                        ;POP OFF AN INDICE INTO [B,C]
6061          INX      B                        ;ADD ONE TO IT FOR THE ZERO ENTRY
6062 NOTDIM:  MOV      M,C                      ;PUT THE MAXIMUM DOWN
6063          INX      H        
6064          MOV      M,B      
6065          INX      H        
6066          PUSH     PSW                      ;SAVE THE NUMBER OF DIMENSIONS
6067          PUSH     H                        ;SAVE THE POINTER INTO THE NEW ENTRY
6068          CALL     UMULT                    ;MULTIPLY [B,C]=NEWMAX BY CURTOL=[D,E]
6071          XCHG                              ;[D,E]=NEW CURTOL
6072          POP      H                        ;GET THE POINTER INTO THE ENTRY BACK
6073          POP      B                        ;GET THE NUMBER OF DIMENSIONS BACK
6074          DCR      B                        ;DECREMENT THE NUMBER OF DIMENSIONS LEFT
6075          JNZ      LOPPTA                   ;HANDLE THE OTHER INDICES
6078          MOV      B,D                      ;[B,C]=SIZE
6079          MOV      C,E      
6080          XCHG                              ;[D,E]=START OF VALUES
6081          DAD      D                        ;[H,L]=END OF VALUES
6082          JC       BSERR                    ;OUT OF MEMORY POINTER BEING GENERATED?
6085          CALL     REASON                   ;SEE IF THERE IS ROOM FOR THE VALUES
6088          SHLD     STREND                   ;UPDATE THE END OF STORAGE
6091 ZERITA:  DCX      H                        ;ZERO THE NEW ARRAY
6092          MVI      M,0      
6095          JNZ      ZERITA                   ;NO, ZERO MORE
6098          INX      B                        ;ADD ONE TO THE SIZE TO INCLUDE
6100          MOV      H,A                      ;[H]=ZERO
6101          LDA      DIMFLG   
6104          ORA      A                        ;ARE WE DIMENSIONING ?
6105          LDA      TEMP6                    ;GET THE NUMBER OF DIMENSIONS
6108          MOV      L,A                      ;[L]=NUMBER OF DIMENSIONS
6109          DAD      H                        ;[H,L]=NUMBER OF DIMENSIONS TIMES TWO
6110          DAD      B                        ;ADD ON THE SIZE
6112          XCHG                              ;[D,E]=TOTAL SIZE
6113          LHLD     TEMP3                    ;PLACE TO STORE SIZE
6116          MOV      M,E                      ;PUT DOWN THE SIZE
6117          INX      H        
6118          MOV      M,O      
6119          INX      H        
6120          JNZ      FINNOW   
6137 GETDEF:  INX      H                        ;POINT PAST THE NUMBER OF DIMENSIONS
6138          LXI      B,$CODE                  ;CURTOL=ZERO
6142 INLPNM:  POP      H                        ;[H,L]=POINTER INTO VARIABLE ENTRY
6143          MOV      E,M                      ;[D,E]=MAXIMUM FOR THE CURRENT INDICE
6144          INX      H        
6145          MOV      D,M      
6146          INX      H        
6147          XTHL                              ;[H,L]=CURRENT INDICE
6149          PUSH     PSW                      ;SAVE THE NUMBER OF DIMENSIONS
6151          JNC      BSERR                    ;IF SO "BAD SUBSCRIPT" ERROR
6154          PUSH     H                        ;SAVE THE CURRENT INDICE
6155          CALL     UMULT                    ;CURTOL=CURTOL*CURRENT MAXIMUM
6158          POP      D                        ;INDICE INTO [D,E]
6159          DAD      D                        ;ADD THE INDICETO CURTOL
6160          POP      PSW                      ;GET THE NUMBER OF DIMENSIONS IN [A]
6161          DCR      A                        ;SEE IF ALL THE INDICES HAVE BEEN PROCESSED
6162          MOV      B,H                      ;[B,C]=CURTOL IN CASE WE LOOP BACK
6163          MOV      C,L      
6164          JNZ      INLPNM                   ;PROCESS THE REST OF THE INDICES
6168          LDA      VALTYP                   ;SEE HOW BIG THE VALUES ARE
6172          MOV      B,H                      ;SAVE THE ORIGINAL VALUE FOR MULTIPLYING
6173          MOV      C,L                      ;BY THREE
6174          DAD      H                        ;MULTIPLY BY TWO AT LEAST
6175          SUI      4                        ;FOR INTEGERS AND STRINGS
6178          JC       SMLVAL   
6181          DAD      H                        ;NOW MULTIPLIED BY FOUR
6182          JZ       DONMUL                   ;IF SINGLE ALL DONE
6185          DAD      H                        ;BY EIGHT FOR DOUBLES
6186 SMLVAL:  JPO      DONMUL                   ;FOR STRINGS
6189          DAD      B                        ;ADD IN THE ORIGINAL
6192          DAD      H                        ;MULTIPLY CURTOL BY FOUR
6193          DAD      H>       
6194          POP      B                        ;POP OFF THE ADDRESS OF WHERE THE VALUES
6196          DAD      B                        ;ADD IT ONTO CURTOL TO GET THE
6198          XCHG                              ;RETURN THE POINTER IN [D,E]
6199 FINNOW:  LHLD     TEMP2                    ;REGET THE TEXT POINTER
6202          DCX      H                        ;REREAD THE TERMINATING CHARACTER
6209 FRE:     LHLD     STREND                   ;GET END OF VARIABLE AND TEXT SPACE
6212          XCHG                              ;PUT IT IN [D,E] FOR SUBTRACTION
6213          LXI      H,$CODE                  ;ZERO [H,L]
6216          DAD      SP                       ;PUT THE STACK POINTER IN [H,L]
6219          CALL     GETYPE   
6222          JNZ      GIVDBL>  
6226          LDA      VALTYP                   ;WAS THE ARGUMENT A STRING?
6227          ORA      A        
6228          JZ       GIVDBL>                  ;NO, GIVE FREE VARIABLE SPACE
6229          CALL     FREFAC                   ;FREE UP ARGUMENT AND SETUP
6233          CALL     GARBA2                   ;DO GARBAGE COLLECTION
6236          LHLD     STKTOP                   ;BOTTOM OF FREE AREA
6239          XCHG     
6240          LHLD     FRETOP>:                 ;TOP OF FREE AREA
6248 GIVDBL:  MOV      A,L                      ;DO THE SUBTRACTION
6249          SUB      E        
6250          MOV      C,A      
6251          MOV      A,H      
6252          SBB      D        
6253 GIVACF:  MOV      B,C      
6255 GIVABF:  MOV      D,B      
6256          MVI      E,0                      ;GET ZERO IN LOW
6258          LXI      H,VALTYP                 ;FLAG VALUE TYPE AS NUMERIC
6259          MOV      M,E>     
6260          MVI      B,144                    ;SETUP TO FLOAT [B,C]
6261          JMP      FLOATR>  
6263 GIVDBL:  MOV      A,L                      ;[H,L]=[H,L]-[D,E]
6264          SUB      E        
6265          MOV      L,A      
6266          MOV      A,H      
6267          SBB      D        
6269 SNGFLT:  MOV      L,A                      ;MAKE [A] AN UNSIGNED INTEGER
6270          XRA      A        
6271 GIVINT:  MOV      H,A      
6272          JMP      MAKINI>  
6277 LPOS:    LDA      LPTPOS   
6278          JMP      SNGFLT>  
6279 POS:     LDA      TTYPOS                   ;GET TELETYPE POSITION
6283 SNGFLT:  MOV      B,A                      ;RETURN FLOATING 1 BYTE
6284          XRA      A                        ;UNSIGNED FROM A
6285          JMP      GIVABF>>                 ;GIVING 0-255
6307 DEF:     CALL     GETFNM                   ;GET A POINTER TO THE
6311          LXI      B,DATA                   ;EVENTUALLY RETURN TO "DATA"
6314          PUSH     B                        ;AND SKIP THE FORMULA
6315          PUSH     D                        ;SAVE A POINTER TO IT
6316          CALL     ERRDIR                   ;DEF IS "ILLEGAL DIRECT"
6322          CALL     PTRGET                   ;GET POINTER TO ARGUMENT
6331          MOV      B,H      
6332          MOV      C,L      
6333          XTHL                              ;PUT THE TXTPTR ON THE STACK
6336          JMP      DEFFIN                   ;PUT DOWN THE TEXT-POINTER
6344 FNDOER:  CALL     GETFNM                   ;GET A POINTER TO
6348          PUSH     D                        ;SAVE THE POINTER
6349          CALL     PARCHK                   ;EVALUATE THE VALUE TO BE PASSED
6354          XTHL                              ;[H,L]=POINTER TO FUNCTION DEF
6358          POP      D                        ;[D,E]=PTR TO FORMULA
6361          POP      H                        ;[H,L]=POINTER TO ARG
6364          DCX      H        
6365          DCX      H        
6366          DCX      H                        ;POINT TO FRONT OF ARG AGAIN
6367          DCX      H        
6368          PUSH     H                        ;SAVE IT
6371          PUSH     D                        ;SAVE FORMULA TEXT POINTER
6372          MVI      E,ERRUF                  ;NOW [D,E] FREE SO CHECK IF (ZERO) SET
6374          JZ       ERROR    
6377          CALL     MOVMF                    ;PUT CURRENT FAC INTO OUR ARG VARIABLE
6381          POP      H                        ;POP OFF FORMULA TXTPTR
6383          CALL     FRMNUM>                  ;EVALUATE IT AND MUST SURE ITS NUMERIC
6385          CALL     FRMEVL   
6388          PUSH     H        
6389          CALL     FRCSNG   
6392          POP      H>       
6393          DCX      H        
6395          JNZ      SNERR                    ;IF NOT SYNTAX ERROR
6400          POP      H                        ;POP OFF POINTER AT ARG VARIABLE
6401          POP      D        
6402          POP      B>                       ;POP OFF OLD VALUE
6404 DEFFIN:  MOV      M,C      
6405          INX      H                        ;STORE THE OLD VALUE
6406          MOV      M,B      
6407 PUTDEI:  INX      H        
6408          MOV      M,E      
6409          INX      H        
6410          MOV      M,D      
6411          POP      H                        ;POP OFF OLD TXTPTR
6418 ERRDIR:  PUSH     H                        ;SAVE THEIR [H,L]
6419          LHLD     CURLIN                   ;SEE WHAT THE CURRENT LINE IS
6422          INX      H                        ;DIRECT IS 65535 SO NOW 0
6423          MOV      A,H      
6424          ORA      L                        ;IS IT ZERO NOW?
6425          POP      H        
6426          RNZ                               ;RETURN IF NOT
6427          MVI      E,ERRID                  ;"ILLEGAL DIRECT" ERROR
6429          JMP      ERROR    
6437          MVI      A,128                    ;DONT ALLOW AN ARRAY
6439          STA      SUBFLG                   ;DON'T RECOGNIZE THE "(" AS
6443          ORA      M                        ;PUT FUNCTION BIT ON
6444          MOV      B,A                      ;GET FIRST CHARACTER INTO [B]
6447          JMP      CHKNUM>>                 ;MAKE SURE ITS NOT A STRING NAME
6461          CALL     CHKNUM>                  ;MAKE SURE THE ARGUMENT
6463          CALL     FOUT                     ;DO ITS OUTPUT
6466          CALL     STRLIT                   ;SCAN IT AND TURN IT INTO A STRING
6469          CALL     FREFAC                   ;FREE UP THE TEMP
6472          LXI      B,FINBCK 
6475          PUSH     B                        ;SET UP ANSWER IN NEW TEMP
6482 STRCPY:  MOV      A,M                      ;GET LENGTH
6483          INX      H                        ;MOVE UP TO THE POINTER
6485          INX      H>       
6486          PUSH     H                        ;GET POINTER TO POINTER OF ARG
6487          CALL     GETSPA                   ;GET THE SPACE
6490          POP      H                        ;FIND OUT WHERE STRING TO COPY
6492          POP      B        
6493          CALL     STRAD2                   ;SETUP DSCTMP
6496          PUSH     H                        ;SAVE POINTER TO DSCTMP
6497          MOV      L,A                      ;GET CHARACTER COUNT INTO [L]
6498          CALL     MOVSTR                   ;MOVE THE CHARS IN
6501          POP      D                        ;RESTORE POINTER TO OSCTMP
6502          RET      RETURN   
6504 STRINI:  CALL     GETSPA                   ;GET SOME STRING SPACE ([A] CHARS)
6507 STRAD2:  LXI      H,DSCTMP                 ;GET DESC. TEMP
6510 STRAD1:  PUSH     H                        ;SAVE DESC. POINTER
6511          MOV      M,A                      ;SAVE CHARACTER COUNT
6513          INX      H>                       ;MOVE TO ADDRESS FIELD
6514          JMP      PUTDEI                   ;USE COMMON CODE TO
6532 STRLIT:  DCX      H        
6533 STRLTI:  MVI      B,34                     ;ASSUME STR ENDS ON QUOTE
6535 STRLT3:  MOV      D,B      
6536 STRLT2:  PUSH     H                        ;SAVE POINTER TO START OF LITERAL
6537          MVI      C,255                    ;INITIALIZE CHARACTER COUNT
6539 STRGET:  INX      H        
6541          INR      C                        ;BUMP CHARACTER COUNT
6542          ORA      A                        ;IF 0, (END OF LINE) DONE
6543          JZ       STRFIN                   ;TEST
6546          CMP      D        
6547          JZ       STRFIN   
6550          CMP      B                        ;CLOSING QUOTE
6551          JNZ      STRGET                   ;NO, GO BACK FOR MORE
6554 STRFIN:  CPI      34                       ;IF QUOTE TERMINATES THE STRING
6556          CZ       CHRGTR                   ;SKIP OVER THE QUOTE
6559          XTHL     
6560          INX      H        
6561          XCHG                              ;GET POINTER TO TEMP
6562          MOV      A,C                      ;GET CHARACTER COUNT IN A
6563          CALL     STRAD2                   ;SAVE STR INFO
6568          CNC      STRCPY                   ;IF IN BUF, MUST COPY IT.
6578 PUTNEW:  LXI      D,DSCTMP                 ;[D,E] POINT AT RESULT DESCRIPTOR
6581          LHLD     TEMPPT                   ;[H,L]=POINTER TO FIRST FREE TEMP
6584          SHLD     FACLO                    ;POINTER AT WHERE RESULT DESCRIPTOR WILL BE
6588          MVI      A,3      
6590          STA      VALTYP                   ;FLAG THIS AS A STRING
6593          CALL     VMOVE>                   ;AND MOVE THE VALUE INTO A TEMPORARY
6597          MVI      A,1                      ;FLAG RESULT AS STRING
6598          STA      VALTYP                   ;STORE IN "VALUE-TYPE" LOCATION
6599          CALL     MOVE>                    ;TRANSFER THE DESCRIPTOR IN
6603          MVI      E,ERRST                  ;"STRING TEMPORARY" ERROR
6605          JZ       ERROR                    ;GO TELL HIM
6608          SHLD     TEMPPT                   ;SAVE NEW TEMPORARY POINTER
6611          POP      H                        ;GET THE TEXT POINTER
6612          MOV      A,M                      ;GET CURRENT CHARACTER INTO [A]
6613          RET      
6618 STROUI:  INX      H                        ;POINT AT NEXT CHARACTER
6619 STROUT:  CALL     STRLIT                   ;GET A STRING LITERAL
6625 STRPRT:  CALL     FREFAC                   ;RETURN TEMP POINTER BY FACLO
6629          CALL     GETBCD                   ;[D]=LENGTH [B,C]=POINTER AT DATA
6632          INR      D                        ;INCREMENT AND DECREMENT EARLY
6634 STRPR2:  DCR      D>                       ;DECREMENT THE LENGTH
6636          CALL     MOVRM                    ;GET LENGTH IN [E]
6637          INR      E                        ;AND POINTER TO CHARACTERS IN [B,C]
6638 STRPR2:  DCR      E>       
6639          RZ                                ;ALL DONE
6640          LDAX     B                        ;GET CHARACTER TO PRINT
6642          CPI      CR       
6644          CZ       CRFIN    
6647          INX      B                        ;POINT TO THE NEXT CHARACTER
6648          JMP      STRPR2                   ;AND PRINT IT
6659 GETSPA:  ORA      A                        ;MUST BE NON ZERO. SIGNAL NO GARBAG YET
6661 TRYGI2:  POP      PSW                      ;IN CASE COLLECTED WHAT WAS LENGTH?
6662          PUSH     PSW                      ;SAVE IT BACK
6663          LHLD     STKTOP                   ;GET BOTTOM OF STRING SPACE
6666          XCHG                              ;IN [D,E]
6667          LHLD     FRETOP                   ;GET TOP OF FREE SPACE IN [H,L]
6670          CMA      1                        ;-# OF CHARS
6671          MOV      C,A                      ;IN [B,C]
6672          MVI      B,255    
6674          DAD      B                        ;SUBTRACT FROM TOP OF FREE
6675          INX      H        
6677          JC       GARBAG                   ;NOT ENOUGH ROOM FOR STRING, OFFAL TIME
6680          SHLD     FRETOP                   ;SAVE NEW BOTTOM OF MEMORY
6683          INX      H                        ;MOVE BACK TO POINT TO STRING
6684          XCHG                              ;RETURN WITH POINTER IN [D,E]
6685 PPSWRT:  POP      PSW                      ;GET CHARACTER COUNT
6686          RET                               ;RETURN FROM GETSPA
6688 GARBAG:  POP      PSW                      ;HAVE WE COLLECTED BEFORE?
6689          MVI      E,ERRSO                  ;GET READY FOR OUT OF STRING SPACE ERROR
6691          JZ       ERROR                    ;GO TELL USER HE LOST
6694          CMP      A                        ;SET ZERO FLAG TO SAY WEVE GARBAGED
6695          PUSH     PSW                      ;SAVE FLAG BACK ON STACK
6696          LXI      B,TRYGI2                 ;PLACE FOR GARBAG TO RETURN TO.
6699          PUSH     B                        ;SAVE ON STACK
6700 GARBA2:  LHLD     MEMSIZ                   ;START FROM TOP DOWN
6704          MVI      A,7                      ;RING THE BELL ON GARBAGE COLLECTION
6706 FNDVAR:  SHLD     FRETOP                   ;LIKE SO
6709          LXI      H,$CODE                  ;GET DOUBLE ZERO
6712          PUSH     H                        ;SAY DIDNT SEE VARS THIS PASS
6713          LHLD     STKTOP                   ;FORCE DVARS TO IGNORE STRINGS
6717          PUSH     H                        ;FORCE FIND HIGH ADDRESS
6718          LXI      H,TEMPST                 ;GET START OF STRING TEMPS
6721 TVAR:    XCHG                              ;SAVE IN [D,E]
6722          LHLD     TEMPPT                   ;SEE IF DONE
6725          XCHG                              ;FLIP
6727          LXI      B,TVAR                   ;FORCE JUMP TO TVAR
6730          JNZ      DVAR2                    ;DO TEMP VAR GARBAGE COLLECT
6734 SVARS:   LHLD     VARTAB                   ;GET START OF SIMPLE VARIABLES
6737 SVAR:    XCHG                              ;GET IN [D,E]
6738          LHLD     ARYTAB                   ;GET END OF SIMPS
6741          XCHG                              ;FLIP
6743          JZ       ARYVAR                   ;IF YES, DO ARRAY TYPE STRINGS
6746          MOV      A,M                      ;GET 2ND CHARACTER OF VARIABLE
6747          INX      H                        ;BUMP POINTER TWICE
6748          INX      H        
6750          INX      H                        ;POINT AT THE VALUE
6751          CPI      3                        ;SEE IF ITS A STRING
6753          JNZ      SKPVAR                   ;IF NOT, JUST SKIP AROUND IT
6756          CALL     OVARS                    ;COLLECT IT
6759          XRA      A                        ;AND DON'T SKIP ANYTHING MORE
6760 SKPVAR:  MOV      E,A      
6761          MVI      D,0                      ;[D,E]=AMOUNT TO SKIP
6763          DAD      D>       
6765          ORA      A                        ;SET CC'S
6766          CALL     DVARS>                   ;CALL THE VARIABLE GARB ROUT.
6767          JMP      SVAR                     ;GET NEXT ONE
6771 ARYVA2:  POP      B                        ;GET RID OF STACK GARBAGE
6772 ARYVAR:  XCHG                              ;SAVE ARYVAR IN [D,E]
6773          LHLD     STREND                   ;GET END OF ARRAYS
6776          XCHG                              ;FLIP BACK
6778          JZ       GRBPAS                   ;YES, SEE IF DONE COLLECTING
6782          MOV      A,M                      ;GET THE VALUE TYPE INTO [A]
6783          INX      H>       
6784          CALL     MOVRM                    ;GET LENGTH OF ARRAY IN [B,C]
6788          MOV      A,E>                     ;GET 2ND CHAR OF VAR NAME IN A
6789          PUSH     H                        ;SAVE POINTER TO DIMS
6790          DAD      B                        ;ADD TO CURRENT POINTER POSITION
6792          CPI      3                        ;SEE IF ITS A STRING
6794          JNZ      ARYVA2>                  ;IF NOT JUST SKIP IT
6798          ORA      A                        ;SEE IF STRING VAR
6799          JP       ARYVA2>                  ;NO, KEEP ON TRUCKIN
6800          SHLD     TEMP3                    ;SAVE END OF ARRAY
6803          POP      H                        ;GET BACK CURRENT POSITION
6804          MOV      C,M                      ;PICK UP NUMBER OF DIMS
6805          MVI      B,0                      ;MAKE DOUBLE WITH HIGH ZERO
6807          DAD      B                        ;GO PAST DIMS
6808          DAD      B                        ;BY ADDING ON TWICE #DIMS (2 BYTE GUYS)
6809          INX      H                        ;ONE MORE TO ACCOUNT FOR #DIMS.
6810 ARYSTR:  XCHG                              ;SAVE CURRENT POSIT IN [D,E]
6811          LHLD     TEMP3                    ;GET END OF ARRAY
6814          XCHG                              ;FIX [H,L] BACK TO CURRENT
6816          JZ       ARYVAR                   ;END OF ARRAY, TRY NEXT ARRAY
6819          LXI      B,ARYSTR                 ;ADDR OF WHERE TO RETURN TO
6822 DVAR2:   PUSH     B                        ;GOES ON STACK
6825 OVARS:   XRA      A        
6826          ORA      M                        ;SEE IF ITS THE NULL STRING
6827          INX      H        
6828          MOV      E,M      
6829          INX      H        
6830          MOV      D,M      
6831          INX      H>                       ;[D,E]=POINTER AT THE VALUE
6833 DVAR:    ORI      128                      ;FORCE DVAR TO CALL GRBVAR
6836          POP      D                        ;GET POINTER IN [D,E]
6837          POP      B                        ;POP OF STRING LENGTH
6838          RP                                ;IF WASNT A STR, RETURN
6839          MOV      A,C                      ;GET LENGTH OF STRING
6840          ORA      A>                       ;SET CONDITION CODES
6841          RZ                                ;NULL STRING, RETURN
6842          MOV      B,H                      ;MOVE [H,L] TO [B,C]
6843          MOV      C,L      
6844          LHLD     FRETOP                   ;GET POINTER TO TOP OF STRING FREE SPACE
6848          MOV      H,B                      ;MOVE [B,C] BACK TO [H,L]
6849          MOV      L,C      
6850          RC                                ;IF NOT, NO NEED TO MESS WITH IT FURTHUR
6851          POP      H                        ;GET RETURN ADDRESS OFF STACK
6852          XTHL                              ;GET MAX SEEN SO FAR & SAVE RETURN ADDRESS
6854          XTHL                              ;SAVE MAX SEEN & GET RETURN ADDRESS OFF STACK
6855          PUSH     H                        ;SAVE RETURN ADDRESS BACK
6856          MOV      H,B                      ;MOVE [B,C] BACK TO [H,L]
6857          MOV      L,C      
6858          RNC                               ;IF NOT, LETS LOOK AT NEXT VAR
6859          POP      B                        ;GET RETURN ADDR OFF STACK
6860          POP      PSW                      ;POP OFF MAX SEEN
6861          POP      PSW                      ;AND VARIABLE POINTER
6862          PUSH     H                        ;SAVE NEW VARIABLE POINTER
6863          PUSH     D                        ;AND NEW MAX POINTER
6864          PUSH     B                        ;SAVE RETURN ADDRESS BACK
6865          RET                               ;AND RETURN
6869 GRBPAS:  POP      D                        ;POP OFF MAX POINTER
6870          POP      H                        ;AND GET VARIABLE POINTER
6871          MOV      A,L                      ;GET LOW IN
6872          ORA      H                        ;SEE IF ZERO POINTER
6873          RZ                                ;IF END OF COLLECTION,
6875          DCX      H                        ;CURRENTLY JUST PAST THE DESCRIPTOR
6876          MOV      B,M                      ;[B,C]=HIGH BYTE OF DATA POINTER
6877          DCX      H        
6878          MOV      C,M                      ;[B,C]=POINTER AT STRING DATA
6879          PUSH     H                        ;SAVE THIS LOCATION SO THE POINTER
6882          DCX      H        
6884          DCX      H>       
6885          MOV      L,M                      ;[L]=STRING LENGTH
6886          MVI      H,0                      ;[H,L] GET CHARACTER COUNT
6888          DAD      B                        ;[H,L]=POINTER BEYOND STRING
6889          MOV      D,B      
6890          MOV      E,C                      ;[D,E]=ORIGINAL POINTER
6891          DCX      H                        ;DON'T MOVE ONE BEYOND STRING
6892          MOV      B,H                      ;GET TOP OF STRING IN [B,C]
6893          MOV      C,L      
6894          LHLD     FRETOP                   ;GET TOP OF FREE SPACE
6897          CALL     BLTUC                    ;MOVE STRING
6900          POP      H                        ;GET BACK POINTER TO DESC.
6901          MOV      M,C                      ;SAVE FIXED ADDR
6902          INX      H                        ;MOVE POINTER
6903          MOV      M,B                      ;HIGH PART
6904          MOV      L,C      
6905          MOV      H,B                      ;[H,L]=NEW POINTER
6906          DCX      H                        ;FIX UP FRETOP
6907          JMP      FNOVAR                   ;AND TRY TO FIND HIGH AGAIN
6916 CAT:     PUSH     B                        ;PUT OLD PRECEDENCE BACK ON
6917          PUSH     H                        ;SAVE TEXT POINTER
6918          LHLD     FACLO                    ;GET POINTER TO STRING DESC.
6921          XTHL                              ;SAVE ON STACK & GET TEXT POINTER BACK
6922          CALL     EVAL                     ;EVALUATE REST OF FORMULA
6925          XTHL                              ;SAVE TEXT POINTER, GET BACK DESC.
6926          CALL     CHKSTR   
6929          MOV      A,M      
6930          PUSH     H                        ;SAVE DESC. POINTER.
6931          LHLD     FACLO                    ;GET POINTER TO 2ND DESC.
6934          PUSH     H                        ;SAVE IT
6935          ADD      M                        ;ADD TWO LENGTHS TOGETHER
6936          MVI      E,ERRLS                  ;SEE IF RESULT .LT. 256
6938          JC       ERROR                    ;ERROR "LONG STRING"
6941          CALL     STRINI                   ;GET INITIAL STRING
6944          POP      D                        ;GET 2ND DESC.
6945          CALL     FRETMP   
6948          XTHL                              ;SAVE POINTER TO IT
6949          CALL     FRETM2                   ;FREE UP 1ST TEMP
6952          PUSH     H                        ;SAVE DESC. POINTER (FIRST)
6953          LHLD     DSCTMP+2                 ;GET POINTER TO FIRST
6956          XCHG                              ;IN [D,E]
6957          CALL     MOVINS                   ;MOVE IN THE FIRST STRING
6960          CALL     MOVINS                   ;AND THE SECOND
6963          LXI      H,TSTOP                  ;CAT REENTERS FORMULA EVALUATION AT TSTOP
6966          XTHL     
6967          PUSH     H                        ;TEXT POINTER OFF FIRST
6968          JMP      PUTNEW                   ;THEN RETURN ADDRESS OF TSTOP
6973 MOVINS:  POP      H                        ;GET RETURN ADDR
6974          XTHL                              ;PUT BACK, BUT GET DESC.
6976          MOV      A,M                      ;[A]=STRING LENGTH
6977          INX      H        
6978          MOV      C,M                      ;[B,C]=POINTER AT STRING DATA
6979          INX      H        
6980          MOV      B,M      
6981          MOV      L,A>                     ;[L]=STRING LENGTH
6985          POP      B                        ;TEXT POINTER HERE
6986          POP      H>                       ;CHARACTER COUNT HERE
6987 MOVSTR:  INR      L        
6988 MOVLP:   DCR      L                        ;SET CC'S
6989          RZ                                ;0, NO BYTE TO MOVE
6990          LDAX     B                        ;GET CHAR
6991          STAX     D                        ;SAVE IT
6992          INX      B                        ;MOVE POINTERS
6993          INX      D        
6994          JMP      MOVLP                    ;KEEP DOING IT
7014 FRESTR:  CALL     CHKSTR                   ;MAKE SURE ITS A STRING
7017 FREFAC:  LHLD     FACLO    
7020 FRETM2:  XCHG                              ;FREE UP THE TEMP IN THE FACLO
7021 FRETMP:  LHLD     TEMPPT                   ;GET TEMP POINTER
7024          DCX      H                        ;LOOK AT WHAT IS IN THE LAST TEMP
7025          MOV      B,M                      ;[B,C]=POINTER AT STRING
7026          DCX      H                        ;DECREMENT TEMPPT BY STRSIZ
7027          MOV      C,M      
7030          DCX      H>       
7032          XCHG                              ;RETURN WITH [H,L]
7034          RNZ                               ;RETURN NOW IF NOW FREEING DONE
7035          SHLD     TEMPPT                   ;UPDATE THE TEMP POINTER SINCE
7039          PUSH     D                        ;SAVE [D,E] TO RETURN IN [H,L]
7040          MOV      D,B                      ;[D,E]=POINTER AT STRING
7041          MOV      E,C      
7042          DCX      D                        ;SUBTRACT ONE
7043          MOV      C,M                      ;[C]=LENGTH OF THE STRING FREED UP
7044          LHLD     FRETOP                   ;SEE IF ITS THE FIRST
7049          JNZ      NOTLST                   ;NO SO DON'T ADD
7052          MOV      B,A                      ;MAKE [B]=0
7053          DAD      B                        ;ADD
7054          SHLD     FRETOP                   ;AND UPDATE FRETOP
7057 NOTLST:  POP      H                        ;GET POINTER AT CURRENT DESCRIPTOR
7058          RET      
7063 LEN:     LXI      B,SNGFLT                 ;CALL SNGFLT WHEN DONE
7066          PUSH     B                        ;LIKE SO
7067 LEN1:    CALL     FRESTR                   ;FREE UP TEMP POINTED TO BY FACLO
7070          XRA      A                        ;FORCE NUMERIC FLAG
7071          MOV      D,A                      ;SET HIGH OF [D,E] TO ZERO FOR VAL
7073          STA      VALTYP>  
7074          MOV      A,M      
7075          ORA      A                        ;SET CONDITION CODES ON LENGTH
7076          RET      RETURN   
7081 ASC:     CALL     LEN1                     ;SET UP ORIGINAL STR
7084          JZ       FCERR                    ;NULL STR, BAD ARG.
7087          INX      H                        ;BUMP POINTER
7089          INX      H>                       ;BUMP POINTER
7091          POP      H                        ;GET ADDR IN [H,L]
7092          MOV      A,M                      ;GET FIRST CHAR
7093          JMP      SNGFLT                   ;SNGFLT IT
7101 CHR$:    MVI      A,1                      ;ONE CHARACTER STR
7103          CALL     STRINI                   ;GET STRING IN DSCTMP
7106          CALL     CONINT                   ;GET INTEGER IN RANGE
7109          LHLD     DSCTMP+2                 ;GET ADDR OF STR
7112          MOV      M,E                      ;SAVE ASCII BYTE
7113 FINBCK:  POP      B                        ;RETURN TO HIGHER LEVEL &
7115          JMP      PUTNEW                   ;DO CALL PUTNEW
7123 LEFT$:   CALL     PREAM                    ;TEST THE PARAMETERS
7126          XRA      A                        ;LEFT NEVER CHANGES STRING POINTER
7127 LEFT3:   XTHL                              ;SAVE TEXT POINTER
7128          MOV      C,A                      ;OFFSET NOW IN [C]
7129 LEFT2:   PUSH     H                        ;SAVE DESC. FOR FRETMP
7130          MOV      A,M                      ;GET STRING LENGTH
7131          CMP      B                        ;ENTIRE STRING WANTED?
7132          JC       ALLSTR                   ;IF #CHARS ASKED FOR.GE.LENGTH, YES
7135          MOV      A,B                      ;GET TRUNCATED LENGTH OF STRING
7137 ALLSTR:  MVI      C,0                      ;MAKE OFFSET ZERO
7139          PUSH     B                        ;SAVE OFFSET ON STACK
7140          CALL     GETSPA                   ;GET SPACE FOR NEW STRING
7143          POP      B                        ;GET BACK OFFSET
7144          POP      H                        ;GET BACK DESC POINTER.
7145          PUSH     H                        ;BUT KEEP ON STACK
7146          INX      H                        ;MOVE TO STRING POINTER FIELD
7148          INX      H>       
7149          MOV      B,M                      ;GET POINTER LOW
7150          INX      H        
7151          MOV      H,M                      ;POINTER HIGH
7152          MOV      L,B                      ;GET LOW IN L
7153          MVI      B,0                      ;GET READY TO ADD OFFSET TO POINTER
7155          DAD      B                        ;ADD IT
7156          MOV      B,H                      ;GET OFFSET POINTER IN [B,C]
7157          MOV      C,L      
7158          CALL     STRAD2                   ;SAVE INFO IN DSCTMP
7161          MOV      L.A                      ;GET # OF CHARS TO MOVE IN L
7162          CALL     MOVSTR                   ;MOVE THEM IN
7165          POP      D                        ;GET BACK DESC. POINTER
7166          CALL     FRETMP                   ;FREE IT UP.
7169          JMP      PUTNEW                   ;PUT TEMP IN TEMP LIST
7173 RIGHT$:  CALL     PREAM                    ;CHECK ARG
7176          POP      D                        ;GET DESC. POINTER
7177          PUSH     D                        ;SAVE BACK FOR LEFT
7178          LDAX     D                        ;GET PRESENT LEN OF STR
7179          SUB      B                        ;SUBTRACT 2ND PARM
7180          JMP      LEFT3                    ;CONTINUE WITH LEFT CODE
7190 MID$:    XCHG                              ;PUT THE TEXT POINTER IN [H,L]
7191          MOV      A,M                      ;GET THE FIRST CHARACTER
7192          CALL     PREAM2                   ;GET OFFSET OFF STACK AND MAKE
7196          PUSH     B                        ;PUT OFFSET ON TO THE STACK
7197          MVI      E,255                    ;IF TWO ARG GUY, TRUNCATE.
7199          CPI      ")"      
7201          JZ       MID2                     ;[E] SAYS USE ALL CHARS
7207          CALL     GETBYT                   ;GET ARGUMENT IN [E]
7212          POP      PSW                      ;GET OFFSET BACK IN A
7213          XTHL                              ;SAVE TEXT POINTER, GET DESC.
7214          LXI      B,LEFT2                  ;WHERE TO RETURN TO.
7217          PUSH     B                        ;GOES ON STACK
7218          DCR      A                        ;SUB ONE FROM OFFSET
7219          CMP      M                        ;POINTER PAST END OF STR?
7220          MVI      B,0                      ;ASSUME NULL LENGTH STR
7222          RNC                               ;YES, JUST USE NULL STR
7223          MOV      C,A                      ;SAVE OFFSET OF CHARACTER POINTER
7224          MOV      A,M                      ;GET PRESENT LEN OF STR
7225          SUB      C                        ;SUBTRACT INDEX (2ND ARG)
7226          CMP      E                        ;IS IT TRUNCATION
7227          MOV      B,A                      ;GET CALCED LENGTH IN B
7228          RC                                ;IF NOT USE PARTIAL STR
7229          MOV      B,E                      ;USE TRUNCATED LENGTH
7239 FNINP:   CALL     CONINT                   ;GET INTEGER CHANNEL #
7242          STA      INPWRD+1                 ;GEN INP INSTR
7245 INPWRD:  IN       0                        ;THE INP INSTR
7247          JMP      SNGFLT                   ;SNGFLT RESULT
7251 FNOUT:   CALL     SETIO                    ;GET READY
7254 OUTWRD:  OUT      0                        ;DO IT
7256          RET                               ;AND THATS ALL
7263 FNWAIT:  CALL     SETIO                    ;SET UP FOR WAIT
7266          PUSH     PSW                      ;SAVE THE MASK
7267          MVI      E,0                      ;DEFAULT MASK2 TO ZERO
7269          DCX      H        
7271          JZ       NOTTHR                   ;IF NO THIRD ARGUMENT SKIP THIS
7276          CALL     GETBYT   
7279 NOTTHR:  POP      B                        ;REGET THE "AND" MASK
7280 STAINP:  IN       0                        ;THE INPUT INSTR
7282          XRA      E                        ;XOR WITH MASK2
7283          ANA      B                        ;AND WITH MASK
7284          JZ       STAINP                   ;LOOP UNTIL RESULT IS NON-ZERO
7293 PREAM:   XCHG                              ;PUT THE TEXT POINTER IN [H,L]
7297 PREAM2:  POP      B                        ;GET RETURN ADDR OFF STACK
7298          POP      D                        ;GET LENGTH OF ARG OFF STACK
7299          PUSH     B                        ;SAVE RETURN ADDR BACK ON
7300          MOV      B,E                      ;SAVE INIT LENGTH
7301          INR      B        
7302          DCR      B                        ;SEE IF EQUAL TO ZERO
7304          RNZ      
7306 FCERR:   MVI      E,ERRFC  
7308          JMP      ERROR>   
7312          JZ       FCERR                    ;IT MUST NOT BE 0
7315 SETIO:   CALL     GETBYT                   ;GET INTEGER CHANNEL NUMBER IN [A]
7318          STA      STAINP+1                 ;SETUP "WAIT"
7321          STA      OUTWRD+1                 ;SETUP "OUT"
7330 GETBYT:  CALL     FRMEVL   
7333 CONINT:  PUSH     H        
7334          CALL     PROINT   
7337          XCHG     
7338          POP      H>       
7340 GETBYT:  CALL     FRMNUM                   ;READ FORMULA INTO THE FAC.
7341 CONINT:  CALL     POSINT>                  ;CONVERT THE FAC TO A SINGLE BYTE INTEGER
7342          MOV      A,D                      ;SHOULD BE .LT. 255
7343          ORA      A                        ;SET CC'S
7344          JNZ      FCERR                    ;WASN'T ERROR
7347          DCX      H                        ;ACTUALLY FUNCTIONS CAN GET HERE
7351          MOV      A,E                      ;RETURN THE RESULT IN [A] AND [E]
7362 VAL:     CALL     LEN1                     ;DO SETUP, SET RESULT=REAL
7365          JZ       ZERO                     ;RETURN ZERO IF NULL
7368          MOV      E,A                      ;GET LENGTH OF STR
7370          INX      H>                       ;THIS IS ALL A KLUDGE
7371          INX      H                        ;TO HANDLE THE FACT THE IF
7373          MOV      H,B                      ;ARE STORED NEXT TO EACH OTHER
7374          MOV      L,C                      ;AND FIN IS CALLED POINTING TO
7375          DAD      D                        ;THE FIRST TWELVE WILL BE RETURNED
7376          MOV      B,M                      ;THE IDEA IS TO STORE 0 IN THE
7377          MOV      M,D                      ;STRING BEYOND THE ONE VAL
7378          XTHL                              ;IS BEING CALLED ON
7379          PUSH     B                        ;THE FIRST CHARACTER OF THE NEXT STRING
7380          MOV      A,M                      ;GET FIRST CHARACTER OF ARGUMENT
7381          CALL     FIN                      ;TURN IT INTO A NUMBER IN THE FAC
7384          POP      B                        ;GET THE MODIFIED CHARACTER OF THE NEXT
7386          POP      H                        ;GET THE POINTER TO THE MODIFIED CHARACTER
7387          MOV      M,B                      ;RESTORE THE CHARACTER
7399 LLIST:   MVI      A,1                      ;GET NON ZERO VALUE
7400          STA      PRTFLG>                  ;SAVE IN I/O FLAG
7401 LIST:    POP      B                        ;GET RID OF NEWSTT RETURN ADDR
7402          CALL     SCNLIN                   ;SCAN LINE RANGE
7405          PUSH     B                        ;SAVE POINTER TO 1ST LINE
7406 LIST4:   POP      H                        ;GET POINTER TO LINE
7407          POP      D                        ;GET MAX LINE # OFF STACK
7409          MOV      A,B                      ;SEE IF END OF CHAIN
7410          ORA      C        
7411          POP      B                        ;GET LINK OFF STACK FOR ISCNTC
7412          JZ       READY                    ;LAST LINE, STOP.
7416          CALL     ISCNTC>                  ;CHECK FOR CONTROL-C
7419          PUSH     B                        ;SAVE LINK BACK ON
7421          XTHL                              ;GET LINE # INTO [H,L]
7422          XCHG                              ;GET MAX LINE IN [H,L]
7424          POP      B                        ;TEXT POINTER TO [B,C]
7425          JC       STPROY                   ;IF PAST, THEN DONE LISTING.
7428          XTHL                              ;SAVE MAX ON BOTTOM OF STACK
7429          PUSH     H                        ;SAVE LINK ON TOP
7430          PUSH     B                        ;SAVE TEXT POINTER BACK
7431          XCHG                              ;GET LINE # IN [H,L]
7432          CALL     CRDO                     ;DO CRLF TO START OUT
7436          CALL     LINPRT                   ;PRINT AS INT WITHOUT LEADING SPACE
7439          MVI      A,"      "        
7441          POP      H        
7443          CALL     BUFLIN                   ;UNPACK THE LINE INTO BUF
7446          LXI      H,BUF-1                  ;POINT AT THE START OF THE UNPACKED CHARACTERS
7449          MVI      B,0                      ;STOP ON ZERO ONLY
7451          CALL     STRLT3                   ;LITERALIZE THE LINE STRING
7454          CALL     STRPRT                   ;PRINT OUT THE CHARACTERS
7457          JMP      LIST4                    ;PRINT ANOTHER LINE
7460 BUFLIN:  LXI      B,BUF-1  
7464 PRIT4:   POP      H                        ;RESTORE POINTER TO START OF TEXT
7465 PLOOP:   MOV      A,M                      ;GET A CHARACTER FROM LINE.
7466          INX      B                        ;ADVANCE STUFF COUNT
7467          ORA      A                        ;IS IT A RESERVED WORD
7468          INX      H                        ;INCREMENT POINTER INTO TEXT
7469          STAX     B                        ;STORE A ZERO IF THE END
7470          RZ                                ;ZERO, END OF LINE.
7471          JP       PLOOP                    ;REGULAR CHAR, JUST PRINT IT
7474          CPI      ELSETK                   ;IF ITS "ELSE" DON'T PRINT THE COLON
7477          CZ       DCXBRT##                 ;BACKUP STUFF COUNT TO ELIMINATE
7480          SUI      127                      ;GET RID OF SIGN BIT AND ADD ONE
7482          PUSH     H                        ;SAVE CURRRENT POSIT
7483          LXI      D,RESLST                 ;GET RESLST POINTER.
7486 RESRCH:  PUSH     D        
7487          PUSH     PSW                      ;SAVE THE RESERVED WORD NUMBER
7488 RESCRI:  LDAX     D                        ;GET CHARACTER FROM RESLST
7489          INX      D                        ;BUMP RESLST POINTER
7490          ORA      A                        ;TEST BITS
7491          JP       RESCR1                   ;NOT AT END OF RESERVED WORD YET
7494          POP      PSW      
7495          DCR      A                        ;DECREMENT CHAR
7496          POP      H                        ;POP START POINTER HERE
7497          JNZ      RESRCH                   ;NOT AT END OF RESLST YET.
7501 PRIT3:   MOV      A,M                      ;GET A CHARACTER FROM RESERVED WORD
7502          ORA      A                        ;SET CONDITION CODES
7503          STAX     B        
7504          JM       PRIT4    
7507          INX      B        
7508          INX      H                        ;BUMP RESLST POINTER
7509          JMP      PRIT3                    ;PRINT THE REST
7517 DELETE:  CALL     SCNLIN                   ;SCAN LINE RANGE
7520          POP      D                        ;POP MAX LINE OFF STACK
7521          PUSH     B                        ;SAVE POINTER TO START OF 1ST LINE
7522          CALL     FNDLIN                   ;FIND THE LAST LINE
7525          POP      B                        ;GET POINTER TO FIRST IN [B,C]
7526          PUSH     H                        ;SAVE THE POINTER TO THE NEXT LINE
7527          LXI      H,REDDY                  ;PRINT "OK" PREMATURELY
7530          CALL     STROUT   
7533          LXI      H,FINI                   ;GO BACK TO FINI WHEN DONE
7536          XTHL                              ;[H,L]=POINTER TO THE NEXT LINE
7537 DEL:     XCHG                              ;[D,E] NOW HAVE THE POINTER TO THE LINE
7539          LHLD     VARTAB                   ;COMPACTIFYING TO VARTAB
7542 MLOOP:   LDAX     D        
7543          STAX     B                        ;SHOVING DOWN TO ELIMINATE A LINE
7544          INX      B        
7545          INX      D        
7547          JNC      MLOOP                    ;DONE COMPACTIFYING?
7550          MOV      H,B      
7551          MOV      L,C      
7552          INX      H                        ;NEW VARTAB
7553          SHLD     VARTAB   
7567 DSKO$:   CALL     FRMEVL                   ;EVALUATE FORMULA
7569          PUSH     H                        ;SAVE TEXT POINTER
7570          CALL     FRESTR                   ;FREE UP THE FACLO
7571          XTHL                              ;[H,L]=TXTPTR SAVE POINTER AT
7573          CALL     GETBYT                   ;EVALUATE 2ND (SECTOR) IN [E]
7574          XTHL                              ;SAVE TEXT POINTER, GET DESC.
7577          POP      H                        ;[H,L] GET STRING POINTER
7578          POP      B        
7579          MOV      B,A                      ;SECTOR NUMBER INTO [B]
7580          MVI      A,^D137  
7581          SUB      C        
7582          JC       FCERR                    ;STRING TOO LONG
7583          INR      A        
7584          MOV      E,A                      ;NUMBER OF ZEROS+1
7585          MVI      D,64                     ;SETUP A MASK
7586          INR      C        
7587          MVI      A,4                      ;LOAD THE HEAD
7588          OUT      9                        ;TO DISK STATUS
7589 SECLP:   IN       ^O11                     ;GET SECTOR STATUS
7590          RAR                               ;TEST FOR START OF SECTOR
7591          JNC      SECLP                    ;KEEP WAITING
7592          ANI      63                       ;START OF SECTOR, RIGHT ONE
7593          CMP      B                        ;COMPARE TO FIND OUT
7594          JNZ      SECLP                    ;IF NOT
7595          MVI      A,128                    ;WRITE ENABLE DISK
7596          OUT      9        
7597          MVI      B,255                    ;ALL ONE'S ALWAYS WRITTEN FIRST
7598 WRITOK:  IN       8                        ;GET STATUS
7599          ANA      D                        ;WRITE OK
7600          JZ       WRITOK                   ;NO, MORE LOOPING.
7601          MOV      A,B                      ;GET CHARACTER TO WRITE
7602          OUT      10                       ;SEND IT OUT
7603          DCR      C                        ;TEST FOR NULL
7604          JZ       ZRLOP    
7605 NOTYTD:  IN       8                        ;POLL
7606          ANA      D                        ;MASK TEST
7607          JZ       NOTYTD                   ;WAITING
7608          MOV      A,M                      ;GET CHARACTER
7609          OUT      10       
7610          DCR      C                        ;DECREMENT CHARACTER COUNT
7611          INX      H        
7612          JNZ      NOTYTO   
7613 ZRLOP:   IN       8        
7614          ANA      D        
7615          JZ       ZRLOP    
7616          XRA      A                        ;PUT OUT A ZERO
7617          OUT      10       
7618          DCR      E        
7619          JNZ      ZRLOP    
7620 TRUFIN:  MVI      A,8                      ;UNLOAD THE HEAD
7621          OUT      9        
7622          POP      H        
7623          RET                               ;DONE
7625 DSKI$:   MVI      A,137                    ;A LOT OF CHARACTERS ARE COMING
7626          CALL     STRINI                   ;MAKE ROOM!
7627          CALL     CONINT                   ;WHERE ARE THEY?
7629          LHLD     DSCTMP+2                 ;PLACE TO STORE THEM
7630          MVI      A,4                      ;LOAD THE HEAD
7631          OUT      9        
7632 SECLP2:  IN       9                        ;GET SECTOR INFO
7633          ORA      A                        ;SEE IF BEGINNING OF SECTOR(READ)
7634          JP       SECLP2                   ;IF NOT, KEEP WAITING
7635          RAR                               ;FIX UP SECTOR #
7636          ANI      63                       ;GET SECTOR #
7637          CMP      E                        ;IS IT THE ONE WE WANTED
7638          JNZ      SECLP2                   ;TRY TO FIND IT
7639          MVI      C,137                    ;GET # OF CHARS TO READ
7640 READOK:  IN       8                        ;GET DISK STATUS
7641          ORA      A                        ;READY TO READ BYTE
7642          JP       READOK   
7643          IN       10                       ;READ THE STUFF
7644          MOV      M,A                      ;SAVE IN STR
7645          INX      H                        ;BUMP DEST POINTER
7646          DCR      C                        ;LESS CHARS
7647          JNZ      READOK   
7648          MVI      A,8                      ;UNLOAD HEAD
7649          OUT      9        
7650          JMP      FINBCK                   ;USE CHRS TO FINISH UP
7664 CONSDO:  XRA      A                        ;FORCE A CHANNEL ZERO CONSOLE
7665          CALL     CONS2                    ;ON RESTART AT ZERO
7666          JMP      READY                    ;TYPE "OK" AND ACCEPT INPUT
7667 CONSOL:  CALL     GETBYT                   ;FETCH AN INTEGER INTO [A]
7668          RNZ                               ;CHECK FOR A TERMINATOR
7671          STA      CNLCA1                   ;CHANGE ALL THE FLAG INPUT CHANNEL REFERENCES
7672          STA      CNLCA2   
7673          STA      CNLCA3>  
7675          STA      CNLCA4>  
7676          INR      A                        ;[A]=DATA INPUT CHANNEL
7677          STA      CNLCB1                   ;CHANGE ALL THE DATA INPUT CHANNEL REFERENCES
7678          STA      CNLCB2   
7686 CASIN:   IN       6                        ;ROUTINE TO READ A CHARACTER
7687          ANI      IDONE                    ;FROM THE CASSETTE INTO [A]
7688          JNZ      CASIN    
7689          IN       7                        ;READ THE DATA
7690          RET      
7695 TWOCSO:  CALL     CASOUT                   ;DOUBLE OUT OF [A]
7696 CASOUT:  PUSH     PSW                      ;ROUTINE TO WRITE A CHARACTER IN [A]
7697 CASLK:   IN       6                        ;ONTO THE CASSETTE
7698          ANI      ODONE    
7699          JNZ      CASLK                    ;WAIT TILL CASSETTE IS READY
7700          POP      PSW                      ;GET THE CHARACTER BACK
7701          OUT      7                        ;OUTPUT THE CHARACTER
7702          RET      
7708 CSAVE:   PUSH     H        
7709          MVI      A,211    
7710          CALL     CASOUT                   ;PUT OUT THE START BYTES
7711          CALL     TWOCSO                   ;TWO MORE TIMES
7712          MOV      A,M                      ;GET FILENAME
7713          CALL     CASOUT                   ;STORE AFTER 211'S
7714          LHLD     TXTTAB                   ;START OF PROGRAM
7715          XCHG     
7716          LHLD     VARTAB                   ;END OF PROGRAM
7717 LOPCSO:  LDAX     D                        ;GET A BYTE FROM THE PROGRAM
7718          INX      D        
7719          CALL     CASOUT                   ;SEND IT OUT TO THE CASSETTE
7721          JNZ      LOPCSO                   ;IF NOT,OUTPUT MORE
7722          CALL     TWOCSO                   ;TWO MORE 0'S TO MARK THE END
7723          POP      H                        ;RESTORE THE TEXT POINTER
7725          RET      
7733 CLOAD:   STA      FACLO                    ;SAVE THE FILENAME
7734          CALL     SCRTCH                   ;RESET EVERYTHING
7735 LOPCLK:  MVI      B,3                      ;NUMBER OF START CHARACTERS
7736 LOPCL2:  CALL     CASIN                    ;GET A CHARACTER
7737          CPI      211                      ;START CHARACTER?
7738          JNZ      LOPCLK                   ;NO, RESET COUNT AND LOOK SOME MORE
7739          DCR      B                        ;DECREMENT THE COUNT
7740          JNZ      LOPCL2                   ;SEEN THREE YET?
7741          LXI      H,FACLO                  ;POINT AT THE FILENAME
7742          CALL     CASIN                    ;READ THIS FILENAME
7743          CMP      M                        ;THE RIGHT FILE?
7744          JNZ      LOPCLK                   ;IF NOT, START COMPLETELY OVER
7746 DOCRS:   MVI      B,4                      ;NUMBER OF ZEROS TO GET
7748 DOCSMR:  CALL     CASIN                    ;GET A CHARACTER
7749          MOV      M,A                      ;STORE IT
7750          CALL     REASON                   ;MAKE SURE THERE IS ROOM
7751          MOV      A,M                      ;REGET THE CHARACTER
7752          ORA      A                        ;A ZERO?
7753          INX      H        
7754          JNZ      DOCRS                    ;RESET # OF ZEROS SEEN
7755          DCR      B                        ;DECREMENT NUMBER OF ZEROS
7756          JNZ      DOCSMR                   ;SEEN FOUR?
7757          SHLD     VARTAB                   ;SETUP END OF PROGRAM
7758          LXI      H,REDDY                  ;TYPE "OK" PREMATURELY
7759          CALL     STROUT   
7760          JMP      FINI>                    ;FIX UP THE LINKS AND GO BACK TO MAIN
7765 PEEK:    CALL     FRCINT                   ;GET AN INTEGER IN [H,L]
7768          MOV      A,M>                     ;GET THE VALUE TO RETURN
7770 PEEK:    CALL     POSINT                   ;GET THE VALUE OF FACLO INTO [D,E]
7771          LDAX     D>                       ;READ THE VALUE
7772          JMP      SNGFLT                   ;AND FLOAT IT
7776 POKE:    CALL     FRMEVL   
7779          PUSH     H                        ;SAVE THE TEXT POINTER
7780          CALL     FRCINT                   ;GET INTEGER VALUE OF FAC IN [H,L]
7785 POKE:    CALL     INTI02                   ;READ LOCATION TO POKE
7786          PUSH     D>                       ;SAVE THE LOCATION
7789          CALL     GETBYT   
7792          POP      D                        ;GET THE ADDRESS BACK
7793          STAX     D                        ;STORE IT AWAY
